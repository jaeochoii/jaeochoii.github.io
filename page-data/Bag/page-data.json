{"componentChunkName":"component---src-templates-blog-template-js","path":"/Bag/","result":{"data":{"cur":{"id":"d096d1b9-f9c8-54ae-8a22-c02aa170ba18","html":"<p>우선 DP 알고리즘의 기본 개념은 <a href=\"https://jaeochoii.github.io/DP/\">알고리즘 준비하기 - 다이나믹 프로그래밍</a>에 잘 정리해두었으니 참고하면 좋을 것 같다.</p>\n<p>👉 문제 확인하기 : <a href=\"https://www.acmicpc.net/problem/12865\">BOJ - 평범한 배낭</a></p>\n<h2 id=\"-배낭문제\" style=\"position:relative;\"><a href=\"#-%EB%B0%B0%EB%82%AD%EB%AC%B8%EC%A0%9C\" aria-label=\" 배낭문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 배낭문제</h2>\n<p>다이나믹 프로그래밍 (DP) 문제 중 대표적인 유형이 바로 0/1 배낭 문제이다.</p>\n<p>물건의 개수 N이 주어지고, 배낭이 최대로 버틸 수 있는 무게 K가 주어진다. 각 물건의 무게와 가치가 주어질 때 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 구하는 문제가 바로 배낭 문제이다. 그 중에서 0/1인 이유는 물건을 쪼개서 넣을 수는 없고 물건을 넣거나, 혹은 넣지 않거나 둘 중 하나의 선택만 할 수 있기 때문이다.</p>\n<p><code class=\"language-text\">평범한 배낭</code> 문제를 인용해서 설명을 해보도록 하자. 물건의 개수(N)는 4개, 배낭의 무게(K)는 7이다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><strong>물건1</strong></th>\n<th><strong>물건2</strong></th>\n<th><strong>물건3</strong></th>\n<th><strong>물건4</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>무게</strong></td>\n<td>6</td>\n<td>4</td>\n<td>3</td>\n<td>5</td>\n</tr>\n<tr>\n<td><strong>가치</strong></td>\n<td>13</td>\n<td>8</td>\n<td>6</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n<p>물건의 개수가 4개라서 브루트포스 알고리즘으로 구하더라도 짧은 시간내에 구할 수는 있으나 물건의 개수가 조금만 더 늘어난다면 따져보아야할 경우의 수는 기하급수적으로 늘어나기 때문에 DP를 활용해야 한다.</p>\n<p>우선 값을 저장할 dp를 2차원 배열로 만든다. 배열의 형태는 dp[i][j]으로 저장할 것인데, i는 물건의 번호가, j는 배낭의 용량이 된다. 여기서 dp[i][j]는 i번째까지의 물건을 살펴보고 배낭의 용량이 j일 때 배낭에 들어간 물건의 가치합의 최댓값을 의미한다.</p>\n<p>즉 궁극적으로 구하고자 하는 K의 가치 최대값은 dp[N][k]에 위치할 것이다.</p>\n<h2 id=\"-배낭문제-해결-과정\" style=\"position:relative;\"><a href=\"#-%EB%B0%B0%EB%82%AD%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\" aria-label=\" 배낭문제 해결 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 배낭문제 해결 과정</h2>\n<h3 id=\"1-배낭문제에서는-우선-배열의-초기상태를-모두-0으로-채워준다-\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EB%82%AD%EB%AC%B8%EC%A0%9C%EC%97%90%EC%84%9C%EB%8A%94-%EC%9A%B0%EC%84%A0-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B4%88%EA%B8%B0%EC%83%81%ED%83%9C%EB%A5%BC-%EB%AA%A8%EB%91%90-0%EC%9C%BC%EB%A1%9C-%EC%B1%84%EC%9B%8C%EC%A4%80%EB%8B%A4-\" aria-label=\"1 배낭문제에서는 우선 배열의 초기상태를 모두 0으로 채워준다  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>**1. 배낭문제에서는 우선 배열의 초기상태를 모두 0으로 채워준다. **</h3>\n<p>특히 i가 0일 때에는 배낭의 무게가 몇이던 물건을 선택하지 않았기 때문에 0이 채워지고, j가 0일 때에는 어떤 물건이던 배낭의 무게가 0일 때에는 물건이 들어갈 수 없기 때문이다.</p>\n<h3 id=\"-2-반복문을-통해-물건이-채워질-때마다-최댓값을-구해준다-\" style=\"position:relative;\"><a href=\"#-2-%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%AC%BC%EA%B1%B4%EC%9D%B4-%EC%B1%84%EC%9B%8C%EC%A7%88-%EB%95%8C%EB%A7%88%EB%8B%A4-%EC%B5%9C%EB%8C%93%EA%B0%92%EC%9D%84-%EA%B5%AC%ED%95%B4%EC%A4%80%EB%8B%A4-\" aria-label=\" 2 반복문을 통해 물건이 채워질 때마다 최댓값을 구해준다  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>** 2. 반복문을 통해 물건이 채워질 때마다 최댓값을 구해준다. **</h3>\n<p>첫번째 물건(W = 6, V = 13)의 경우에는 배낭의 무게가 5일때까지는 물건을 넣을 수 없다. 따라서 배낭의 무게가 6일 때부터 가치를 배열에 넣을 수 있게 된다. 따라서 dp[1][6]과 dp[1][7]은 V인 13을 넣어주고 그 전까지는 그대로(0) 둔다.</p>\n<p>이제부터 집중을 해야하는 부분이다.\n두번째의 물건은 무게가 4, 가치가 8이다. 무게가 4이기 때문에 배낭의 무게가 3일때까지는 들어갈 수 없다. 그러므로 이전 물건까지 살펴보았던 dp[i-1][j]의 값을 그대로 가져온다. 따라서 dp[2][1] ~ dp[2][3]에는 0이 채워진다. 그리고 dp[2][4]에서는 배낭의 무게가 4인데 물건의 무게가 4이니까 두번째 물건을 넣을 수 있다. 따라서 이전 물건까지 살펴보았던 <strong>dp[i-1][j]와 dp[i-1][j - i번째의 무게] + i번째의 가치</strong> 중 더 큰 값을 넣는다.</p>\n<p>이 작업을 i의 끝까지 반복적으로 작업해주면 된다.</p>\n<p>앞에서 설명이 장황했지만 결론은 다음과 같다.</p>\n<ul>\n<li>현재 물건을 포함하지 않는 경우 : 이전에 구했던 dp[i-1][j]</li>\n<li>현재 물건을 포함하는 경우 : 남은 공간의 가치 dp[i-1][j - 현재 물건의 w] + 현재 물건의 가치 V</li>\n</ul>\n<h2 id=\"-해결-코드-js\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0-%EC%BD%94%EB%93%9C-js\" aria-label=\" 해결 코드 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 해결 코드 (JS)</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dp <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">K</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>weight<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bagInfo<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> weight <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> weight<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EB%B0%B0%EB%82%AD%EB%AC%B8%EC%A0%9C\">🎯 배낭문제</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%B0%B0%EB%82%AD%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EA%B3%BC%EC%A0%95\">🎯 배낭문제 해결 과정</a></p>\n<ul>\n<li><a href=\"#1-%EB%B0%B0%EB%82%AD%EB%AC%B8%EC%A0%9C%EC%97%90%EC%84%9C%EB%8A%94-%EC%9A%B0%EC%84%A0-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%B4%88%EA%B8%B0%EC%83%81%ED%83%9C%EB%A5%BC-%EB%AA%A8%EB%91%90-0%EC%9C%BC%EB%A1%9C-%EC%B1%84%EC%9B%8C%EC%A4%80%EB%8B%A4-\">**1. 배낭문제에서는 우선 배열의 초기상태를 모두 0으로 채워준다. **</a></li>\n<li><a href=\"#-2-%EB%B0%98%EB%B3%B5%EB%AC%B8%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%AC%BC%EA%B1%B4%EC%9D%B4-%EC%B1%84%EC%9B%8C%EC%A7%88-%EB%95%8C%EB%A7%88%EB%8B%A4-%EC%B5%9C%EB%8C%93%EA%B0%92%EC%9D%84-%EA%B5%AC%ED%95%B4%EC%A4%80%EB%8B%A4-\">** 2. 반복문을 통해 물건이 채워질 때마다 최댓값을 구해준다. **</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%95%B4%EA%B2%B0-%EC%BD%94%EB%93%9C-js\">🎯 해결 코드 (JS)</a></p>\n</li>\n</ul>\n</div>","excerpt":"우선 DP 알고리즘의 기본 개념은 알고리즘 준비하기 - 다이나믹 프로그래밍에 잘 정리해두었으니 참고하면 좋을 것 같다. 👉 문제 확인하기 : BOJ - 평범한 배낭 🎯 배낭문제 다이나믹 프로그래밍 (DP) 문제 중 대표적인 유형이 바로 0/1 배낭 문제이다. 물건의 개수 N이 주어지고, 배낭이 최대로 버틸 수 있는 무게 K가 주어진다. 각 물건의 무게와 가치가 주어질 때 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 구하는 문제가 바로 배낭 문제이다. 그 중에서 0/1인 이유는 물건을 쪼개서 넣을 수는 없고 물건을 넣거나, 혹은 넣지 않거나 둘 중 하나의 선택만 할 수 있기 때문이다.  문제를 인용해서 설명을 해보도록 하자. 물건의 개수(N)는 4개, 배낭의 무게(K)는 7이다.  물건1 물건2 물건3 물건4 무게 6 4 3 5 가치 13 8 6 12 물건의 개수가 4개라서 브루트포스 알고리즘으로 구하더라도 짧은 시간내에 구할 수는 있으나 물건의 개수가 조금만 더 늘어난다면 따져보…","frontmatter":{"date":"January 22, 2024","title":"알고리즘 연습하기 - DP를 활용한 배낭문제","categories":"알고리즘","author":"재오","emoji":"📚"},"fields":{"slug":"/Bag/"}},"next":{"id":"3c3ed5f6-6990-51c8-93e1-7bb2fc711d4d","html":"<p>👉 참고할 문제 : <a href=\"https://www.acmicpc.net/problem/5525\">BOJ - IOIO</a></p>\n<h2 id=\"-kmp-알고리즘\" style=\"position:relative;\"><a href=\"#-kmp-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\" kmp 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 KMP 알고리즘</h2>\n<p>백준 브론즈 - 실버 문제를 접할 때 정말 많이 나오는 유형이 문자열 문제이다. 문제의 길이도 짧고, 직관적으로 이해가 가는 문제였기 때문에 어렵게 느껴지지도 않는다. 하지만 메모리 초과나 시간 초과가 무조건 한번씩은 발생한다. 특히 Node.js로 문제를 해결하고자 할 때 문자열을 다루는 내장함수 <code class=\"language-text\">slice()</code>, <code class=\"language-text\">splice()</code>, <code class=\"language-text\">indexOf()</code>가 존재하기 때문에 시간복잡도가 문자열 길이의 곱에 비례하여 O(NM)이 된다.</p>\n<p>시간복잡도가 O(NM)인 것을 O(N+M)으로 줄일 수 있는 알고리즘이 바로 <code class=\"language-text\">KMP 알고리즘</code>이다.</p>\n<p>이 KMP 알고리즘의 핵심 키워드는 <strong>패턴을 정의해서 했던 비교를 또 하지 않는다.</strong> 이다.</p>\n<h3 id=\"-패턴을-관리하는-failure-배열-만들기\" style=\"position:relative;\"><a href=\"#-%ED%8C%A8%ED%84%B4%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-failure-%EB%B0%B0%EC%97%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\" 패턴을 관리하는 failure 배열 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 패턴을 관리하는 Failure 배열 만들기</h3>\n<p>우리에게는 검색의 대상이되는 문자열(origin)과, 찾아야하는 패턴의 문자(keyword), 추가적으로 KMP를 위해 추가되는 개념인 <code class=\"language-text\">failure function</code>이 존재한다.</p>\n<p>예를 들어 origin은 전체 길이가 16인 ‘aabcacabcabcacab’이고 찾으려는 패턴 keyword은 길이가 10인 ‘abcabcacab’라고 했을때, 최종 failure fuction은 아래와 같은 배열의 형태를 띈다.</p>\n<table>\n<thead>\n<tr>\n<th>인덱스</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keyword</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>a</td>\n<td>b</td>\n<td>c</td>\n<td>a</td>\n<td>c</td>\n<td>a</td>\n<td>b</td>\n</tr>\n<tr>\n<td>failure</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>-1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>이렇게 패턴을 기록하는 이유는 찾고자 하는 keyword가 내부적으로 어떠한 패턴을 가지고 있다면, keyword를 찾기위해 전체 문자열인 origin과 0번 인덱스부터 비교해 나갈때, 서로 다르더라도 다시 처음부터 반복할 필요가 없게 만드는 것이다. 패턴만큼의 비교 인덱스를 건너뛰면 되기 때문이다.</p>\n<p>그렇다면 본격적으로 위와 같이 failure 함수를 만들어보는 작업을 해보자.</p>\n<ul>\n<li>길이는 keyword와 동일하다.</li>\n<li>failure[0]의 값은 -1로 초기화한다.</li>\n<li><strong>이후 반복문을 통해 keyword 배열을 순회하는데, 이때 중점이 되는 곳은 현재 인덱스의 failure 값이 아니라, 한 칸 앞의 failure 인덱스의 값보다 +1한 keyword의 값을 봐야한다.</strong> 그 이유는 failure 함수를 만드는 목적이 keyword의 패턴을 파악하기 위한 것이기 때문이다.</li>\n</ul>\n<p>예를 들어 인덱스 값이 4라면 failure[3]이 가지는 값(-1)보다 +1한 값(0)의 keyword 인덱스를 살펴본다. 한마디로 keyword[0]의 값이 keyword[4] 값과 같다면 faulure[3] + 1한 값을 failure[4]에 넣어주면 된다.</p>\n<h3 id=\"-failure-배열을-활용해서-keyword-찾기\" style=\"position:relative;\"><a href=\"#-failure-%EB%B0%B0%EC%97%B4%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4%EC%84%9C-keyword-%EC%B0%BE%EA%B8%B0\" aria-label=\" failure 배열을 활용해서 keyword 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 Failure 배열을 활용해서 keyword 찾기</h3>\n<p>이제 본격적으로 origin과 keyword를 첫번째 인덱스부터 비교하기 시작할텐데, 여기서 달라지는 점은 바로, 비교하는 두 값이 다를 때에는 failure 배열을 활용한다는 것이다.</p>\n<p>현재 origin은 ‘aabcacabcabcacab’이고 찾으려는 패턴은 keyword ‘abcabcacab’이다. 이제 두 문자열의 첫 인덱스부터 비교를 시작하는데, 만약 keyword와 origin이 달라졌을 경우에 우리가 이미 만들어놓은 failur 배열을 활용해주는 것이다. 현재 m의 값이 1이므로 한칸 앞의 failure[0]번 값을 보자. failure[0]번의 값은 -1이므로, 여기에 1을 더한 값 0이 m의 값이 된다. 즉, m은 다시 0이 되고 n은 여전히 1인채로, 한 칸씩 비교를 계속 해나간다.</p>\n<h2 id=\"-kmp-코드-구현-js\" style=\"position:relative;\"><a href=\"#-kmp-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84-js\" aria-label=\" kmp 코드 구현 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 KMP 코드 구현 (JS)</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token constant\">KMP</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">origin<span class=\"token punctuation\">,</span> keyword</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> originalArr <span class=\"token operator\">=</span> origin<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> keywordArr <span class=\"token operator\">=</span> keyword<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> failureArr <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>keywordArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// failure 배열 세팅</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keywordArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> failureArr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keywordArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> keywordArr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      failureArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      failureArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 비교 시작</span>\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token constant\">M</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">&lt;</span> originalArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>originalArr<span class=\"token punctuation\">[</span><span class=\"token constant\">N</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> keywordArr<span class=\"token punctuation\">[</span><span class=\"token constant\">M</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">N</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token constant\">M</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">M</span> <span class=\"token operator\">===</span> keywordArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token constant\">M</span> <span class=\"token operator\">=</span> failureArr<span class=\"token punctuation\">[</span><span class=\"token constant\">M</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다음 등장을 위해 M을 업데이트</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">M</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">N</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">M</span> <span class=\"token operator\">=</span> failureArr<span class=\"token punctuation\">[</span><span class=\"token constant\">M</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-kmp-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">🎯 KMP 알고리즘</a></p>\n<ul>\n<li><a href=\"#-%ED%8C%A8%ED%84%B4%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-failure-%EB%B0%B0%EC%97%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">💎 패턴을 관리하는 Failure 배열 만들기</a></li>\n<li><a href=\"#-failure-%EB%B0%B0%EC%97%B4%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%B4%EC%84%9C-keyword-%EC%B0%BE%EA%B8%B0\">💎 Failure 배열을 활용해서 keyword 찾기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-kmp-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84-js\">🎯 KMP 코드 구현 (JS)</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"January 21, 2024","title":"알고리즘 준비하기 - KMP","categories":"알고리즘","author":"재오","emoji":"📚"},"fields":{"slug":"/KMP/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.jaeochoiii.com","comments":{"utterances":{"repo":"jaeochoii/jaeochoii.github.io"}}}}},"pageContext":{"slug":"/Bag/","nextSlug":"/KMP/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}