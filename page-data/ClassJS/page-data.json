{"componentChunkName":"component---src-templates-blog-template-js","path":"/ClassJS/","result":{"data":{"cur":{"id":"1c330794-66aa-5e4a-9d0c-b3f9df34d1dc","html":"<h2 id=\"들어가기-전\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\" aria-label=\"들어가기 전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 전</h2>\n<p>4주간의 프리코스 과정이 끝나고 그동안 내가 작성했던 코드와 다른 분들의 코드를 비교해보는 시간을 가졌다. 프리코스 기간에는 아무래도 시간 관계상 코드 맞리뷰(?)를 통해서 일부의 코드만 보다가 프리코스가 종료된 후 5일간 약 100여 분의 코드를 살펴봤다.</p>\n<p>아무래도 다양한 사람이 작성한 코드이다보니 처음보는 문법도 많았고 ‘아~ 맞아 저런게 있었지~‘하는 기능도 찾을 수 있었다. 그 중에서 클래스에 정말 다양한 기능이 있는 것을 확인할 수 있었고, 궁금해졌다.</p>\n<p>예전에는 너무 방대한 양이고 내용이 어려워서 건너뛰었던 <a href=\"https://ko.javascript.info/\">자바스크립트 Info</a> 사이트에 정리된 내용을 공부해보는 시간을 가졌다.</p>\n<h2 id=\"내가-사용한-클래스의-용도는-무엇이었나\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EA%B0%80-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%9A%A9%EB%8F%84%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EC%97%88%EB%82%98\" aria-label=\"내가 사용한 클래스의 용도는 무엇이었나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내가 사용한 클래스의 용도는 무엇이었나</h2>\n<p><em>지금까지 나는 클래스를 어떤 용도로 사용했나?</em></p>\n<p>프리코스에 있는 문제를 풀 때, 하나의 공통적인 역할을 하는 클래스를 생성하고 그 아래 관련 기능을 하는 메서드를 포함시켰다. 그리고 컨트롤러에서 관련 메서드를 클래스를 통해서 꺼내는 일이 전부였다.</p>\n<h2 id=\"️-extends\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-extends\" aria-label=\"️ extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍️ extends</h2>\n<p>정말 매력적인 키워드이다. 클래스를 상속받아 기존에 존재하는 기능을 사용할 수도 있고, 새로운 기능을 추가해 클래스를 확장할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VisitDate</span> <span class=\"token punctuation\">{</span>\n  #date<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#date <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">processVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#date<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 프리코스 4주차 미션에서 작성한 <code class=\"language-text\">VisitDate</code> 클래스 일부이다. 실제 코드에서는 <code class=\"language-text\">Event</code> 클래스에서 VisitDate 클래스의 기능을 일부 사용하였다. 그 과정을 <code class=\"language-text\">extends</code> 키워드를 접목 시켜 한번 사용해보고자 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VisitDate</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dDayHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#date<span class=\"token punctuation\">.</span><span class=\"token function\">processVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndate<span class=\"token punctuation\">.</span><span class=\"token function\">dDayHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50</span>\ndate<span class=\"token punctuation\">.</span><span class=\"token function\">processVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<p>클래스 <code class=\"language-text\">Event</code> 을 사용해 만든 객체는 <code class=\"language-text\">date.dDayHandler()</code> 같은 <code class=\"language-text\">Event</code> 에 정의된 메서드에도 접근할 수 있고, <code class=\"language-text\">date.processVisitDate()</code> 같은 <code class=\"language-text\">VisitDate</code> 에 정의된 메서드에도 접근할 수 있다.</p>\n<p>키워드 <code class=\"language-text\">extends</code> 는 프로토타입을 기반으로 동작한다. 때문에 <code class=\"language-text\">Event.prototype</code> 에서 메서드를 찾지 못하면 <code class=\"language-text\">VisitDate.prototype</code> 에서 메서드를 가져온다.</p>\n<h2 id=\"️-메서드-오버라이딩\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"️ 메서드 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍️ 메서드 오버라이딩</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VisitDate</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">processVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#date<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자, 이번에는 위와 같은 코드가 있다고 가정을 하자. 만약 <code class=\"language-text\">Event</code> 클래스에서 자체적으로 <code class=\"language-text\">processVisitDate()</code> 라는 메서드를 제작한다면 상속받은 메서드가 아닌 자체 메서드가 사용된다. 위에서도 설명했지만 실행 순서는 자체 메서드 -> 상속받은 메서드이기 때문이다.</p>\n<p>그렇다면 상속받은 클래스의 메서드를 사용하고 싶다면 어떻게 해야할까? 이럴 때에는 <code class=\"language-text\">super</code> 키워드를 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VisitDate</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">dDayHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#date<span class=\"token punctuation\">.</span><span class=\"token function\">processVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">processVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">processVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 부모 클래스에서 값을 받아오고</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dDayHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Event 메서드를 호출한다</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"️-생성자-오버라이딩\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"️ 생성자 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍️ 생성자 오버라이딩</h2>\n<p>생성자는 보통 부모 <code class=\"language-text\">constructor</code> 을 호출한다. 이때 부모 <code class=\"language-text\">constructor</code> 에도 인수를 모두 전달하게 된다.</p>\n<p><code class=\"language-text\">Event</code> 에 커스텀 생성자를 추가하고, 커스텀 생성자에서 date와 eventList를 지정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VisitDate</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> date<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>event <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Reference Error</span></code></pre></div>\n<p>하지만 오류가 발생하였다. 무엇이 잘못되었을까?</p>\n<p><strong>상속 클래스의 생성자에서는 반드시 <code class=\"language-text\">super</code>을 호출하여야 한다. <code class=\"language-text\">super</code>는 this를 사용하기 전에 호출되어야만 한다.</strong></p>\n<p><code class=\"language-text\">일반 클래스</code>의 생성자 함수와 <code class=\"language-text\">상속 클래스</code>의 생성자 함수 간 차이는 new와 함께 드러난다.</p>\n<p>일반 클래스가 new와 함께 실행되면, 빈 객체가 만들어지고 this에 이 객체를 할당한다. 반면, 상속 클래스의 생성자 함수가 실행되면, 일반 클래스에서 일어난 일이 일어나지 않는다. 상속 클래스의 생성자 함수는 빈 객체를 만들고 this에 이 객체를 할당하는 일을 <code class=\"language-text\">부모 클래스</code>의 생성자가 처리해주길 기대한다.</p>\n<p>이런 차이 때문에 상속 클래스의 생성자에선 <code class=\"language-text\">super</code>를 호출해 부모 생성자를 실행해 주어야 한다. 그렇지 않으면 this가 될 객체가 만들어지지 않아 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VisitDate</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>event <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 정상적으로 작동한다</span></code></pre></div>\n<h2 id=\"️-static-다들-왜-사용했을까\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-static-%EB%8B%A4%EB%93%A4-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%96%88%EC%9D%84%EA%B9%8C\" aria-label=\"️ static 다들 왜 사용했을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🖍️ Static… 다들 왜 사용했을까?</h2>\n<p>프리코스 2주차 미션 코드 피어 리뷰에서 내 기준으로 코드를 잘(?) 작성하였다고 생각한 분들이 거의 <code class=\"language-text\">Static</code> 을 사용하였다. private 필드만으로 충분히 캡슐화된 코드를 작성할 수 있겠다고 생각하였기 때문에 더욱 궁금했다.</p>\n<p>2주차 회고때에는 나의 코드 스타일과 들어맞지 않겠다 생각하여 사용하지 않았지만 이번 기회에 한번 사용해보며 내 코드와 비교해보고 싶었다.</p>\n<h3 id=\"static을-사용하는-이유\" style=\"position:relative;\"><a href=\"#static%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"static을 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static을 사용하는 이유</h3>\n<p>한마디로 요약하자면 <code class=\"language-text\">Static</code> 은 <strong>복제가 필요없는 데이터를 다룰 때 효과적이다.</strong></p>\n<p>별도의 인스턴스 생성없이 클래스의 메서드를 바로 실행할 수 있다는 장점이 있다. 내가 기존에 사용했던 방식은 별도로 인스턴스를 생성하기 때문에 아무래도 메모리 낭비도 심하고 코드도 길어지는 단점이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">VisitDate</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>event <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">getEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 유효한 값</span>\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">getEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reference Error</span></code></pre></div>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<blockquote>\n<p><a href=\"https://ko.javascript.info/class-inheritance\">클래스 상속(Javascript Info)</a> > <a href=\"https://ko.javascript.info/static-properties-methods\">정적 메서드와 정적 프로퍼티(Javascript Info)</a></p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\">들어가기 전</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%82%B4%EA%B0%80-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%9A%A9%EB%8F%84%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4%EC%97%88%EB%82%98\">내가 사용한 클래스의 용도는 무엇이었나</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-extends\">🖍️ extends</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\">🖍️ 메서드 오버라이딩</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\">🖍️ 생성자 오버라이딩</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-static-%EB%8B%A4%EB%93%A4-%EC%99%9C-%EC%82%AC%EC%9A%A9%ED%96%88%EC%9D%84%EA%B9%8C\">🖍️ Static… 다들 왜 사용했을까?</a></p>\n<ul>\n<li><a href=\"#static%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">Static을 사용하는 이유</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>\n</div>","excerpt":"들어가기 전 4주간의 프리코스 과정이 끝나고 그동안 내가 작성했던 코드와 다른 분들의 코드를 비교해보는 시간을 가졌다. 프리코스 기간에는 아무래도 시간 관계상 코드 맞리뷰(?)를 통해서 일부의 코드만 보다가 프리코스가 종료된 후 5일간 약 100여 분의 코드를 살펴봤다. 아무래도 다양한 사람이 작성한 코드이다보니 처음보는 문법도 많았고 ‘아~ 맞아 저런게 있었지~‘하는 기능도 찾을 수 있었다. 그 중에서 클래스에 정말 다양한 기능이 있는 것을 확인할 수 있었고, 궁금해졌다. 예전에는 너무 방대한 양이고 내용이 어려워서 건너뛰었던 자바스크립트 Info 사이트에 정리된 내용을 공부해보는 시간을 가졌다. 내가 사용한 클래스의 용도는 무엇이었나 지금까지 나는 클래스를 어떤 용도로 사용했나? 프리코스에 있는 문제를 풀 때, 하나의 공통적인 역할을 하는 클래스를 생성하고 그 아래 관련 기능을 하는 메서드를 포함시켰다. 그리고 컨트롤러에서 관련 메서드를 클래스를 통해서 꺼내는 일이 전부였다. …","frontmatter":{"date":"November 21, 2023","title":"자바스크립트 - 클래스 되짚어보기","categories":"자바스크립트","author":"재오","emoji":"🔥"},"fields":{"slug":"/ClassJS/"}},"next":null,"prev":{"id":"6aabacec-58ca-5d36-8354-04c7cdb477cc","html":"<p>길고 길었던 우아한테크코스의 여정이 끝이 났다.</p>\n<p>비록 합격이라는 좋은 결과를 얻지는 못했지만, 돌이켜보면 개발자로서 많은 것을 얻었던 시간이었다. 그중에서 객체 지향과 관련해서는 4주간의 프리코스 내내 스스로를 괴롭혔다.</p>\n<p>1주차, 2주차, 그리고 4주차까지 미션을 진행하면서 내 코드에 대해 매번 만족했었다. <strong>“그래, 이정도면 됐다! 이 정도면 객체도 잘 분리했고, 요구사항도 잘 지켜졌고, 이보다 더 나아질 수는 없다!”</strong> 그리고 코드 리뷰를 받거나 공통 피드백을 확인하면 내가 제출했던 코드가 얼마나 잘못 작성되었는지 알 수 있었다.</p>\n<p>해당 미션에서 무언가를 잘 지켜내면, 또 다음 미션에서 잘못된 무언가가 나오고, 이게 4주간 반복되었다. 객체 지향적인 코드를 작성하는 것은 정해진 것 없이 끝이 없는 작업이라는 것을 깨달았다. 그 말은 좋은 코드에 정해진 답도 없다를 의미하는 것 같았다.</p>\n<p>하지만 완벽은 아니더라도, 더 나은 코드는 작성할 수 있지 않을까…?</p>\n<p>프리코스 1주차, 그리고 코드 리뷰 글을 읽다보면 중간중간 <code class=\"language-text\">객체지향 생활 체조 원칙</code> 이 나온다. <strong>“이 코드는 객체지향 생활 체조 원칙 ~~에 의하면 ~~이렇게 바꾸는 것이 더 낫다고 하더라고요~”</strong> 를 수도 없이 봤다.</p>\n<p>꽤 유명한 책이라 하였지만 이번 프리코스를 하면서 처음 알게 됐다. 여러 블로그의 글을 읽어보니 몇가지의 원칙으로 정리된 것을 확인할 수 있었다. 좋은 코드의 작성을 우선은 이 원칙을 기준으로 하기로 하였다. 나보다 훨씬 잘 쓰시는 분들이 많기 때문에 원칙에 대해서는 깊게 다루지는 않을 것이다. 총 4번 제출한 코드를 기준으로 무엇이 미흡했는지 한번 고민해보고자 한다.</p>\n<h2 id=\"한-메서드에-오직-한-단계의-들여-쓰기만-한다\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-%EC%98%A4%EC%A7%81-%ED%95%9C-%EB%8B%A8%EA%B3%84%EC%9D%98-%EB%93%A4%EC%97%AC-%EC%93%B0%EA%B8%B0%EB%A7%8C-%ED%95%9C%EB%8B%A4\" aria-label=\"한 메서드에 오직 한 단계의 들여 쓰기만 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 메서드에 오직 한 단계의 들여 쓰기만 한다.</h2>\n<p>한 메서드가 깊어진다는 것은 하나의 메서드가 하나의 기능을 하지 못할 확률이 높다. 또한 깊이가 깊어진다는 것은 곧 가독성의 하락을 불러온다. <strong>메서드의 길이가 길어질 것 같으면 해당 메서드를 여러 개로 분리하면 해결할 수 있다.</strong> 4주차까지 유일하게 잘 지켜온 부분이라 생각이 들었지만 4주차 크리스마스 미션 <code class=\"language-text\">PromotionController</code> 에서 그 생각은 와장창 깨져버렸다.</p>\n<h3 id=\"-입력값-예외-처리-부분에서-적용-실패\" style=\"position:relative;\"><a href=\"#-%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EB%B6%80%EB%B6%84%EC%97%90%EC%84%9C-%EC%A0%81%EC%9A%A9-%EC%8B%A4%ED%8C%A8\" aria-label=\" 입력값 예외 처리 부분에서 적용 실패 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧨 입력값 예외 처리 부분에서 적용 실패</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 크리스마스 프로모션 _ PromotionController</span>\n<span class=\"token operator\">...</span>\nasync <span class=\"token function\">#inputVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> InputView<span class=\"token punctuation\">.</span><span class=\"token function\">readDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><em>입력값을 받고 유효성 검사한 후 예외 처리 메시지를 출력한다. 추가적으로 프로그램을 종료시키지 않고 재입력을 받아야 한다.</em></p>\n<p>전자까지는 잘 지켜졌지만, 입력값을 잘못 입력했을 때 다시 입력받는 과정이 추가되면서 메서드가 너무 깊어졌다. 처음에는 while문 대신 재귀로 함수를 받았는데, 오류 값이 지속적으로 입력될 때 차지하는 메모리의 용량이 너무 커졌다. 그래서 while문을 적용하였지만…더 나은 방법이 있을까?</p>\n<h3 id=\"-해결-방안\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88\" aria-label=\" 해결 방안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 해결 방안</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  async <span class=\"token function\">#inputVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>date <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      date <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#handleInputDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  async <span class=\"token function\">#handleInputDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> InputView<span class=\"token punctuation\">.</span><span class=\"token function\">readDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 개의 메서드로 분리하게 된다면 위 문제를 해결할 수 있다. 사실 전반적인 코드의 길이는 길어지긴 했지만 가독성 측면에서 매우 깔끔해진 것을 확인할 수 있다.</p>\n<h2 id=\"모든-원시값은-문자열을-포장한다\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%A0-%EC%9B%90%EC%8B%9C%EA%B0%92%EC%9D%80-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%EC%9E%A5%ED%95%9C%EB%8B%A4\" aria-label=\"모든 원시값은 문자열을 포장한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모든 원시값은 문자열을 포장한다.</h2>\n<h3 id=\"-유지-보수-잘할-수-있겠니\" style=\"position:relative;\"><a href=\"#-%EC%9C%A0%EC%A7%80-%EB%B3%B4%EC%88%98-%EC%9E%98%ED%95%A0-%EC%88%98-%EC%9E%88%EA%B2%A0%EB%8B%88\" aria-label=\" 유지 보수 잘할 수 있겠니 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧨 유지 보수 잘할 수 있겠니…?</h3>\n<p>텍스트만으로는 이해하기 쉽지 않다. 4주차 미션이었던 <code class=\"language-text\">크리스마스 프로모션</code> 문제를 예로 설명해보자. 우선 총 금액을 아래와 같이 새로운 변수에 할당하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> totalMoney <span class=\"token operator\">=</span> <span class=\"token number\">123_000</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>해당 금액으로 증정 상품 제공 여부도 파악해야 하고, <code class=\"language-text\">10,000</code> 원이 넘는 금액인 지도 파악해야 한다. 그러면 아래와 같은 코드가 나올 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalMoney <span class=\"token operator\">>=</span> <span class=\"token number\">10_000</span><span class=\"token punctuation\">)</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> giveAwayCount <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>totalMoney <span class=\"token operator\">/</span> <span class=\"token number\">25_000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">totalMoney</code> 변수가 이곳 저곳에서 쓰이고 있다. 만약에 <code class=\"language-text\">totalAmount</code> 값을 유효성 검사하는 곳에도 사용한다면 중복된 값을 가진 변수가 코드 곳곳에 흩어지는 현상이 발생할 것이다. 만약에 코드를 수정해야 한다면 여러 곳을 찾아봐야 해서 유지보수가 힘들어진다.</p>\n<h3 id=\"-해결-방안-1\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88-1\" aria-label=\" 해결 방안 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 해결 방안</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TotalAmount</span> <span class=\"token punctuation\">{</span>\n  #menu<span class=\"token punctuation\">;</span>\n  #totalAmount<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">menus</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#totalAmount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#calculateAmount</span><span class=\"token punctuation\">(</span>menus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#calculateAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">menus</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getTotalAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#totalAmount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getGiveawayCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#totalAmount <span class=\"token operator\">/</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>champagne<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>프리코스 내내 수도 없이 강조했던 능동적인 객체의 첫걸음은 행동하는 객체이다. 도메인의 역할이 오직 값만 가져오는 것이 아니라 객체에 책임과 역할을 부여하며 캡슐화하는 것이다.</p>\n<p><code class=\"language-text\">TotalAmount</code> 라는 클래스를 생성하여 원시값을 포장하였다. 해당 객체 안에서는 유효성 검사를 할 수도 있고, 총 금액 계산, 증정 메뉴 개수 카운트 등 여러 작업을 수행할 수 있다. 그리고 계산된 값만이 반환된다.</p>\n<p>변수가 여러 곳에 흩어지지 않고 해당 <code class=\"language-text\">TotalAmount</code> 클래스 안에서만 구현하여 비즈니스 로직이 하나의 객체로 응집되었다. 이정도면 충분히 능동적인 행동을 하는 객체다운 객체를 생성한 것 같다.</p>\n<h2 id=\"한-줄에-점을-하나만-찍는다\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EC%A4%84%EC%97%90-%EC%A0%90%EC%9D%84-%ED%95%98%EB%82%98%EB%A7%8C-%EC%B0%8D%EB%8A%94%EB%8B%A4\" aria-label=\"한 줄에 점을 하나만 찍는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 줄에 점을 하나만 찍는다.</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">User<span class=\"token punctuation\">.</span><span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGiveawayCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌</span></code></pre></div>\n<p>위와 같이 객체에 접근할 때 <code class=\"language-text\">.</code> 을 두번 이상 찍으면 안된다.</p>\n<p>와… 이건 사실 좀 심화된 내용을 다루는 것 같아서 어려웠다. 흠… 의도한 것은 아니었지만 지난 4주간의 코드를 살펴보니 위 규칙을 어긴 코드는 없었다.</p>\n<p>처음에는 <code class=\"language-text\">.</code> 을 하나만 찍으라는 것이 map 함수나 reduce 함수를 여러 번 사용하는 것도 해당되나..? 생각했지만 객체의 결합도가 높아져 결합도가 강해지는 것을 막는 것이 목표라고 한다.</p>\n<p>흠… 이 부분에 대해서는 <code class=\"language-text\">DTO</code>를 알아야 하고 여러모로 공부할 점이 많아서 공부하고 나중에 한번에 정리 해야겠다. 🥲</p>\n<h2 id=\"모든-엔티티를-작게-유지한다\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%A0-%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC-%EC%9E%91%EA%B2%8C-%EC%9C%A0%EC%A7%80%ED%95%9C%EB%8B%A4\" aria-label=\"모든 엔티티를 작게 유지한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모든 엔티티를 작게 유지한다.</h2>\n<p>모든 엔티티를 작게 유지한다는 것은 50줄이 넘는 클래스와, 파일이 10개 이상인 패키지를 지양하는 원칙이다. 보통 코드의 길이가 50줄이 넘는 클래스는 한 가지의 일이 아닌 그 이상의 일을 하고있을 확률이 높으며, 무슨 일을 하고 있는지도 정확히 파악이 어려워진다.</p>\n<h3 id=\"-삐빕-50줄을-초과하였습니다\" style=\"position:relative;\"><a href=\"#-%EC%82%90%EB%B9%95-50%EC%A4%84%EC%9D%84-%EC%B4%88%EA%B3%BC%ED%95%98%EC%98%80%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\" 삐빕 50줄을 초과하였습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧨 삐빕! 50줄을 초과하였습니다</h3>\n<p>흠… 맞는 말이다. 실제로 4주차 미션에서 <code class=\"language-text\">BenefitAmount</code> 클래스는 70줄이 넘는다. 코드를 작성하면서도 너무 길다는 생각을 안한 것은 아니다. 혜택을 정리하고 계산하는 작업 자체가 코드가 길어질 수 밖에 없기 때문에 충분히 가능하다고 스스로 합리화 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BenefitAmount</span> <span class=\"token punctuation\">{</span>\n  #benefitList<span class=\"token punctuation\">;</span>\n  #totalAmount<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#calculateDDayAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#calculateWeekendAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#calculateWeekAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getBenefitList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getBenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BenefitAmount<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>기능을 제대로 구현하지도 않았는데 벌써부터 읽기 싫어진다. 2개의 클래스로 분리가 가능할 것 같아서 살펴보니 <code class=\"language-text\">BenefitAmountCalculator</code> 라는 클래스와 <code class=\"language-text\">BenefitAmountManager</code> 라는 클래스로 나누어 전자에서 계산된 값을 후자에서 상속받아 사용하면 클래스의 기능적 무게가 훨씬 가벼워질 것 같다.</p>\n<h3 id=\"-해결-방안-2\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88-2\" aria-label=\" 해결 방안 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 해결 방안</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 총금액을 계산하는 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BenefitAmountCalculator</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">#calculateGiveaway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#calculateDDayAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#calculateWeekendAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#calculateWeekAmount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">order</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BenefitAmount<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 총금액을 관리하는 클래스</span>\n\n<span class=\"token keyword\">import</span> BenefitCalculator <span class=\"token keyword\">from</span> <span class=\"token string\">\"./BenefitCalculator.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BenefitAmountManager</span> <span class=\"token punctuation\">{</span>\n  #benefitList<span class=\"token punctuation\">;</span>\n  #totalAmount<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getBenefitList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getBenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"2개를-초과하는-인스턴스-변수를-가진-클래스를-쓰지-않는다\" style=\"position:relative;\"><a href=\"#2%EA%B0%9C%EB%A5%BC-%EC%B4%88%EA%B3%BC%ED%95%98%EB%8A%94-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B0%80%EC%A7%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"2개를 초과하는 인스턴스 변수를 가진 클래스를 쓰지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2개를 초과하는 인스턴스 변수를 가진 클래스를 쓰지 않는다.</h2>\n<p>인스턴스 변수가 많아질수록 클래스의 응집도는 낮아진다는 것을 의미한다. 클래스는 <code class=\"language-text\">하나의 상태를 유지하고 관리하는 것</code> 과 <code class=\"language-text\">두개의 독립된 변수를 조율</code> 하는 두가지 종류로 나뉜다고 한다. 이것은 최대한 클래스를 많이 분리하게 함으로써 응집도를 높이는 역할을 한다.</p>\n<h3 id=\"-이게-맞나-이렇게-하는게-맞아\" style=\"position:relative;\"><a href=\"#-%EC%9D%B4%EA%B2%8C-%EB%A7%9E%EB%82%98-%EC%9D%B4%EB%A0%87%EA%B2%8C-%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A7%9E%EC%95%84\" aria-label=\" 이게 맞나 이렇게 하는게 맞아 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧨 이게 맞나…? 이렇게 하는게 맞아…?</h3>\n<p>사실 이 부분도 진짜 감이 안잡힌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BenefitAmount</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">#createBenefitObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> order<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> totalAmount <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    order<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">benefitList</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    totalAmount<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기존에는 인자 3개였지만, 이 원칙을 보고 최대 2개로 수정하고자 여러번 코드를 뜯어보았다. 하지만 매번 실패하였고 오랜 고민 끝에 <code class=\"language-text\">props</code> 로 인자를 묶어서 객체로 표현하였다. 생활체조 원칙도 지켜지고, 가독성 측면에서는 개선이 되었으나 아직까지 딱히 마음에 들지 않는다.</p>\n<p>인자를 2개만 받도록 계속 수정중이다…</p>\n<p><em>혹시 팁이 있으시다면… 댓글 남겨주시면 감사하겠습니다.</em></p>\n<h2 id=\"getter-setter-property를-사용하지-않는다\" style=\"position:relative;\"><a href=\"#getter-setter-property%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"getter setter property를 사용하지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getter, Setter, Property를 사용하지 않는다.</h2>\n<p>나왔다… 정말 고민이 많았던 <code class=\"language-text\">Getter</code> <code class=\"language-text\">Setter</code> 를 사용하지 않는 법. 물론 코드 작성에 정해진 법은 없었지만 3주차 공통 피드백에 이 말이 쓰여진 것을 봤을 때 내 코드가 한참 잘못되기는 했구나를 깨달았고 고민했던 것 같다.</p>\n<p>우선 <strong>왜 Getter를 쓰면 안될까?</strong></p>\n<p>위에서 <strong>객체는 책임을 지게 해라!</strong> 라는 말을 기억하는가? 해당 객체에게 책임이 있으면 그 책임을 다른 객체에게 미루지 않고 본인이 시켜야 하는 것이다! 물론 그 말이 <strong>모든 코드에서 Getter를 쓰지 말아야 한다는 아닌 것으로 나는 이해했다.</strong> 지양하면 좋고, 없으면 더 좋다. 아예 안쓰는 방법도 분명 존재하겠지만 현재 나는 최대한 지양하는 방향 위에 서있다.(앞으로 학습하면서 안쓰는 날이 오지 않을까..? ㅎㅎ)</p>\n<p>아래 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// BenefitAmount</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BenefitAmount</span> <span class=\"token punctuation\">{</span>\n  #benefitList<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">getBenefitList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#totalAmount <span class=\"token operator\">&lt;</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>benefitStandard<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getBenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// PromotionController</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PromotionController</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> benefitAmount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> benefitAmount<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cost</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>과연 위 코드가 객체 지향적인 코드일까? <code class=\"language-text\">benefitAmount</code> 에서 맡을 수 있는 책임을 <code class=\"language-text\">PromotionController</code> 에 전가하여 해당 컨트롤러에서 계산이 이루어지고 값을 반환한다. 위 코드는 객체의 책임, 자율성을 무시한 코드이다.</p>\n<h3 id=\"-해결-방안-3\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88-3\" aria-label=\" 해결 방안 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 해결 방안</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// BenefitAmount</span>\n<span class=\"token function\">getBenefitList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#totalAmount <span class=\"token operator\">&lt;</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>benefitStandard<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getBenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBenefitList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cost</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// PromotionController</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBenefitAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<blockquote>\n<p><a href=\"https://hudi.blog/thoughtworks-anthology-object-calisthenics/\">이유와 솔루션으로 정리하는 객체지향 생활체조 원칙</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://developerfarm.wordpress.com/2012/01/26/object_calisthenics_1/\">더 나은 소프트웨어를 향한 9단계: 객체지향 생활 체조(1)</a></p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%9C-%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-%EC%98%A4%EC%A7%81-%ED%95%9C-%EB%8B%A8%EA%B3%84%EC%9D%98-%EB%93%A4%EC%97%AC-%EC%93%B0%EA%B8%B0%EB%A7%8C-%ED%95%9C%EB%8B%A4\">한 메서드에 오직 한 단계의 들여 쓰기만 한다.</a></p>\n<ul>\n<li><a href=\"#-%EC%9E%85%EB%A0%A5%EA%B0%92-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-%EB%B6%80%EB%B6%84%EC%97%90%EC%84%9C-%EC%A0%81%EC%9A%A9-%EC%8B%A4%ED%8C%A8\">🧨 입력값 예외 처리 부분에서 적용 실패</a></li>\n<li><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88\">💎 해결 방안</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AA%A8%EB%93%A0-%EC%9B%90%EC%8B%9C%EA%B0%92%EC%9D%80-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%EC%9E%A5%ED%95%9C%EB%8B%A4\">모든 원시값은 문자열을 포장한다.</a></p>\n<ul>\n<li><a href=\"#-%EC%9C%A0%EC%A7%80-%EB%B3%B4%EC%88%98-%EC%9E%98%ED%95%A0-%EC%88%98-%EC%9E%88%EA%B2%A0%EB%8B%88\">🧨 유지 보수 잘할 수 있겠니…?</a></li>\n<li><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88-1\">💎 해결 방안</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%9C-%EC%A4%84%EC%97%90-%EC%A0%90%EC%9D%84-%ED%95%98%EB%82%98%EB%A7%8C-%EC%B0%8D%EB%8A%94%EB%8B%A4\">한 줄에 점을 하나만 찍는다.</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AA%A8%EB%93%A0-%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC-%EC%9E%91%EA%B2%8C-%EC%9C%A0%EC%A7%80%ED%95%9C%EB%8B%A4\">모든 엔티티를 작게 유지한다.</a></p>\n<ul>\n<li><a href=\"#-%EC%82%90%EB%B9%95-50%EC%A4%84%EC%9D%84-%EC%B4%88%EA%B3%BC%ED%95%98%EC%98%80%EC%8A%B5%EB%8B%88%EB%8B%A4\">🧨 삐빕! 50줄을 초과하였습니다</a></li>\n<li><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88-2\">💎 해결 방안</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2%EA%B0%9C%EB%A5%BC-%EC%B4%88%EA%B3%BC%ED%95%98%EB%8A%94-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B0%80%EC%A7%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%93%B0%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\">2개를 초과하는 인스턴스 변수를 가진 클래스를 쓰지 않는다.</a></p>\n<ul>\n<li><a href=\"#-%EC%9D%B4%EA%B2%8C-%EB%A7%9E%EB%82%98-%EC%9D%B4%EB%A0%87%EA%B2%8C-%ED%95%98%EB%8A%94%EA%B2%8C-%EB%A7%9E%EC%95%84\">🧨 이게 맞나…? 이렇게 하는게 맞아…?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#getter-setter-property%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\">Getter, Setter, Property를 사용하지 않는다.</a></p>\n<ul>\n<li><a href=\"#-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EC%95%88-3\">💎 해결 방안</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 13, 2023","title":"나의 코드는 얼마나 객체 지향적이었는가?","categories":"회고","author":"재오","emoji":"📑"},"fields":{"slug":"/AfterPrecourse/"}},"site":{"siteMetadata":{"siteUrl":"https://www.jaeochoiii.com","comments":{"utterances":{"repo":"jaeochoii/jaeochoii.github.io"}}}}},"pageContext":{"slug":"/ClassJS/","nextSlug":"","prevSlug":"/AfterPrecourse/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}