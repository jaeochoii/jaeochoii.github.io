{"componentChunkName":"component---src-templates-blog-template-js","path":"/Woowa1/","result":{"data":{"cur":{"id":"ae20a1f5-13c0-5380-a5e9-1ebd3603ccf9","html":"<p><em>이 글은 우아한테크코스 6기 프리코스 1주차 미션 종료 직후 작성된 회고 글입니다.</em></p>\n<p><em>스스로 고민한 내용이 글에 많이 포함되어 있기 때문에 <strong>본인 코드에 대해 충분히 고민한 후</strong> 읽으시는 것을 추천합니다.</em></p>\n<p><em>아직 부족한 부분이 많기 때문에 잘못된 내용이 포함되어 있다면 피드백 부탁드립니다.</em> 🥲</p>\n<hr>\n<h2 id=\"-주제\" style=\"position:relative;\"><a href=\"#-%EC%A3%BC%EC%A0%9C\" aria-label=\" 주제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 주제</h2>\n<p>작년 프리코스 1주차에는 <code class=\"language-text\">온보딩</code> 이라고 해서 코딩테스트(?) 느낌의 7문제들이 나왔었다. 이번에도 그런 유형의 문제가 나올 줄 알았는데 올해는 <strong><code class=\"language-text\">숫자 야구 게임</code></strong> 이 1주차 미션으로 나왔다. 숫자 야구 게임은 4기, 5기에도 나왔던 문제였기 때문에 올해 또 나올 것이라고 생각은 전혀 못했다.</p>\n<p>숫자 야구 게임이 1주차에 나온 것을 보고 2주, 3주, 4주차 문제의 난이도가 상당히 높아질 것 같다는 생각도 들었다. 어려운 문제가 많으면 배워가는 양도 상당히 많아질 것 같아서 기대가 되기도 하고 설레기도 하였다.</p>\n<p>사실 작년 5기 숫자야구 게임 문제도 풀어봤지만, 작년 숫자야구 게임은 2주차에 등장했고, <strong><code class=\"language-text\">MVC 패턴</code></strong> 을 학습하기 이전이었다. 따라서 이번 1주차 미션에는 여름 방학에 학습한 <strong><code class=\"language-text\">MVC 패턴</code></strong> 을 적용해서 문제를 해결하고자 하였다. <code class=\"language-text\">MVC 패턴</code>에 관해서는 정리한 글을 아래 첨부하겠다.</p>\n<p>👉 <a href=\"https://velog.io/@jaeochoiii/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-MVC-pattern\">MVC 패턴 관련 정리 글 보러가기</a></p>\n<p>👉 <a href=\"https://velog.io/@jaeochoiii/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4-2022-%EC%B5%9C%EC%A2%85-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8\">MVC 패턴 적용한 ‘메뉴 추천’ 정리 글 보러가기</a></p>\n<h2 id=\"-문제-요구-사항\" style=\"position:relative;\"><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\" aria-label=\" 문제 요구 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 문제 요구 사항</h2>\n<p>문제에서 요구하는 사항을 꼼꼼하게 읽었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">npm install\n$node <span class=\"token operator\">-</span>v</code></pre></div>\n<p><code class=\"language-text\">npm install</code> 을 해주고 <code class=\"language-text\">node-v</code>로 노드 버전도 확인했다. 최종적으로 제출했을 때 버전이 다르면 테스트케이스가 작동이 안된다고도 써있었기 때문에 꼼꼼히 확인했다.</p>\n<p>쭉 읽다가 정말 흥미로운 사실을 하나 알게 되었다.\n<img src=\"/2915212406dc093b5e89aa239e3c6cdb/1.png\" alt=\"\"></p>\n<ul>\n<li>\n<p><strong>API를 사용하라고 알려주는데 구체적인 사용법은 <code class=\"language-text\">Random</code> 밖에 알려주지 않았다.</strong>\n스스로 module을 찾아보면서 어떻게 사용하는지 터득해보라는 의미였던 것 같다. 저것만 봤는데도 너무 짜릿했다. 남들이 떠먹여주는 것이 아닌 내가 생각해보고 코드를 작성해보면서 실행해보며 배운다는 점이 인상깊었다.</p>\n</li>\n<li>\n<p><strong>readLineAsync???</strong>\n<code class=\"language-text\">readLineAsync</code>이었다. 입력값을 받을 때 <code class=\"language-text\">비동기</code> 를 사용해보라는 의미같았다. 벌써 내가 모르는 개념이 나와서 배울 것이 하나 생겼다는 점에서 살짝 긴장이 되면서 설렜던 것 같다.</p>\n</li>\n</ul>\n<h2 id=\"-기능-목록-작성\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\" aria-label=\" 기능 목록 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 기능 목록 작성</h2>\n<p>어렸을 때 많이 했던 게임이라 원리를 이해하는 것에서 오랜 시간이 걸리지 않았다. 노트에 실제로 게임을 해보면서 어떤 기능들이 필요할 지 생각해봤다. 구체적인 내용보다는 기능을 구현하면서 하나하나 지워나가기 위해 짧게 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> 기능 목록</span>\n\n<span class=\"token list punctuation\">-</span> 3자리 랜덤 숫자 생성하는 기능 [✅]\n<span class=\"token list punctuation\">-</span> 사용자에게 숫자를 입력받는 기능 [✅]\n<span class=\"token list punctuation\">-</span> 입력값의 유효성을 검사하는 기능 [✅]\n<span class=\"token list punctuation\">-</span> 입력받은 숫자를 '스트라이크 / 볼'로 계산하는 기능 [✅]\n<span class=\"token list punctuation\">-</span> 계산을 바탕으로 힌트를 출력하는 기능 [✅]\n<span class=\"token list punctuation\">-</span> 재시작을 물어보는 기능 [✅]</code></pre></div>\n<p>그리고 Model, View, Controll로 나눠서 로직을 짜보면서 흐름을 어떻게 이어가야 할 지에 대해 좀 많은 고민을 했던 것 같다. 화이트보드에 작성한 대략적인 함수와 모듈로 구성된 로직을 작성하였다.\n<img src=\"/3ed4a944b27eae40b8bb8ca03b6d5261/2.jpeg\" alt=\"\"></p>\n<h2 id=\"-고난-그리고-배움\" style=\"position:relative;\"><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\" aria-label=\" 고난 그리고 배움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 고난 그리고 배움</h2>\n<p>이미 한번 풀었던 문제이기 때문에 힘든 고난은 없을 줄 알았다. 그러나 생각보다 큰 고난을 여러번 마주하게 되었다.</p>\n<h3 id=\"-err_module_not_found-에러\" style=\"position:relative;\"><a href=\"#-err_module_not_found-%EC%97%90%EB%9F%AC\" aria-label=\" err_module_not_found 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ [ERR_MODULE_NOT_FOUND] 에러</h3>\n<p>로직대로 파일을 나누고 기능을 구현하였다. 다른 파일에서 모듈을 받아서 사용하려고 했을 때, 다음과 같은 오류가 발생하였다.\n<img src=\"/4e06787f02d6b9176ea1d40ae476d058/3.png\" alt=\"\"></p>\n<p>평소와 같이 <code class=\"language-text\">module.exports</code> 와 <code class=\"language-text\">require</code> 를 사용했는데 이 방법에서 문제가 발생하다는 블로그 글을 하나 확인했다. 실제로 <code class=\"language-text\">package.json</code> 을 확인해보니 아래와 같이 코드가 작성되어 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token string-property property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"우아한테크코스 프리코스 숫자 야구 게임 미션\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span></code></pre></div>\n<p>요구사항에서 **‘절대 package.json을 수정할 수 없습니다.’**라고 쓰여져 있었기 때문에 type을 ES5에서 쓰이는 commonJS가 아닌 ES6에서 사용되는 <code class=\"language-text\">module</code> 형태로 작성해야 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Name <span class=\"token keyword\">from</span> <span class=\"token string\">'Path'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>낯설었지만 익숙해지려 노력하였다. <code class=\"language-text\">객체</code>를 import하거나 <code class=\"language-text\">함수</code>를 import할 때 사용법이 살짝 다르길래 아래와 같이 따로 정리해서 적어두었다.</p>\n<ul>\n<li>객체를 내보내기 위해서는 <code class=\"language-text\">exports default {$객체명}</code>을 사용해야 한다.</li>\n<li>모듈당 하나의 객체를 내보내고 싶을 때 사용하는 키워드로, 하나의 객체만 내보낼 수 있기 때문에 한 모듈 안에는 하나의 <code class=\"language-text\">default export</code>가 존재한다.</li>\n<li>모듈당 여러개의 객체가 존재한다면 <code class=\"language-text\">default</code> 를 사용하지 않고 { }안에 객체 이름을 넣어준 채로 export 한다.</li>\n<li><code class=\"language-text\">import</code>할 때에는 아무 이름으로 원하는 객체에 접근할 수 있다. 정상적으로 작동한다.</li>\n</ul>\n<p>하지만 오류는 없어지지 않았다…? 대체 왜…? 하라는 대로 했는데? 정말 위 오류를 해결하기 위해 4시간정도 투자를 했던 것 같다. 그러다 어떤 블로그 글을 보게 되었는데 다음과 같이 쓰여 있었다.\n<a href=\"https://ojhallae.tistory.com/m/177\">O JHL님의 NodeJS 블로그 참고</a></p>\n<blockquote>\n<p>nodejs는 package.json의 type을 module로 설정한 경우\n위 코드는 ‘import A from “./src/A.mjs” ‘로 인식한다.</p>\n</blockquote>\n<p><del>파일명을 <code class=\"language-text\">.mjs</code> 로 바꿔주니 모든 것이 해결되었다.</del></p>\n<p>위와 같은 방법으로 일시적인 오류는 해결하였으나, <code class=\"language-text\">.mjs</code> 파일로 바꾼 것이 그냥 괜히 찜찜했다. 충분히 <code class=\"language-text\">.js</code> 만으로 해결할 수 있을 것 같아서 확장자명까지 명시해봤다. 기존에는 <code class=\"language-text\">import</code> 와 <code class=\"language-text\">파일명</code> 까지만 입력하면 경로가 자동완성 되었지만 직접 확장자명까지 입력해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GuideMessage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constant/Constant'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Before</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GuideMessage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constant/Constant.js'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// After</span></code></pre></div>\n<p>그랬더니 오류가 완전히 해결되었다.</p>\n<h3 id=\"-프로그램-종료-어떻게\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%A2%85%EB%A3%8C-%EC%96%B4%EB%96%BB%EA%B2%8C\" aria-label=\" 프로그램 종료 어떻게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 프로그램 종료…? 어떻게…?</h3>\n<p><img src=\"/a91101cbd896cc15adee73aa72fe500d/4.png\" alt=\"\">\n<code class=\"language-text\">프로그래밍 요구사항</code> 을 읽어보면 프로그램을 종료할 때 <code class=\"language-text\">process.exit()</code> 을 호출하지 말라고 명시되어 있다. 이유가 조금 궁금했다. 사실 저런 기능이 있는 것도 처음 알았다. 구글에 검색해보니 <code class=\"language-text\">process.exit()</code> 는 매우 강력한 종료 도구여서 쓰지 않는 것이 좋다고 한다.</p>\n<p>작년과 같이 API가 주어진 것이 아니어서 내가 기능을 추가적으로 만들어야 하나 싶은 고민까지 했었지만 생각보다 답은 간단했다. <code class=\"language-text\">return</code> 만 써주니 프로세스가 강제 종료되었다.</p>\n<h3 id=\"-jest-실행-오류\" style=\"position:relative;\"><a href=\"#-jest-%EC%8B%A4%ED%96%89-%EC%98%A4%EB%A5%98\" aria-label=\" jest 실행 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ jest 실행 오류</h3>\n<p>정말…이것땜에 애를 먹었다.\n결과적으로 이 오류는 14시간만에 해결이 되었다.</p>\n<p><img src=\"/a863da169a01ac1618cd835bdd99dc55/5.png\" alt=\"\">\n<code class=\"language-text\">npm test</code> 를 통해 주어진 테스트 케이스를 실행시킬 수 있다. 기능 구현이 다 끝났을 때 테스트를 실행시켰는데 이상한 오류가 떴다.\n<img src=\"/5c3e8b16f004300d1e354cde04e77cfd/6.png\" alt=\"\"></p>\n<p>보통 <code class=\"language-text\">PASS</code> 혹은 <code class=\"language-text\">FAIL</code> 둘 중 하나만 나오는게 정상인데 <code class=\"language-text\">RUNS</code> 만 뜨고 실행이 되지 않았다. 분명 <code class=\"language-text\">console.log</code> 로 플레이하는 것에서는 문제가 발견될만한 지점도 나오지 않았다. 근데 계속 에러 내용에 ERROR 처리 했던 부분이 뜨길래 에러를 관리하는 파일만 계속 건들게 되었다.\n<img src=\"/24c49958a26a5ba3d73bfcc605b9bcea/7.png\" alt=\"\"></p>\n<p><code class=\"language-text\">InputView</code> 파일에 있던 callback 함수에 문제가 생긴 줄 알고 함수를 계속 분해하니 아예 위와 같이 이제는 실행도 되지 않았다. 구글링 및 JEST 공식 문서까지 들어가봐도 이런 오류를 겪은 사람도 없었고 나오지도 않았다.</p>\n<p><img src=\"/107df59f43e3276f4aac57f923b73d30/8.png\" alt=\"\"></p>\n<p>총 테스트케이스가 2개였고 1번째 테스트 케이스는 잘 작동하는 것 같아서 이번엔 <code class=\"language-text\">ApplicationTest.js</code> 파일을 분해해봤다. 두번째 테스트 케이스를 지워보고 첫번째 테스트 케이스를 실행했더니 위와 같았다.</p>\n<p>기능 구현 코드를 다 했고, console.log도 해봤는데 여기서 막히니까 밥도 먹지 못하고, 잠도 잘 수 없었다. 어떻게든 이 문제를 해결하고자 하는 의지가 강했다. 구글에 검색해도 나오지 않는 오류였기에 내 코드에 문제가 분명한 것 같았다. 이 문제에 대해 14시간동안 고민을 하던 중 문득 <code class=\"language-text\">ApplicationTest.js</code> 파일을 한번 분석하고자 하였고, 해당 코드에서 <code class=\"language-text\">Promise</code> 라는 키워드를 보게 되었다. 검색을 해보니 <code class=\"language-text\">비동기</code> 와 관련이 있는 키워드였고 <code class=\"language-text\">async</code> , <code class=\"language-text\">await</code> 이 함께 정리가 되어있었다.</p>\n<p>이건 무조건 <code class=\"language-text\">비동기</code> 에 대해 완벽히 알아야만 해결할 수 있는 문제라고 생각이 들었고, 그때부터 공식 문서와 여러 블로그 글을 읽어보면서 최대한 이해하기 쉽게 정리했다. 사실 너무 배우고 싶었던 개념이고, 중요하다고 생각이 들어서 작성한 코드에 바로바로 적용해가면서 변화를 살펴보고자 했다. 실제로 방대한 내용을 포함하고 있었지만 큰 욕심을 부리지 않고 현재 이 문제를 해결하기 위해 필요한 내용에 집중했고, 해당 오류를 해결할 수 있었다.\n<img src=\"/717d7c786fe8bf7c3dbd8749e0bdb962/9.jpeg\" alt=\"\"></p>\n<p>그 때의 짜릿함은 살면서 많이 겪어보지 못한 경험이었다. 오랜 시간의 고민과 시행착오를 겪으며 학습한 내용이었고, 결국 스스로의 힘으로 해결했다는 성취감 때문인 것 같다.</p>\n<h2 id=\"-새로-배운-내용\" style=\"position:relative;\"><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 새로 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 새로 배운 내용</h2>\n<h3 id=\"-비동기-promise-async-await\" style=\"position:relative;\"><a href=\"#-%EB%B9%84%EB%8F%99%EA%B8%B0-promise-async-await\" aria-label=\" 비동기 promise async await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 비동기 (Promise, async, await)</h3>\n<p>예전에 <code class=\"language-text\">모던 자바스크립트</code> 를 공부하다가 목차에서 <code class=\"language-text\">Promise</code> 와 <code class=\"language-text\">async</code> 에 대해 본 기억이 있다. 심지어 벨로그 트렌드 글에서도 비동기에 대해 많은 글이 있었다. 하지만 내가 작성하는 코드에서 <code class=\"language-text\">비동기</code> 에 대해 쓸 일이 크게 없었다.</p>\n<p>이번 프리코스 1주차 코드 <code class=\"language-text\">App.js</code> 에 <code class=\"language-text\">async play()</code> 라는 함수를 보고 “왔구나…” 싶었다. 처음 배우는 내용이기 때문에 잘 해낼 수 있을까 하는 걱정도 있었지만 새로운 것을 알게 된다는 설렘이 더 컸다. 막대한 양의 내용이었지만 우선 에러를 해결하기 위한 학습을 하였고, 이후에는 리팩토링을 하면서 학습한 것을 적용하였다. 이 곳에 많은 시간을 쏟았다.</p>\n<p>이 블로그에 그 내용 모두 적을 수 없어서 자세한 내용은 직접 정리한 블로그 글을 참고하면 된다.</p>\n<p>👉 <a href=\"https://velog.io/@jaeochoiii/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-6%EA%B8%B0-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%99%95%EC%8B%A4%ED%95%98%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">[우아한테크코스 프리코스 6기] 비동기 확실하게 이해하기</a></p>\n<h3 id=\"-더-나은-commit-방법\" style=\"position:relative;\"><a href=\"#-%EB%8D%94-%EB%82%98%EC%9D%80-commit-%EB%B0%A9%EB%B2%95\" aria-label=\" 더 나은 commit 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 더 나은 commit 방법</h3>\n<p>사실 기존에 수정한 코드에 대해서 전부 <code class=\"language-text\">git add .</code> 명령어를 입력하는 습관이 있었다. 왜 쉬운 방법이 있는데 굳이 파일을 하나하나 다 입력해야 해? 라는 생각이 있었다.</p>\n<p><img src=\"/483dee7c6a96d096e56f5fe7b40aa1fd/10.png\" alt=\"\"></p>\n<p>하지만 이번에 commit을 기능별로 구현하라는 안내 문구를 보았다. 실제로 브랜치에 많이 들어가지 않아서 몰랐지만 실제로 들어가보니 내가 해당 기능만 commit에 올리고 싶었는데 메시지와는 다르게 다른 파일들도 수정되어 한꺼번에 commit되어 있는 것을 보니 가독성이 매우 떨어졌다.\n<img src=\"/f61bec2e14eb2780c3fe75006c4d77fa/11.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">git add src<span class=\"token operator\">/</span>constant<span class=\"token operator\">/</span>Constant<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>→ 이렇게 하면 내가 원하는 파일만 커밋 완료! git status를 확인하면 내가 아직 add 하지 않은 파일을 빨간색으로 표시되어있는 것을 볼 수 있다.</p>\n<h2 id=\"-리팩토링\" style=\"position:relative;\"><a href=\"#-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-label=\" 리팩토링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 리팩토링</h2>\n<p>한번 풀어봤던 문제였기 때문에 기능 구현은 생각보다 오래 걸리지 않았다. 다음으로 중요한 것은 <code class=\"language-text\">리팩토링</code> 과정이었다.</p>\n<h3 id=\"️-통일성-있게-코드-작성하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%86%B5%EC%9D%BC%EC%84%B1-%EC%9E%88%EA%B2%8C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"️ 통일성 있게 코드 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 통일성 있게 코드 작성하기!</h3>\n<p>우선 변수명에 상당히 많은 시간을 쏟았다. 처음 이 코드를 보는 사람도 내가 구현한 기능이 어떤 기능을 할 지 직관적으로 파악이 가능할 정도로 시간을 많이 쏟았다. 이후에는 한 모듈 안에서 메서드들이 얼마나 통일성 있게 짜여져 있는 지에 대해 고민을 하고 수정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseballGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getStrikeCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getBallCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">resetGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 처음에 Model을 구현한 부분 중 일부이다. <code class=\"language-text\">resetGame()</code> 메서드를 제외하고는 모두 <code class=\"language-text\">get</code> 접두어로 시작하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseballGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getStrikeCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getBallCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getResetNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 <code class=\"language-text\">resetGame()</code> 메서드의 이름을 <code class=\"language-text\">getResetNumber()</code>로 바꾸고 새로운 넘버를 가져오는 기능만 하게끔 하고 실제 게임을 리셋하는 것은 컨트롤러의 몫으로 넘겨주었다.</p>\n<h3 id=\"️-하나의-함수는-하나의-기능만\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%95%98%EB%82%98%EC%9D%98-%ED%95%A8%EC%88%98%EB%8A%94-%ED%95%98%EB%82%98%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%A7%8C\" aria-label=\"️ 하나의 함수는 하나의 기능만 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 하나의 함수는 하나의 기능만!</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 변경 전</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">inputUserNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> InputView<span class=\"token punctuation\">.</span><span class=\"token function\">readUserNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      InputValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateUserNumber</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> inputNumber <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> strikeCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#baseball<span class=\"token punctuation\">.</span><span class=\"token function\">getStrikeCount</span><span class=\"token punctuation\">(</span>inputNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> ballCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#baseball<span class=\"token punctuation\">.</span><span class=\"token function\">getBallCount</span><span class=\"token punctuation\">(</span>inputNumber<span class=\"token punctuation\">,</span> strikeCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkHint</span><span class=\"token punctuation\">(</span>strikeCount<span class=\"token punctuation\">,</span> ballCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 변경 후</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">inputUserNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> InputView<span class=\"token punctuation\">.</span><span class=\"token function\">readUserNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      InputValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateUserNumber</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculateCount</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">calculateCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> inputNumber <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> strikeCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#baseball<span class=\"token punctuation\">.</span><span class=\"token function\">getStrikeCount</span><span class=\"token punctuation\">(</span>inputNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> ballCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#baseball<span class=\"token punctuation\">.</span><span class=\"token function\">getBallCount</span><span class=\"token punctuation\">(</span>inputNumber<span class=\"token punctuation\">,</span> strikeCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkHint</span><span class=\"token punctuation\">(</span>strikeCount<span class=\"token punctuation\">,</span> ballCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>하나의 함수 안에서 두 개 이상의 기능을 하지 못하도록 최대한 처음에 만든 함수를 잘게 잘게 쪼갰다.</p>\n<h3 id=\"️-메모리-사용량을-줄이고-효율적인-코드를-만들어보자\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%82%AC%EC%9A%A9%EB%9F%89%EC%9D%84-%EC%A4%84%EC%9D%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\" aria-label=\"️ 메모리 사용량을 줄이고 효율적인 코드를 만들어보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 메모리 사용량을 줄이고 효율적인 코드를 만들어보자!</h3>\n<p>위의 코드에서도 확인할 수 있지만 <code class=\"language-text\">input.split(\"\").map(Number)</code> 은 효율이 많이 떨어진다는 글을 읽고 <code class=\"language-text\">Array.from()</code>으로 바꾸는 등 내장 함수를 최대한 많이 활용해보고자 하였다.</p>\n<p>사실 반복적인 행동을 해야할 때 아직까지도 <code class=\"language-text\">for()</code> 반복문을 가장 먼저 작성한다. <code class=\"language-text\">forEach()</code> 함수와 <code class=\"language-text\">map()</code>도 많이 작성해봤지만 <code class=\"language-text\">reduce()</code>를 한번도 제대로 사용해본 적이 없었다. 이번 기회에 스트라이크와 볼의 카운트를 누적해서 계산하는 부분에 <code class=\"language-text\">reduce()</code>를 적용해 보았다.</p>\n<p>👉 <a href=\"https://velog.io/@jaeochoiii/JS-study-reduce\">reduce 함수 관련 글 보러가기</a>\n<img src=\"/e22327191286080530a45a37639fbeb7/12.png\" alt=\"\"></p>\n<p><img src=\"/43b136761ec5f6424d3bef997034d301/13.png\" alt=\"\"></p>\n<p>게임 종료 후 재시작을 하는 테스크 케이스의 시간이 빨라진 것을 확인할 수 있었다.</p>\n<h2 id=\"-개선해야할-점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\" aria-label=\" 개선해야할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 개선해야할 점</h2>\n<p>이번 미션을 진행하면서 아쉬웠던 점은 에러를 해결하기 위해 수정되었던 코드들이 제 타이밍에 <code class=\"language-text\">commit</code> 되지 못했다는 점이다. 한번 <code class=\"language-text\">commit</code>이 꼬이니까 깃 컨벤션도 어떤 순서로, 어떤 타이밍에 해야할 지 파악을 제대로 하지 못했다. 다음 미션부터는 <code class=\"language-text\">git add .</code> 사용을 지양하고 하나의 기능 구현, 혹은 수정이 끝날 때마다 수정한 부분만 <code class=\"language-text\">git add 경로</code> 를 작성하여 코드 리뷰를 할 때에도 가독성이 좋게 해보고 싶다.</p>\n<p>또한 여러 블로그 글을 보면서 <code class=\"language-text\">TDD</code> 라는 테스트 주도 개발법을 알게 되었는데 <code class=\"language-text\">JEST</code> 테스트 케이스 파일을 만들 때 한번 접목해서 우테코에서 주어진 케이스 뿐만 아니라 직접 만들어보고 싶은 욕심이 생겼다.</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 마무리</h2>\n<p>이번 주차 한줄평을 다음과 같이 할 수 있을 것 같다.</p>\n<p><strong>써먹을 수 있는 공부를 했다.</strong></p>\n<p>필요한 기능을 구현하기 위해 하는 공부가 중요하다는 것은 프로젝트를 해보면서 느꼈지만 이렇게 짧은 시간 안에 크게 성장할 것이라는 생각은 해본 적이 없다.일주일도 안되는 시간이었지만 1주차만에 많은 발전을 했다고 생각한다. 정말 우테코에서 강조한 <code class=\"language-text\">몰입</code>이 이런 것이 아닐까. 밥먹는 시간과 잠자는 시간을 아껴가며 고민하고 분석하며 결국에는 혼자의 힘으로 해결한다는 것이 얼마나 큰 성취감으로 돌아오는 지를 느낄 수 있었다.</p>\n<p>앞으로 3번의 미션이 남아있다. 난이도가 점점 어려워질 것 같아서 걱정이 되지만 그 과정에서 얼마나 성장할 지를 생각하면 정말 설렌다.</p>\n<p>이번 2주차 미션도 많은 깨달음을 얻을 수 있는 한 주가 되기를 바란다.</p>\n<h2 id=\"-내가-작성한-코드\" style=\"position:relative;\"><a href=\"#-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\" 내가 작성한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧑🏻‍💻 내가 작성한 코드</h2>\n<p><img src=\"/e282c0c6863d09f152c9a37229716e7a/14.png\" alt=\"\"></p>\n<p>👉 <a href=\"https://github.com/woowacourse-precourse/javascript-baseball-6/pull/2\">우아한테크코스 1주차 미션_숫자 야구 게임</a></p>\n<p>코드 리뷰는 언제든 환영입니다! 🙂</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%A3%BC%EC%A0%9C\">🎯 주제</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\">🎯 문제 요구 사항</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\">🎯 기능 목록 작성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\">🎯 고난 그리고 배움</a></p>\n<ul>\n<li><a href=\"#-err_module_not_found-%EC%97%90%EB%9F%AC\">❌ [ERR_MODULE_NOT_FOUND] 에러</a></li>\n<li><a href=\"#-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%A2%85%EB%A3%8C-%EC%96%B4%EB%96%BB%EA%B2%8C\">❌ 프로그램 종료…? 어떻게…?</a></li>\n<li><a href=\"#-jest-%EC%8B%A4%ED%96%89-%EC%98%A4%EB%A5%98\">❌ jest 실행 오류</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\">🎯 새로 배운 내용</a></p>\n<ul>\n<li><a href=\"#-%EB%B9%84%EB%8F%99%EA%B8%B0-promise-async-await\">🔖 비동기 (Promise, async, await)</a></li>\n<li><a href=\"#-%EB%8D%94-%EB%82%98%EC%9D%80-commit-%EB%B0%A9%EB%B2%95\">🔖 더 나은 commit 방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\">🎯 리팩토링</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-%ED%86%B5%EC%9D%BC%EC%84%B1-%EC%9E%88%EA%B2%8C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">✏️ 통일성 있게 코드 작성하기!</a></li>\n<li><a href=\"#%EF%B8%8F-%ED%95%98%EB%82%98%EC%9D%98-%ED%95%A8%EC%88%98%EB%8A%94-%ED%95%98%EB%82%98%EC%9D%98-%EA%B8%B0%EB%8A%A5%EB%A7%8C\">✏️ 하나의 함수는 하나의 기능만!</a></li>\n<li><a href=\"#%EF%B8%8F-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%82%AC%EC%9A%A9%EB%9F%89%EC%9D%84-%EC%A4%84%EC%9D%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\">✏️ 메모리 사용량을 줄이고 효율적인 코드를 만들어보자!</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\">🎯 개선해야할 점</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🎯 마무리</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C\">🧑🏻‍💻 내가 작성한 코드</a></p>\n</li>\n</ul>\n</div>","excerpt":"이 글은 우아한테크코스 6기 프리코스 1주차 미션 종료 직후 작성된 회고 글입니다. 스스로 고민한 내용이 글에 많이 포함되어 있기 때문에 본인 코드에 대해 충분히 고민한 후 읽으시는 것을 추천합니다. 아직 부족한 부분이 많기 때문에 잘못된 내용이 포함되어 있다면 피드백 부탁드립니다. 🥲 🎯 주제 작년 프리코스 1주차에는  이라고 해서 코딩테스트(?) 느낌의 7문제들이 나왔었다. 이번에도 그런 유형의 문제가 나올 줄 알았는데 올해는  이 1주차 미션으로 나왔다. 숫자 야구 게임은 4기, 5기에도 나왔던 문제였기 때문에 올해 또 나올 것이라고 생각은 전혀 못했다. 숫자 야구 게임이 1주차에 나온 것을 보고 2주, 3주, 4주차 문제의 난이도가 상당히 높아질 것 같다는 생각도 들었다. 어려운 문제가 많으면 배워가는 양도 상당히 많아질 것 같아서 기대가 되기도 하고 설레기도 하였다. 사실 작년 5기 숫자야구 게임 문제도 풀어봤지만, 작년 숫자야구 게임은 2주차에 등장했고,  을 학습하기 …","frontmatter":{"date":"October 25, 2023","title":"우아한테크코스 6기 프리코스 - 1주차 회고 (숫자 야구)","categories":"우아한테크코스","author":"재오","emoji":"🛸"},"fields":{"slug":"/Woowa1/"}},"next":null,"prev":{"id":"54fb3dd2-ebac-58fc-8ba7-2de38efe1953","html":"<p><em>이 글은 우아한테크코스 6기 프리코스 1주차 미션 종료 직후 작성된 회고 글입니다.</em></p>\n<p><em>스스로 고민한 내용이 글에 많이 포함되어 있기 때문에 본인 코드에 대해 충분히 고민한 후 읽으시는 것을 추천합니다.</em></p>\n<hr>\n<h2 id=\"-주제\" style=\"position:relative;\"><a href=\"#-%EC%A3%BC%EC%A0%9C\" aria-label=\" 주제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 주제</h2>\n<p>이번 2주차 미션의 주제는 <code class=\"language-text\">레이싱 게임</code> 이었다.</p>\n<p>1주차 <code class=\"language-text\">숫자 야구 게임</code> 보다는 확실히 고려해야할 사항이 많았지만 해결하지 못할 정도의 어려움이 있는 주제는 아니었던 것 같았다. 최대한 기능 구현을 빠르게하고 사용해보지 못한 기술을 접목시키거나 리팩토링에 많은 힘을 쏟고 싶었다.</p>\n<h2 id=\"-회고를-통한-수정\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%88%98%EC%A0%95\" aria-label=\" 회고를 통한 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 회고를 통한 수정</h2>\n<h3 id=\"-중복을-최소화-하자\" style=\"position:relative;\"><a href=\"#-%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94-%ED%95%98%EC%9E%90\" aria-label=\" 중복을 최소화 하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 중복을 최소화 하자!</h3>\n<p>시작하기에 앞서 1주차 미션에 대한 공통 피드백을 읽어보았다. 유익한 정보들이 많았으나 가장 눈에 띄었던 것은 <code class=\"language-text\">중복을 최소화 하자</code>였다.</p>\n<p>어쩌면 당연한 설명이었지만 변수명을 명확하게 작성하기 위해 구체적으로 적으려 하다보니 저런 오류가 발생했던 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">const</span> RandomNumberGenerator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">generateRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> RandomNumberGenerator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>1주차에서 작성했던 랜덤 숫자를 생성하는 메서드명을 의미가 중복되지 않게 <code class=\"language-text\">generate()</code>로 변경하였다. 훨씬 깔끔해진 느낌이 든다.</p>\n<h3 id=\"-기능을-분리하자\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EB%B6%84%EB%A6%AC%ED%95%98%EC%9E%90\" aria-label=\" 기능을 분리하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 기능을 분리하자!</h3>\n<p>사실 1주차 미션에서 애를 먹었던 부분이 바로 <code class=\"language-text\">상수화한 파일을 어디로 분리를 해야하는가</code>였다. 주변 친구들한테도 많이 물어보고 인터넷을 검색했을 때에는 상수화한 파일은 <code class=\"language-text\">domain</code> 에서 관리가 되어야 한다고 했고, 실제로도 <code class=\"language-text\">domain</code> 안에 작성하였다. 하지만 상수를 관리하는 파일이 <code class=\"language-text\">domain</code> 안에 있다보니 파일을 관리하기 힘들어서 이번 2주차에서는 <code class=\"language-text\">static</code>이라는 파일로 관리하였다.</p>\n<p>또한 <code class=\"language-text\">Input</code>의 유효성 검사를 <code class=\"language-text\">controller</code>에서 진행했지만 유효성 검사는 충분히 <code class=\"language-text\">View</code> 혹은 <code class=\"language-text\">domain</code>에서 가능할 것 같다고 판단했다. 너무 많은 기능을 <code class=\"language-text\">controller</code>에 위임하는 것 같아서 <code class=\"language-text\">InputView</code>에서 입력값을 받는 즉시 유효성 검사를 하도록 변경하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">async</span> <span class=\"token function\">readCarsName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">readLineAsync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PRINT_MESSAGE</span><span class=\"token punctuation\">.</span>inputNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      InputValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateCarName</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"-if보다는-trycatch-사용하기\" style=\"position:relative;\"><a href=\"#-if%EB%B3%B4%EB%8B%A4%EB%8A%94-trycatch-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\" if보다는 trycatch 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 if()보다는 try…catch 사용하기</h3>\n<p>위에 있는 코드를 보더라도 유효성 검사를 할 때 <code class=\"language-text\">try...catch</code>문을 사용했다. <code class=\"language-text\">try...catch</code>문은 예외 처리를 효과적으로 할 수 있고 예외를 적절히 처리할 수 있게 해준다. <code class=\"language-text\">if()</code>문을 사용하면 예외를 적절하게 처리하지 못하고 예외가 그대로 전파될 수 있으므로 예외 처리를 제대로 하지 않는 경우에는 예기치 않은 동작을 유발할 수 있다.</p>\n<p><code class=\"language-text\">try...catch</code>문을 비동기에서 사용한다면 <code class=\"language-text\">Promise</code> 내부에서 발생한 예외를 즉시 처리할 수 있기 때문에 더 좋다.</p>\n<h2 id=\"-문제-요구-사항\" style=\"position:relative;\"><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\" aria-label=\" 문제 요구 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 문제 요구 사항</h2>\n<p><img src=\"/462e0720644bffd7b67283d0992ad7d9/1.png\" alt=\"\"></p>\n<p>2주차 미션부터 <code class=\"language-text\">추가된 요구 사항</code>이 새로 생겼다. 무엇보다 가장 눈에 띄었던 부분은 <code class=\"language-text\">Jest</code>를 이용한 테스트 코드 작성이었다.</p>\n<p>최근들어서 <code class=\"language-text\">TDD</code>의 중요성이 강조되기 때문에, 이번 기회에 테스트 케이스를 직접 구현해보며 질적인 측면에서 내 코드를 개선해보고 싶었다. 코딩테스트 문제를 풀더라도 나는 항상 코드를 제출만 하는 입장이었지, 테스트하는 것은 나와 거리가 멀다고 생각했었기 때문에, 조금 능동적으로 코드를 작성할 수 있을 것 같았다.</p>\n<h2 id=\"-기능-목록-작성\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\" aria-label=\" 기능 목록 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 기능 목록 작성</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 기능 목록\n\n- [x] 자동차 이름 입력 기능\n- [x] 자동차 이름 입력값 유효성 검사 기능\n- [x] 시도할 횟수 입력 기능\n- [x] 시도할 횟수 입력값 유효성 검사 기능\n- [x] 랜덤값을 이용한 각 횟수마다 전진여부 출력 기능\n- [x] 최종 우승자 계산 기능</code></pre></div>\n<p>이번 기능 목록을 작성할 때에는 전보다 <code class=\"language-text\">데이터</code>를 어떻게 이용할 것인가에 대해 고민을 많이 했다. 아래에서 조금 더 자세히 설명하겠다.</p>\n<h2 id=\"-고난-그리고-배움\" style=\"position:relative;\"><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\" aria-label=\" 고난 그리고 배움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 고난 그리고 배움</h2>\n<h3 id=\"-기능-구현의-방향성-수정\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%EC%9D%98-%EB%B0%A9%ED%96%A5%EC%84%B1-%EC%88%98%EC%A0%95\" aria-label=\" 기능 구현의 방향성 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 기능 구현의 방향성 수정</h3>\n<p>기존에는 자동차 이름을 담은 배열 하나, 이름의 개수만큼 랜덤의 숫자가 생성되어 있는 배열 하나 이렇게 생성하려고 했다. 하지만 이렇게 큰 배열 두개를 모두 관리할 수 있는 방법에 대해 다시 고민하게 되었다. 못하지는 않을 것 같긴 한데 흠…로직이 너무 꼬일 것 같았다.</p>\n<p>➡️ 처음 입력값을 받는 <code class=\"language-text\">자동차 이름</code>을 하나의 인스턴스로 생성하고 반복문을 통해 직접 랜덤으로 생성된 숫자와 비교해가며 실시간으로 거리를 증가시키고 출력했다. 훨씬 로직이 전보다 간결해졌다.</p>\n<p>처음 기능 목록을 작성하고 로직을 작성하는 것의 중요성을 다시한번 느낄 수 있었다. 틀을 구체화하여 시간을 많이 투자하는 것이 전혀 아깝지 않은 부분이 바로 이 로직을 작성하는 부분 같다.</p>\n<h3 id=\"-왜-최종-우승자-이름이-안나오지\" style=\"position:relative;\"><a href=\"#-%EC%99%9C-%EC%B5%9C%EC%A2%85-%EC%9A%B0%EC%8A%B9%EC%9E%90-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%95%88%EB%82%98%EC%98%A4%EC%A7%80\" aria-label=\" 왜 최종 우승자 이름이 안나오지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 왜 최종 우승자 이름이 안나오지?</h3>\n<p><img src=\"/2c8f764147f46c18f85ebcaf4a7e3087/2.png\" alt=\"\"></p>\n<p>이번에는 <code class=\"language-text\">index.js</code>에서 디버깅을 할 수 있었다. 하지만 이상하게 최종 우승자 출력이 되지 않았다. 그 어떤 에러도 발생하지 않고 그냥 출력값이 없었다. 코드에서 <code class=\"language-text\">undefined</code>를 받는 것이 분명했다.</p>\n<p>천천히 <code class=\"language-text\">우승자를 출력하는</code>코드를 하나하나 분석해보니 아래에서 문제를 발견할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 최종 리팩토링을 하기 전 코드</span>\n\n<span class=\"token comment\">// before</span>\n<span class=\"token keyword\">let</span> finalDistance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfinalDistance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#cars<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  car<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentDistance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> maxDistance <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>finalDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token keyword\">let</span> finalDistance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#cars<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  finalDistance<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentDistance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> maxDistance <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>finalDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사실 처음에 왜 저렇게 작성한 지 이해가 안간다…(졸면서 코드를 작성했나..?) 물론 최종 코드와 위 코드는 많이 다르지만 배열을 이미 선언해두고 <code class=\"language-text\">push</code>를 하는게 아닌 배열에 <code class=\"language-text\">forEach</code>로 순회한 값을 통째로 넣어버렸다. 많은 시간을 쓰며 고민한 부분은 아니었지만 아주 좋은 경험이었다.</p>\n<h3 id=\"-테스트-케이스에서의-오류-난-분명-예외-처리까지-했는데\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%A4%EB%A5%98-%EB%82%9C-%EB%B6%84%EB%AA%85-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%EA%B9%8C%EC%A7%80-%ED%96%88%EB%8A%94%EB%8D%B0\" aria-label=\" 테스트 케이스에서의 오류 난 분명 예외 처리까지 했는데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 테스트 케이스에서의 오류… 난 분명 예외 처리까지 했는데..?</h3>\n<p><img src=\"/f89f8def876025e8549c67982043d19e/3.png\" alt=\"\"></p>\n<p><img src=\"/6c73010f7c378d858a33abf74e22c81e/4.png\" alt=\"\"></p>\n<p>기능 구현을 마치고 테스트를 한번 돌렸는데 에러가 발생했다. 지난주 에러때문에 고생했던 장면이 스쳐지나갔다. 분명 지난주에 완벽히 에러에 대해 파악했다고 생각했는데 무슨 에러인지 너무 궁금했다. 발생한 에러가 모두 <code class=\"language-text\">예외 처리</code>와 관련되어있음을 확인하고 <code class=\"language-text\">InputValidator</code> 코드를 살펴봤다. 무조건 이번에 처음 사용한 <code class=\"language-text\">try...catch</code>와 관련이 있을 것이라고 확신했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">readCarsName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">readLineAsync</span><span class=\"token punctuation\">(</span>PrintMessage<span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT_NAMES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      InputValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateCarName</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Console.print(error)</code> 를 주의깊게 봤다. 흠… 그냥 에러를 출력만 해주고 에러를 처리한다는 느낌이 들지 않았다. 그래서 에러가 발생하면 해당 에러를 던지는 <code class=\"language-text\">throw new Error(error)</code> 를 적어주었다.\n<img src=\"/3b63da078966e83618b2a15080a87df7/5.png\" alt=\"\"></p>\n<p>둘의 차이는 전자는 콘솔창에 찍어보기는 하지만 프로그램을 종료시키는 역할을 하는 것은 아니다. 하지만 후자는 에러가 발견된 즉시 바로 프로그램을 중단시킨다. 프로그램을 보다 안정적으로 종료하는데 사용이 된다고 한다…메모!</p>\n<h3 id=\"-jest에서는-그냥-toequal만-쓰면-안되나\" style=\"position:relative;\"><a href=\"#-jest%EC%97%90%EC%84%9C%EB%8A%94-%EA%B7%B8%EB%83%A5-toequal%EB%A7%8C-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%98%EB%82%98\" aria-label=\" jest에서는 그냥 toequal만 쓰면 안되나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ Jest에서는 그냥 toEqual만 쓰면 안되나..?</h3>\n<p>뒤에 <code class=\"language-text\">🎯 새로 배운 내용</code>에서 설명을 하겠지만 <code class=\"language-text\">Jest</code>를 공부하면서 계속 의문이 들었던 점은 ‘그 많은 <code class=\"language-text\">matcher</code>를 사용할 일이 있을까?‘였다.</p>\n<p><code class=\"language-text\">toEqul</code>, <code class=\"language-text\">toBe</code>만 쓴다면 기대하는 값과 결과값만 비교해서 테스트 코드를 작성할 수 있을 것 같았다. 하지만 여기서 위기가 발생했다.</p>\n<p><img src=\"/af7e6c483d1ce54ef7068cc009798720/6.png\" alt=\"\"></p>\n<p>혹시나 해서 Jest 공식문서와 블로그 글을 찾아봤다.</p>\n<blockquote>\n<p>“만약 **<code class=\"language-text\">toBe</code>**나 **<code class=\"language-text\">toEqual</code>**과 같은 일반적인 Jest 매처를 사용하면 스파이 함수의 호출 여부나 호출된 매개변수를 확인할 수 없습니다. 이러한 일반적인 매처는 주로 반환값이나 객체의 값에 대한 비교에 사용됩니다.”</p>\n</blockquote>\n<p>한마디로 함수를 호출하는 것이 아닌 일반적인 값을 비교할 때에만 <code class=\"language-text\">toBe</code> 와 <code class=\"language-text\">toEqual</code>을 사용할 수 있는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> logSpy <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">,</span> <span class=\"token string\">'print'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'우승자 출력 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> winners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'pobi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pobi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'june'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pobi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'june'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wang'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> expectedResults <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'최종 우승자 : pobi'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'최종 우승자 : pobi, june'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'최종 우승자 : pobi, june, wang'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  winners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">winners<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    OutputView<span class=\"token punctuation\">.</span><span class=\"token function\">printWinnerMessage</span><span class=\"token punctuation\">(</span>winners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>logSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span>expectedResults<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 예시로 한번 살펴보면 <code class=\"language-text\">forEach()</code>함수로 출력함수를 호출한다. <code class=\"language-text\">logSpy</code>는 코드 내에서 <code class=\"language-text\">OutputView.printWinnerMessage(winners)</code>함수 내에서 print 에 사용되는 함수의 호출을 가로채는 스파이이다. <code class=\"language-text\">expect(logSpy).toHaveBeenCalledWith(expectedResults[index])</code>는 <code class=\"language-text\">logSpy</code> 가 <code class=\"language-text\">expectedResults</code> 배열에서 index에 해당하는 위치에 있는 예상 결과 메세지와 함께 호출되었는지 확인한다.</p>\n<p>위와 같이 정해진 값이 아닌 함수의 호출여부를 파악하기 위해서는 <code class=\"language-text\">toEqaul()</code>을 사용할 수 없는 것이다.</p>\n<p>여기서 또 하나의 의문이 들었다. 공식문서를 살펴보면 <code class=\"language-text\">toHaveBeenCalledWith()</code>는 예상 메시지의 결과가 호출되었는지를 확인한다고 쓰여져있다. 호출이 되는 것을 당연스럽게 ‘어떤 인자와 함께 호출이 된다’로 착각을 하고 예상 결과가 인자로 들어가야만 하는 줄 알았다. 여기서 호출은 결과값을 의미하기 때문에 <code class=\"language-text\">expectedResults</code>배열에 있는 값을 출력하느냐를 확인하는 것을 의미한다.</p>\n<h2 id=\"-새로-배운-내용\" style=\"position:relative;\"><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 새로 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 새로 배운 내용</h2>\n<h3 id=\"-jest\" style=\"position:relative;\"><a href=\"#-jest\" aria-label=\" jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 Jest</h3>\n<p>우선 우아한테크코스에서 제공해준 ApplicationTest.js 파일을 분석하며 작동원리에 대해 알고싶었다. <code class=\"language-text\">mock</code>, <code class=\"language-text\">jest.fn()</code>, <code class=\"language-text\">spyOn()</code> 등 처음 보는 함수가 많았지만 <code class=\"language-text\">describe</code> , <code class=\"language-text\">test</code> , <code class=\"language-text\">expect</code>와 같은 키워드와 우아한테크코스 API를 비교하면서 기본적인 작동 원리에 대해서는 파악할 수 있었다.</p>\n<p>처음 보는 함수에 대해서는 Jest 공식 문서를 살펴보면서 기능에 대해 이해하였습니다. 공식 문서에는 상당히 많은 양의 내장함수들이 존재하였으나 주어진 함수에 대해서만 우선적으로 공부하고, 직접 Input값과 Output에 관한 테스트 케이스에 대해서는 필요한 함수를 공식 문서에서 찾아가면서 적용해보았습니다.</p>\n<p>이 블로그에 그 내용 모두 적을 수 없어서 자세한 내용은 직접 정리한 블로그 글을 참고하면 된다.</p>\n<p>👉 <a href=\"https://velog.io/@jaeochoiii/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4-6%EA%B8%B0-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-Jest%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">Jest를 활용하여 테스트코드 작성하기</a></p>\n<h2 id=\"-리팩토링\" style=\"position:relative;\"><a href=\"#-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-label=\" 리팩토링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 리팩토링</h2>\n<h3 id=\"️-airbnb-styling-적용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-airbnb-styling-%EC%A0%81%EC%9A%A9\" aria-label=\"️ airbnb styling 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ airbnb styling 적용</h3>\n<p>같이 프리코스를 준비하는 다른 분들의 회고나 블로그 글을 보면 <code class=\"language-text\">airbnb styling</code>을 많이 적용하셨다. 사실 airbnb style guide에 대해서는 프리코스가 시작되기 직전에 개설된 디스코드에서 처음 봤다.</p>\n<p>뭔가 흥미로운 정보가 많을 것 같아서 리팩토링을 하는 과정에서 참고했다. 많은 내용을 담고 있지만 가장 눈에 띄는 부분이 있었다.</p>\n<blockquote>\n<p>상수가 객체인 경우 내부 프로퍼티 까지 상수로 적용하는 것은 불필요하며, 이렇게 하는 것이 아무 의미 없기 때문에 소문자로 사용하는 것을 지향한다</p>\n</blockquote>\n<p>지금까지는 유지, 보수를 하기 위해서는 상수를 대문자로 눈에 띄게 표현하는 것이 좋다고 잘못 알았던 것이다. 생각해보니 이미 객체명을 대문자로 표현했으면 프로퍼티까지 대문자로 표현할 이유가 없었다. 고개를 끄덕거리며 모든 상수 파일 프로퍼티를 수정하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">const</span> StaticNumber <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">NAME_LENGTH_LIMIT</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CAN_MOVE_CONDITION</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATIC_NUMBER</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">nameLengthLimit</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">canMoveCondition</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"️-자바스크립트-고차함수-적용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9\" aria-label=\"️ 자바스크립트 고차함수 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 자바스크립트 고차함수 적용</h3>\n<p>지난번과 마찬가지로 최대한 <code class=\"language-text\">for()</code> 반복문 사용을 지양하고 <code class=\"language-text\">forEach()</code>를 사용하려고 노력했다. 특히 배열로 두개의 값을 받아올 때 보통 인덱스로 값을 받아왔는데, 인덱스 내용은 나만 알 수 있고, 처음 코드를 보는 사람은 예측이 힘들 것 같았다.</p>\n<p>이것을 해결할 수 있는 방법이 바로 <code class=\"language-text\">구조분해 할당</code> 이었고, 실제로 이를 적용해보니 가독성이 매우 좋아진 것을 확인할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bad</span>\n<span class=\"token function\">printMoveMarking</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">carMoveState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  carMoveState<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>car<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PRINT_MESSAGE</span><span class=\"token punctuation\">.</span>moveMarking<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token function\">printMoveMarking</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">carMoveState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  carMoveState<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>carName<span class=\"token punctuation\">,</span> currentPosition<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>carName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PRINT_MESSAGE</span><span class=\"token punctuation\">.</span>moveMarking<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>currentPosition<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"️-controller에게-너무-과분한-것을-맡기지-말자\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-controller%EC%97%90%EA%B2%8C-%EB%84%88%EB%AC%B4-%EA%B3%BC%EB%B6%84%ED%95%9C-%EA%B2%83%EC%9D%84-%EB%A7%A1%EA%B8%B0%EC%A7%80-%EB%A7%90%EC%9E%90\" aria-label=\"️ controller에게 너무 과분한 것을 맡기지 말자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ controller에게 너무 과분한 것을 맡기지 말자</h3>\n<p>이번 주차에서는 MVC 패턴, 특히 <code class=\"language-text\">Model</code> 작성에 큰 시간을 할애했다. 코드를 작성하는 동안 구현하고자 하는 기능이 <code class=\"language-text\">domain</code>에 들어가야 하는가? controller에 들어가야 하는가?에 대해 오랫동안 고민했다. 어떤 글을 보더라도 ‘Model은 데이터 관련 값을, View는 입력값과 출력값을, 그리고 Controller는그 둘을 연결해주는 역할’ 이라고만 명시되어 있을 뿐, 로직을 구현하는 것에 있어서 정답은 찾을 수 없었다.</p>\n<p>처음에는 데이터의 속성만 가져오는 작업을 domain에서 했지만 이렇게 하니, <code class=\"language-text\">controller</code>에서는 <code class=\"language-text\">domain</code>과 <code class=\"language-text\">view</code>를 연결하는 작업 외에도 데이터를 가공까지 하게되면서 클래스가 복잡해졌다. 정확한 정답은 없지만 <code class=\"language-text\">controller</code>의 부담을 최대한 덜어주고 데이터와 관련된 모든 작업을 <code class=\"language-text\">domain</code>에서 하고, 대신 <code class=\"language-text\">domain</code>을 최대한 세분화하였다.</p>\n<p>기존의 데이터의 속성을 가져오는 클래스를 그대로 두고, 추가적으로 그 속성을 가공하여 얻을 수 있는 데이터 값들의 집합인 클래스를 하나 더 생성하였다. 이미 <code class=\"language-text\">domain</code>과 <code class=\"language-text\">controller</code> 코드가 작성된 상태여서 기능을 분리하는 과정이 복잡하였지만 결과적으로는 훨씬 가독성도 좋고 <code class=\"language-text\">controller</code>의 코드도 간결해졌다.</p>\n<h3 id=\"️-데이터라고-다-도메인은-아니야\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9D%BC%EA%B3%A0-%EB%8B%A4-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%80-%EC%95%84%EB%8B%88%EC%95%BC\" aria-label=\"️ 데이터라고 다 도메인은 아니야 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 데이터라고 다 도메인은 아니야</h3>\n<p>이 부분은 거의 제출 마감날에 코드 리팩토링하는 과정에서 발견하였다.</p>\n<p><code class=\"language-text\">tries</code>라는 변수를 원래 도메인에서 관리하고자 하였지만 domain 명이 Cars인데 시도 횟수를 여기서 관리하는 것이 맞는가에 대한 의문이 들었다. 사실 반복문 한번에만 쓰일 변수이기 때문에 <code class=\"language-text\">domain</code>에서 쓰일 이유가 없는 것 같아 <code class=\"language-text\">controller</code> private 필드로 위치를 옮겼다.</p>\n<h2 id=\"-개선해야할-점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\" aria-label=\" 개선해야할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 개선해야할 점</h2>\n<p>우연히 이번 우아한테크코스를 통해서 알게된 분이 작성한 클래스 관련 글을 보았는데, domain이나 클래스 내부에서는 <code class=\"language-text\">getter()</code> <code class=\"language-text\">setter()</code> 사용을 최대한 지양해야 한다고 쓰여져 있었다. 다른 사람의 글을 읽어봐도 <code class=\"language-text\">getter()</code> <code class=\"language-text\">setter()</code>은 컨트롤러에 의해 타의적으로만 이용이 가능하며, 이는 협업을 추구하는 객체지향과 거리가 멀어 결국에는 캡슐화를 어긴다고 쓰여져 있었다. 지금까지 매번 <code class=\"language-text\">get()</code>과 <code class=\"language-text\">set()</code>으로 데이터를 받아왔기 때문에 이 점은 상당히 충격이었다. 아직은 낯선 방법이고, 지금 바로 완벽하게 이해해서 사용할 수는 없겠지만 앞으로 캡슐화와 객체 지향에 신경써서 코드를 작성해야할 것 같다.</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 마무리</h2>\n<p>이번 주차 한줄평을 다음과 같이 할 수 있을 것 같다.</p>\n<p><strong>의문을 갖고 공부를 하자</strong></p>\n<p>이번 주차에서는 스스로에게 물음표를 많이 던졌던 것 같다. ‘이건 왜 여기서 쓰는거지?’ ‘이게 왜 이 파일에 들어가야 하지?’ 스스로 생각을 많이 하다보니 궁금한게 많아지고 그것을 서칭하면서 코드를 작성하다보니 시간도 많이 소요됐다. 하지만 그만큼 배울 수 있는 것이 많아졌고, 무엇보다 안주하지 않으려는 모습을 볼 수 있어서 값졌다.</p>\n<p>프리코스의 절반이 지났다. 힘들어도 조금만 힘내서 한다면 지금보다 더 많이 성장할 수 있을 것이다.</p>\n<p>이번 3주차 미션도 많은 깨달음을 얻을 수 있는 한 주가 되기를 바란다.ㅎㅎ</p>\n<h2 id=\"-내가-작성한-코드\" style=\"position:relative;\"><a href=\"#-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\" 내가 작성한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧑🏻‍💻 내가 작성한 코드</h2>\n<p><img src=\"/29beaf67699d39776e1a270953e21deb/7.png\" alt=\"\"></p>\n<p>👉 <a href=\"https://github.com/woowacourse-precourse/javascript-racingcar-6/pull/2\">우아한테크코스 2주차 미션_자동차 경주</a></p>\n<p>코드 리뷰는 언제든 환영입니다! 🙂</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%A3%BC%EC%A0%9C\">🎯 주제</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EA%B3%A0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%88%98%EC%A0%95\">🎯 회고를 통한 수정</a></p>\n<ul>\n<li><a href=\"#-%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94-%ED%95%98%EC%9E%90\">👍🏻 중복을 최소화 하자!</a></li>\n<li><a href=\"#-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EB%B6%84%EB%A6%AC%ED%95%98%EC%9E%90\">👍🏻 기능을 분리하자!</a></li>\n<li><a href=\"#-if%EB%B3%B4%EB%8B%A4%EB%8A%94-trycatch-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">👍🏻 if()보다는 try…catch 사용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\">🎯 문제 요구 사항</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\">🎯 기능 목록 작성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\">🎯 고난 그리고 배움</a></p>\n<ul>\n<li><a href=\"#-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%EC%9D%98-%EB%B0%A9%ED%96%A5%EC%84%B1-%EC%88%98%EC%A0%95\">❌ 기능 구현의 방향성 수정</a></li>\n<li><a href=\"#-%EC%99%9C-%EC%B5%9C%EC%A2%85-%EC%9A%B0%EC%8A%B9%EC%9E%90-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%95%88%EB%82%98%EC%98%A4%EC%A7%80\">❌ 왜 최종 우승자 이름이 안나오지?</a></li>\n<li><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%A4%EB%A5%98-%EB%82%9C-%EB%B6%84%EB%AA%85-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%EA%B9%8C%EC%A7%80-%ED%96%88%EB%8A%94%EB%8D%B0\">❌ 테스트 케이스에서의 오류… 난 분명 예외 처리까지 했는데..?</a></li>\n<li><a href=\"#-jest%EC%97%90%EC%84%9C%EB%8A%94-%EA%B7%B8%EB%83%A5-toequal%EB%A7%8C-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%98%EB%82%98\">❌ Jest에서는 그냥 toEqual만 쓰면 안되나..?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\">🎯 새로 배운 내용</a></p>\n<ul>\n<li><a href=\"#-jest\">🔖 Jest</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\">🎯 리팩토링</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-airbnb-styling-%EC%A0%81%EC%9A%A9\">✏️ airbnb styling 적용</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9\">✏️ 자바스크립트 고차함수 적용</a></li>\n<li><a href=\"#%EF%B8%8F-controller%EC%97%90%EA%B2%8C-%EB%84%88%EB%AC%B4-%EA%B3%BC%EB%B6%84%ED%95%9C-%EA%B2%83%EC%9D%84-%EB%A7%A1%EA%B8%B0%EC%A7%80-%EB%A7%90%EC%9E%90\">✏️ controller에게 너무 과분한 것을 맡기지 말자</a></li>\n<li><a href=\"#%EF%B8%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9D%BC%EA%B3%A0-%EB%8B%A4-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%80-%EC%95%84%EB%8B%88%EC%95%BC\">✏️ 데이터라고 다 도메인은 아니야</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\">🎯 개선해야할 점</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🎯 마무리</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C\">🧑🏻‍💻 내가 작성한 코드</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 02, 2023","title":"우아한테크코스 6기 프리코스 - 2주차 회고 (자동차 경주)","categories":"우아한테크코스","author":"재오","emoji":"🛸"},"fields":{"slug":"/Woowa2/"}},"site":{"siteMetadata":{"siteUrl":"https://www.jaeochoiii.com","comments":{"utterances":{"repo":"jaeochoii/jaeochoii.github.io"}}}}},"pageContext":{"slug":"/Woowa1/","nextSlug":"","prevSlug":"/Woowa2/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}