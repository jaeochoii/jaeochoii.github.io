{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/MySQL","result":{"pageContext":{"currentCategory":"MySQL","categories":["All","알고리즘","회고","타입스크립트","MySQL","자바스크립트","우아한테크코스"],"edges":[{"node":{"id":"040ec5b6-1a64-597d-934c-eaefb629f962","excerpt":"IFNULL 만약 해당 컬럼값이 이라면 다른 값으로 대체할 수 있다. IS 만약 컬럼의 값이 ‘NULL’인 데이터만 추출하고 싶을 때 를 사용한다. 반대로 컬럼의 값이 ‘NULL’이 아닌 데이터만 추출하고 싶을 때 을 사용한다. COUNT(컬럼명)은 NULL인 값을 절대 가져오지 않는다!!!! IFNULL IS","fields":{"slug":"/NULL/"},"frontmatter":{"categories":"MySQL","title":"MySQL 준비하기 - NULL","date":"February 15, 2024"}},"next":{"fields":{"slug":"/Fibonacci/"}},"previous":{"fields":{"slug":"/Tree/"}}},{"node":{"id":"c2cf6915-0957-592e-a1f3-f75572ff9fd1","excerpt":"🎯 UNION과 UNION ALL 과 은 두 개의 결과를 결합하는 연산자이다. 결과를 합치는 방식과 중복 처리 방식에서 차이를 보인다. 먼저 은 중복된 행을 제거하여 결과에는 유니크한 행들만 포함한다. 결과는 정렬되어 반환되며, 중복된 행이 제거된 상태이다. 다음으로 은 중복된 행을 제거하지 않고 모든 행을 포함한다. 결과는 정렬되지 않으며, 그대로 반환되는 것이 특징이다. 여기서 중복을 제거한다는 것에 이해를 잘할 필요가 있다. 중복 제거는 SELECT 구문의 모든 항목이 동일할 때에만 이루어진다. 즉 하나라도 값이 다르면 중복으로 처리되지 않는다. 🎯 GROUP BY 사용하여 중복된 name 제거하기 🎯 예제 확인하기 (프로그래머스) 👉 문제 확인하기 : 오프라인/온라인 판매 데이터 통합하기\n 🎯 UNION과 UNION ALL 🎯 GROUP BY 사용하여 중복된 name 제거하기 🎯 예제 확인하기 (프로그래머스)","fields":{"slug":"/UNION/"},"frontmatter":{"categories":"MySQL","title":"MySQL 준비하기 - UNION","date":"February 14, 2024"}},"next":{"fields":{"slug":"/BellmanFord/"}},"previous":{"fields":{"slug":"/Fibonacci/"}}},{"node":{"id":"57cdaf28-715b-590b-961e-1050f3daea68","excerpt":"🎯 그룹화하여 데이터 조회하기 MySQL에서 함수를 이용하면 테이블 전체의 데이터 갯수만 가져온다. 하지만 유형별로 갯수를 알고 싶을 때에는 컬럼에 데이터를 그룹화 할 수 있는 를 사용하는 것이 일반적이다. 를 사용할 때는 아래 두가지를 반드시 기억해야 한다. 특정 컬럼을 그룹화하는  특정 컬럼을 그룹화한 결과에 조건을 거는  여기서 도 조건을 걸 때 많이 쓰이기 때문에 혼란이 발생할 수 있으나 은 그룹화를 하기 전이고, 은 그룹화 후에 조건을 거는 것이다. 🎯 GROUP BY 사용하기 💎 컬럼 그룹화 💎 조건 처리 후에 컬럼 그룹화 💎 컬럼 그룹화 후에 조건 처리 💎 조건 처리 후에 컬럼 그룹화 후에 조건 처리 💎 ORDER BY가 존재하는 경우 🎯 예제로 확인하기 👉 문제 확인하기 : 프로그래머스 - 재구매가 일어난 상품과 회원 리스트 구하기 ONLINE_SALE 테이블에서 동일한 회원이 동일한 상품을 재구매한 데이터를 구하여, 재구매한 회원 ID와 재구매한 상품 ID를 출력하…","fields":{"slug":"/GROUP_BY/"},"frontmatter":{"categories":"MySQL","title":"MySQL 준비하기 - GROUP BY","date":"February 07, 2024"}},"next":{"fields":{"slug":"/BinaryTree/"}},"previous":{"fields":{"slug":"/TreeDiameter/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}