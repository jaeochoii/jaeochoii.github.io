{"componentChunkName":"component---src-templates-blog-template-js","path":"/Woowa3/","result":{"data":{"cur":{"id":"040401b7-adbd-5fb1-90c5-c629cefc20e2","html":"<p><em>이 글은 우아한테크코스 6기 프리코스 3주차 미션 종료 직후 작성된 회고 글입니다.</em></p>\n<p><em>스스로 고민한 내용이 글에 많이 포함되어 있기 때문에 본인 코드에 대해 충분히 고민한 후 읽으시는 것을 추천합니다.</em></p>\n<hr>\n<h2 id=\"-주제\" style=\"position:relative;\"><a href=\"#-%EC%A3%BC%EC%A0%9C\" aria-label=\" 주제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 주제</h2>\n<p>이번 3주차 미션은 <code class=\"language-text\">로또</code> 게임이었다. 확실히 이전 미션들보다 점점 요구사항도 많아지고 로직이 복잡해져서 어려움을 많이 느꼈던 것 같다.</p>\n<p>특히 2주차 미션 후 코드리뷰를 통해 채찍을 많이 받았는데, 이를 바탕으로 3주차에는 더 성장한 모습을 느끼고 싶었다.</p>\n<h2 id=\"-회고를-통한-수정\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%88%98%EC%A0%95\" aria-label=\" 회고를 통한 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 회고를 통한 수정</h2>\n<h3 id=\"-static을-기능별로-나눠보자\" style=\"position:relative;\"><a href=\"#-static%EC%9D%84-%EA%B8%B0%EB%8A%A5%EB%B3%84%EB%A1%9C-%EB%82%98%EB%88%A0%EB%B3%B4%EC%9E%90\" aria-label=\" static을 기능별로 나눠보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 Static을 기능별로 나눠보자</h3>\n<p>사실 이 부분은 다른 분들의 코드를 살펴보다 발견한 점이었는데, 상당히 인상깊어서 한번 사용해봐야겠다는 생각을 했다. 기존에는 <code class=\"language-text\">Static.js</code> 파일 안에 에러메세지, 매직 넘버, 출력 메세지를 다 넣고 사용했었다. 하지만 다른 객체에서 import할 때에도 코드가 길어지고 정확한 의미가 담기기에는 역부족이었다. 그래서 기능별로 파일을 만들어서 가독성을 높이는데 힘을 쏟았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">MESSAGE</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">purchase</span><span class=\"token operator\">:</span> <span class=\"token string\">'구입금액을 입력해 주세요.\\n'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">purchaseAmount</span><span class=\"token operator\">:</span> <span class=\"token string\">'개를 구매했습니다.'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">winningNumber</span><span class=\"token operator\">:</span> <span class=\"token string\">'\\n당첨 번호를 입력해 주세요.\\n'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bonusNumber</span><span class=\"token operator\">:</span> <span class=\"token string\">'\\n보너스 번호를 입력해 주세요.\\n'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">revenuePrefix</span><span class=\"token operator\">:</span> <span class=\"token string\">'총 수익률은'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">revenueSuffix</span><span class=\"token operator\">:</span> <span class=\"token string\">'%입니다.\\n'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">resultStatic</span><span class=\"token operator\">:</span> <span class=\"token string\">'\\n당첨통계\\n---'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">staticSuffix</span><span class=\"token operator\">:</span> <span class=\"token string\">'개'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 사용하니 객체를 생성할 때 의미 중복되는 문제도 해결할 수 있었다.</p>\n<h3 id=\"-반복문-사용-기준을-정해보자\" style=\"position:relative;\"><a href=\"#-%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%A4%80%EC%9D%84-%EC%A0%95%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\" 반복문 사용 기준을 정해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 반복문 사용 기준을 정해보자</h3>\n<p>코딩테스트 문제를 풀 때 항상 습관적으로 <code class=\"language-text\">for</code> 반복문을 사용했다. 하지만 코드의 길이가 조금 길어진다는 단점이 있고, for 반복문 외에도 사용할 수 있는 다양한 고차 함수가 있어서 프리코스에서 사용을 최대한 지양하고자 하였다.</p>\n<p>하지만 이번에 같이 프리코스를 준비하는 동생이 ‘입력값이 말도 안되게 1천, 1억이 들어오면 고차함수를 사용할 때 메모리 낭비가 너무 심하지 않을까?‘라고 했던 말을 듣고 아차! 싶었다. 듣고보니 고차 함수 사용이 가독성이 좋고 정해진 값만큼의 순환을 할 때에는 효율적이지만 수가 커진다면 상당히 비효율적이기 때문이다.</p>\n<p>따라서 이미 정해진 값의 순환은 고차함수를 사용하지만, 값을 User로부터 입력받는 경우라면 for문을 사용하는 것이 이상적일 것이라 판단했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 로또의 개수는 입력값 영향을 받기 때문에 for문 사용</span>\n<span class=\"token function\">printLottos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lottos</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lottos<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lottos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 결과 통계 배열은 5개로 이미 정해져있기 때문에 고차함수 사용</span>\n<span class=\"token function\">printResultStatistic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">winningStatistic</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MESSAGE</span><span class=\"token punctuation\">.</span>resultStatic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token constant\">STATISTIC_RESULT</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>winningStatistic<span class=\"token punctuation\">[</span><span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>arraySize <span class=\"token operator\">-</span> index<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n        <span class=\"token constant\">MESSAGE</span><span class=\"token punctuation\">.</span>staticSuffix\n      <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"-기능의-흐름대로-코드-작성하기\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5%EC%9D%98-%ED%9D%90%EB%A6%84%EB%8C%80%EB%A1%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\" 기능의 흐름대로 코드 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 기능의 흐름대로 코드 작성하기</h3>\n<p>이 부분도 사실 고민이 많았다. 특히 컨트롤러에서 <code class=\"language-text\">input</code>은 <code class=\"language-text\">input</code> 끼리 나열하고 다른 기능은 다른 기능끼리 묶어 놓는 것이 더 통일성 있다고 생각했다. 하지만 이 코드를 읽는 입장에서 생각해본다면 처음 보는 코드를 여기갔다, 저기갔다 반복하다보면 나같아도 읽기 싫어질 것 같았다.</p>\n<p>이번 3주차 미션부터는 위에서 아래로 읽는 방향으로 쭉 코드를 작성하고자 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> async <span class=\"token function\">#inputPurchasePrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#purchaseLottos</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  async <span class=\"token function\">#purchaseLottos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#inputWinningNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  async <span class=\"token function\">#inputWinningNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#inputBonusNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"-문제-요구-사항\" style=\"position:relative;\"><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\" aria-label=\" 문제 요구 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 문제 요구 사항</h2>\n<p><img src=\"/a96a49b7f1dcc9671d2d1e19a85b56db/1.png\" alt=\"\"></p>\n<p>추가된 요구 사항이 갑작스럽게 늘어나서 조금 당황했다. 이것 외에도 메일로 받았던 피드백 중에서 <code class=\"language-text\">클래스를 분리해보는 연습</code> 을 해보라고 써있었다.</p>\n<p>이번 주차는 함수의 길이를 최대한 줄이면서 하나의 기능만 할 수 있게끔 만들어보는 것이 큰 과제라고 생각했다.(함수 관련 피드백이 무척 많기도…) 또한 <code class=\"language-text\">단위 테스트 구현</code>을 요구사항으로 준 것을 보니, 도메인 부분을 상세하게 나누는 것도 key pooint가 될 것 같았다.</p>\n<h2 id=\"-기능-목록-작성\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\" aria-label=\" 기능 목록 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 기능 목록 작성</h2>\n<p><img src=\"/6b1d6d205548626e3e66eff79842551d/2.png\" alt=\"\"></p>\n<p>공통 피드백에서 이 두개의 요구사항이 사실 제일 지키기 어려웠다. 흠…보통 README에 기능 목록을 작성하는데…상세히 작성하되 설계와 구현과 같이 너무 상세하게 작성하지 않기라… 사실 2주차 미션 PR에서 PR comment로 본인이 작성한 기능들을 상세하게 적어놓으신 분들을 발견했다. 코드 리뷰를 할 때 확실히 눈에 띄는 부분은 있어서 인상깊었던 부분이었다.</p>\n<p>내가 내린 결론은 기존에 작성했던 기능 목록을 조금 더 구체적인 기능별로 분리를 하되, README 파일 말고 PR comment로 조금 더 상세적인 프로젝트 설명을 붙이면서 마크다운 문법을 좀 익히기로 결정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\">// README.md\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 기능 목록</span>\n\n<span class=\"token list punctuation\">-</span> [x] 구매자와 관련된 로또를 생성\n\n  <span class=\"token list punctuation\">-</span> [x] 로또 구매 금액을 입력받는 기능\n  <span class=\"token list punctuation\">-</span> [x] 로또 수량만큼 랜덤으로 로또 배열 생성 기능\n  <span class=\"token list punctuation\">-</span> [x] 로또 수량과 로또 배열 출력하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 구매 금액의 유효성을 검사하는 기능\n\n<span class=\"token list punctuation\">-</span> [x] 당첨 로또를 생성\n\n  <span class=\"token list punctuation\">-</span> [x] 당첨 번호 입력받는 기능\n  <span class=\"token list punctuation\">-</span> [x] 보너스 번호 입력받는 기능\n  <span class=\"token list punctuation\">-</span> [x] 당첨번호의 유효성을 검사하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 보너스 번호의 유효성을 검사하는 기능\n\n<span class=\"token list punctuation\">-</span> [x] 구매자가 구매한 로또와 관련된 결과 반환\n\n  <span class=\"token list punctuation\">-</span> [x] 랜덤으로 생성된 로또 배열과 당첨번호, 보너스 번호를 비교하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 당첨 내역을 출력하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 수익률을 계산하는 기능</code></pre></div>\n<p><img src=\"/fe62541392ee5050b31301b6bf002941/3.jpeg\" alt=\"\"></p>\n<h2 id=\"-고난-그리고-배움\" style=\"position:relative;\"><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\" aria-label=\" 고난 그리고 배움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 고난 그리고 배움</h2>\n<h3 id=\"-또-예외-처리에서-오류\" style=\"position:relative;\"><a href=\"#-%EB%98%90-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%EC%97%90%EC%84%9C-%EC%98%A4%EB%A5%98\" aria-label=\" 또 예외 처리에서 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 또 예외 처리에서 오류…?</h3>\n<p><img src=\"/8e21ffeaf9874f0aa026519f09d521a9/4.png\" alt=\"\"></p>\n<p>이번 미션에서도 예상치 못한 에러 발생으로 해결하는데 오랜 시간이 소요됐다. 평소와 같이 에러처리를 하였는데 자꾸 에러처리 하는 부분에서 테스트 케이스가 정상적으로 돌아가지 않았다. 괜히 제가 작성했던 <code class=\"language-text\">Validator</code> 와 <code class=\"language-text\">InputView</code> 코드만 몇시간을 붙잡았던 것 같다.</p>\n<p>결국에는 <code class=\"language-text\">ApplicationTest</code> 코드의 <code class=\"language-text\">runException</code> 함수를 읽어봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runException</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// given</span>\n  <span class=\"token keyword\">const</span> logSpy <span class=\"token operator\">=</span> <span class=\"token function\">getLogSpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">RANDOM_NUMBERS_TO_END</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">INPUT_NUMBERS_TO_END</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1000'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1,2,3,4,5,6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">mockRandoms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token constant\">RANDOM_NUMBERS_TO_END</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mockQuestions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token constant\">INPUT_NUMBERS_TO_END</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// when</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// then</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>logSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span>expect<span class=\"token punctuation\">.</span><span class=\"token function\">stringContaining</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[ERROR]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그냥 쓰윽 읽어보면 뭐가 문제인 지 잘 모르겠다. 하지만 2주차 때의 예외를 던지는 부분을 살펴보면서 비교해보면 차이가 무엇인지 분명하게 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">test<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"pobi,javaji\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"pobi,eastjun\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"이름에 대한 예외 처리\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">inputs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// given</span>\n      <span class=\"token function\">mockQuestions</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// when</span>\n      <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// then</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rejects<span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[ERROR]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>ApplicationTest 코드의 <code class=\"language-text\">rejects</code>를 살펴보니 이전 테스트 케이스와는 사뭇 다른걸 확인할 수 있었다. rejects는 비동기 함수가 실행되었을 때 예외가 발생한 부분의 프라미스를 반환하고, 그 프라미스가 에러를 던져야 한다는 것을 테스트한다. 그리고 내가 사용했던 <code class=\"language-text\">toThrow</code>는 던져진 에러의 유형을 지정하는 데 사용되고, 예외를 던져졌을 때의 메시지의 <code class=\"language-text\">[ERROR]</code> 가 포함이 되어야한다. 하지만 이번 3주차 코드의 마지막 부분을 보면 <code class=\"language-text\">expect.stringContaining(\"[ERROR]\")</code> 부분이 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#lottoGame<span class=\"token punctuation\">.</span><span class=\"token function\">playGame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>예외가 발생했을 때 에러를 던지기 전에 <code class=\"language-text\">string</code> 에 <code class=\"language-text\">[ERROR]</code> 가 포함이 되어야하는 것을 의미하는 것이었다. 즉, 에러를 보내는 것에서 끝내는 것이 아닌 에러의 메시지를 <code class=\"language-text\">Console</code> 로 출력해야하는 것이었다. 지금까지 내가 에러를 보낸 방식은 잘못되었다는 것을 이번 주차에서 깨달았다. 우선 Input과 관련된 부분을 모두 Console로 출력할 수 없기 때문에 전체적으로 관리하는 <code class=\"language-text\">App.js</code> 에서 이 역할을 부여받아 <code class=\"language-text\">try...catch</code> 문을 통해 에러의 메시지를 출력하는 과정까지 마치니 모든 테스트 케이스를 통과할 수 있었다.</p>\n<p>사실 이번 오류를 통해 <code class=\"language-text\">try...catch</code> 내에 <code class=\"language-text\">error</code> 객체는 <code class=\"language-text\">name</code> 과 <code class=\"language-text\">message</code> 속성을 갖고있기 때문에 출력을 할 때 해당 에러의 <code class=\"language-text\">message</code> 만 골라서 출력할 수 있다는 것을 처음 알 수 있었다. 또한 기본적으로 나에게 주어진 코드가 있고, 그것을 이용해야 한다면 우선적으로 해당 코드에 대해 꼼꼼하게 어떤 의미를 담고 있는지에 대해 분석을 해야한다는 점을 깨달았다.</p>\n<h3 id=\"-rank-오류\" style=\"position:relative;\"><a href=\"#-rank-%EC%98%A4%EB%A5%98\" aria-label=\" rank 오류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ Rank 오류</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before</span>\n\n<span class=\"token function\">getRank</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lotto<span class=\"token punctuation\">,</span> winningNumber<span class=\"token punctuation\">,</span> bonusNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sameNumberCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSameNumberCount</span><span class=\"token punctuation\">(</span>lotto<span class=\"token punctuation\">,</span> winningNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sameNumberCount <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> lotto<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>bonusNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getRankStatistic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">winningNumber<span class=\"token punctuation\">,</span> bonusNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#lottos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lotto</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> rank <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRank</span><span class=\"token punctuation\">(</span>lotto<span class=\"token punctuation\">,</span> winningNumber<span class=\"token punctuation\">,</span> bonusNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Rank</code> 라는 순위를 계산하는 클래스 내의 코드 일부이다. 순위를 계산하기 위해서는 <code class=\"language-text\">로또</code>, <code class=\"language-text\">당첨 번호</code>, <code class=\"language-text\">보너스 번호</code> 가 필요하기 때문에 이를 인자로 받아야 했다. 하지만 클린코드 원칙 중에서 인자를 2개 이상 받는 코드는 비추천한다는 글을 읽었었기 때문에 이를 그대로 받는 것은 문제가 있어 보였다.</p>\n<p>따라서 <code class=\"language-text\">props</code> 객체를 활용해 인자의 수를 줄이기로 마음먹었다.</p>\n<p>하지만 이 부분부터 문제가 발생하였다. 기존에 존재하는 배열을 밖에서 이미 받게 되었는데 이 로또를 어떻게 사용할 수 있을까? 하는 고민이 있었다. <code class=\"language-text\">private</code> 필드에서 선언을 해두고 해야할까? 아니면 Rank라는 클래스에 <code class=\"language-text\">Lotto</code> 클래스를 상속받을까? 그러면 <code class=\"language-text\">Lotto</code> 클래스가 두 곳에서 상속을 받아야 하기 때문에 모든 로직이 꼬일 것만 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// after</span>\n\n<span class=\"token function\">getRank</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> sameNumberCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSameNumberCount</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>winningNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token operator\">...</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sameNumberCount <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> props<span class=\"token punctuation\">.</span>lotto<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>bonusNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getRankStatistic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token punctuation\">.</span>lottos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lotto</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> rank <span class=\"token operator\">=</span> lotto<span class=\"token punctuation\">.</span><span class=\"token function\">getRank</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>winningNumber<span class=\"token punctuation\">,</span> bonusNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 이것을 모두 <code class=\"language-text\">lotto</code> 를 인자로 받으면 해결이 되는 문제였다. 함수에서 3개의 인자를 받는 것은 불필요할 것 같아서 3개의 인자보다는 이것을 <code class=\"language-text\">props</code> 로 받으니 코드가 깔끔해졌다.</p>\n<h2 id=\"-새로-배운-내용\" style=\"position:relative;\"><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 새로 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 새로 배운 내용</h2>\n<h3 id=\"-객체-지향적인-코드-작성\" style=\"position:relative;\"><a href=\"#-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\" 객체 지향적인 코드 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 객체 지향적인 코드 작성</h3>\n<p>이번 3주차 미션에서 가장 신경을 많이 썼던 부분이 바로 객체 지향적인 코드를 작성하는 것이었다. 우선 이번 주차에서는 <code class=\"language-text\">능동적인 객체</code> 를 만드는 것과 <code class=\"language-text\">캡슐화</code>를 잘 적용해보는 것을 목표로 잡았다. 능동적인 객체를 만들기 위해서 로또 게임을 할 때 필요한 데이터들을 <code class=\"language-text\">공통 피드백</code>에 적혀있듯이 클래스를 기능별로 분리를 해봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Lotto <span class=\"token keyword\">from</span> <span class=\"token string\">'./Lotto.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Lottos</span> <span class=\"token punctuation\">{</span>\n  #lottos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#lottos<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Lotto</span><span class=\"token punctuation\">(</span>LottoNumberGenerator<span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLotto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getLottos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#lottos<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>게임을 진행하기 위해서 크게는 <code class=\"language-text\">구매 금액</code>, <code class=\"language-text\">로또 번호</code>, <code class=\"language-text\">당첨 번호</code>, <code class=\"language-text\">보너스 번호</code>가 필요했고 이를 이용해서 <code class=\"language-text\">순위</code>를 정하고 <code class=\"language-text\">최종 수익률</code>을 산출한다. 따라서 로또 번호, 당첨 번호, 보너스 번호를 통해 데이터를 얻고 이것을 <code class=\"language-text\">Rank</code> 와 <code class=\"language-text\">Money</code> 라는 객체와 협력한다면 충분히 <code class=\"language-text\">get</code> ,<code class=\"language-text\">set</code> 만 남발하지 않는 능동적인 객체를 만들 수 있을 것 같았다. 추가적으로 이번 미션에서는 <code class=\"language-text\">Lotto</code> 라는 클래스를 이미 주었는데 이 클래스로 하나의 로또를 관리하고 이것을 상속받는 클래스를 하나 생성하여 구매금액에 따른 갯수만큼의 로또 배열을 반환하면 더 객체 지향적인 코드를 작성하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  #lottos<span class=\"token punctuation\">;</span>\n  #rankStatistic<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lottos</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#getSameNumberCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lotto<span class=\"token punctuation\">,</span> winningNumber</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">#getRank</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lotto<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#getSameNumberCount</span><span class=\"token punctuation\">(</span>lotto<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>winningNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getRankStatistic</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#lottos<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lotto</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> rank <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#getRank</span><span class=\"token punctuation\">(</span>lotto<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#rankStatistic<span class=\"token punctuation\">[</span>rank <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#rankStatistic<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>캡슐화를 적용하기 위해서는 <code class=\"language-text\">private field</code> 를 적극 활용하였다. 기존에는 변수만 private로 선언했지만 다른 객체에서 사용되지 않을 메서드 같은 경우에는 private로 선언하여 외부 변동이 적어지고 에러가 발생할 가능성이 적어진다는 것을 배웠다. 그래서 한 객체 안에서만 협력하는 메서드는 모두 private로 선언하여 캡슐화를 지키려고 노력하였다.</p>\n<h3 id=\"-비동기를-사용해-input-받기\" style=\"position:relative;\"><a href=\"#-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-input-%EB%B0%9B%EA%B8%B0\" aria-label=\" 비동기를 사용해 input 받기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 비동기를 사용해 Input 받기</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token function\">readCarsName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">readLineAsync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PRINT_MESSAGE</span><span class=\"token punctuation\">.</span>inputNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    InputValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateCarName</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>프리코스 2주차에 작성했던 <code class=\"language-text\">InputView</code> 코드의 일부이다.입력값을 <code class=\"language-text\">callback</code>함수에 입력하여 <code class=\"language-text\">callback</code> 함수에서 입력값을 처리하는 기능을 할 수 있게끔 코드를 작성하였다. 내가 사용하는 이유는 모듈화를 하기 위함이었다. 이렇게 작성하면 코드의 깊이가 깊어져 캡슐화에 용이할 것이라고 판단했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// after</span>\n<span class=\"token keyword\">async</span> <span class=\"token function\">readPurchasePrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> inputPrice <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">readLineAsync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MESSAGE</span><span class=\"token punctuation\">.</span>purchase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Validator<span class=\"token punctuation\">.</span><span class=\"token function\">inputPurchaseAmount</span><span class=\"token punctuation\">(</span>inputPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> inputPrice<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 이미 비동기 함수인 <code class=\"language-text\">awaut</code> 을 사용하고 있다는 점을 간과했다. <code class=\"language-text\">await</code> 을 사용하기 때문에 <code class=\"language-text\">callback</code> 까지 사용한다면 두번의 과정으로 입력값을 처리하는 것이었고, 괜히 함수를 의미없게 깊게 만드는 것 같았다. 이러한 이유로 <code class=\"language-text\">callback</code> 대신 입력받은 값을 return만 하는 것으로 함수를 수정하였다.</p>\n<h3 id=\"-도메인-단위-테스트-하기\" style=\"position:relative;\"><a href=\"#-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%98%EA%B8%B0\" aria-label=\" 도메인 단위 테스트 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 도메인 단위 테스트 하기</h3>\n<p>이번 3주차 미션에서 중요한 요구사항으로 도메인 단위로 테스트 케이스를 작성하는 것이었다. 예시로 <code class=\"language-text\">LottoTest</code>라는 테스트 케이스가 주어지고 이걸 이용해서 다른 도메인의 케이스도 작성하는 것이었는데, 우선 도메인 단위로 테스트하는 것의 중요성에 대해 알고싶었다. 내 개인적인 생각으로는 내가 직접 구현한 기능을 세부적으로 테스트 해야 많은 예외 사항을 체크해 최종적으로 오류 발생률을 줄일 수 있을 것 같았다.</p>\n<p>더 조사해보니, 많은 테스트 케이스를 실행하면서 새로운 기능을 추가하거나 버그를 잡는 것에 있어서 유용하고, 협업을 하는 과정에서도 여러 테스트를 공유하며 의사소통이 활발해진다고 한다.</p>\n<p>내가 작성한 도메인만 6개가 되었기 때문에 6개의 클래스를 테스트할 수 있는 테스트 파일을 만들고, 세부적인 메서드를 모두 체크할 수 있게끔 작성하였다. 결과적으로 총 21개의 테스트를 진행하였고, 디테일한 코드까지 실행해볼 수 있어서 코드를 관리하는데 있어서 유용했다. 협업을 할 때 정말 필요한 기술을 미리 작성해보면서, 능동적인 코드를 생성한 것 같아 뿌듯했다.\n<img src=\"/51aa5d26ab43e72a593f1eb33d22e307/5.png\" alt=\"\"></p>\n<h2 id=\"-리팩토링\" style=\"position:relative;\"><a href=\"#-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-label=\" 리팩토링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 리팩토링</h2>\n<h3 id=\"️-props-사용하기\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-props-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"️ props 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ props 사용하기</h3>\n<p>보통 인자로 값을 받을 때 변수를 많이 사용한다. 하지만 <code class=\"language-text\">Rank</code> 와 같이 3개 이상의 값을 통해서 결과를 도출해야 하는 함수를 만들 때 인자의 수가 너무 많은 것이 가독성 부분에서 좋아보이지 않았기 때문에 <code class=\"language-text\">객체</code> 를 인자로 넘겨주었다. 그 객체가 바로 <code class=\"language-text\">props</code> 이다.</p>\n<p>props 안에 로또, 당첨 번호, 보너스 번호를 객체 형태로 넘겨주니 인자는 한개로 줄어들어서 모듈화가 되고, 보기에 편해졌지만, 컨트롤러에서 초기화할 때 객체 안에 상당히 긴 코드가 작성되어 코드가 길어지는 단점이 생겼다. 그래도 3개의 인자를 받는 것보다는 더 나은 방법이라 생각이 든다.</p>\n<h3 id=\"️-if--switch-말고-다른-방법은\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-if--switch-%EB%A7%90%EA%B3%A0-%EB%8B%A4%EB%A5%B8-%EB%B0%A9%EB%B2%95%EC%9D%80\" aria-label=\"️ if  switch 말고 다른 방법은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ if / switch 말고 다른 방법은?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sameNumberCount <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sameNumberCount <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sameNumberCount <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">/* 보너스 번호가 포함된 경우)**/</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sameNumberCount <span class=\"token operator\">===</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sameNumberCount <span class=\"token operator\">===</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>당첨 번호와 로또 번호를 비교하면서 같은 숫자의 개수를 카운트할 때, if문을 사용했었다. 흠… 솔직히 직관적으로 이해하기에는 편리하나 굳이 <code class=\"language-text\">sameNumberCount</code> 를 5번까지 쓰면서 코드를 길게까지 하는건 좀 아닌 것 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#getSameNumberCount</span><span class=\"token punctuation\">(</span>lotto<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>winningNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lotto<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>bonusNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>음…그나마 변수가 계속 중복되는 것이 보기 안좋아서 <code class=\"language-text\">switch</code> 문으로 변경했지만 이 역시도 함수의 길이가 너무 길어지고 숫자를 하드코딩 하는 점이 상당히 마음에 들지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#getSameNumberCount</span><span class=\"token punctuation\">(</span>lotto<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">.</span>winningNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rankMapping <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>fifthPlace<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>fourthPlace<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">:</span> lotto<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>bonusNumber<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>secondPlace <span class=\"token operator\">:</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>thirdPlace<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>firstPlace<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> rankMapping<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>함수를 사용해볼까…하다가 props를 사용했던 점을 활용해보고 싶었다. 객체를 만들어서 후에 필요한 값만 쏙쏙 빼온다면 뭔가 코드가 좀 간결해질 것 같았다. 엄청 마음에 들지는 않지만 if문으로 남발했던 코드보다는 나아진 것 같다.</p>\n<h2 id=\"-개선해야할-점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\" aria-label=\" 개선해야할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 개선해야할 점</h2>\n<p>사실 앞에 비동기 테스트 코드 관련해서 너무 많은 시간을 쏟았다. 결국 혼자 고민하고 해결하는 과정에서 얻은 부분이 많았지만, 주어진 코드를 꼼꼼하게 분석하지 못한 것도 어느 정도 영향이 컸던 것 같다. 이런 경우가 2번, 3번 생긴다면 시간적으로 많이 손해를 볼 것 같아서 앞으로 주어진 코드를 확인할 때, 요구사항 분석을 잘 해야할 것 같다.</p>\n<p>또한 다른 분의 코드를 살펴보니 <code class=\"language-text\">static</code>을 자주 사용하는 것을 볼 수 있었다. 특히 <code class=\"language-text\">InputView</code> 와 <code class=\"language-text\">OutputView</code> 를 static으로 묶고 다른 파일에서 끌어오는 방법인 것 같은데, 4주차 미션 시작 전에는 이 부분에 대해서 조금 공부를 하고 필요하다면 나도 접목시켜보고 싶다.</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 마무리</h2>\n<p>이번 주차 한줄평을 다음과 같이 할 수 있을 것 같다.</p>\n<p><strong>부족한 부분을 채우면서 성장할 수 있었다.</strong></p>\n<p>2주차 미션을 진행할 때에는 끈임없는 의문을 갖고 새로운 기술에 대해 탐구하는 과정이었다면 이번 3주차 미션에서는 의문을 확신으로 바꾸고자 노력하였다. 지금까지 프리코스를 진행하면서 ‘다른 사람들은 이렇게 작성하는데 나는 이렇게 작성하는 것이 맞다고 생각하는데…이게 아닌가?’ 라는 생각을 정말 많이 했다.</p>\n<p>코드 리뷰를 받으며 스스로 부족한 점은 채우려고 노력하였고, 누군가에게 자신있게 기술 사용 이유에 대해 설명할 수 있다면 기존에 내가 작성한 코드를 밀고 나갔다. 수동적으로 받아들이기만 한 것이 아닌 기존 나의 코드에 필요한 점만 채워나가니 전보다 더 발전된 코드를 작성할 수 있었던 것 같다.</p>\n<h2 id=\"-내가-작성한-코드\" style=\"position:relative;\"><a href=\"#-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\" 내가 작성한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧑🏻‍💻 내가 작성한 코드</h2>\n<p><img src=\"/05f20ecfbb705e17981ecf1f992df5ea/6.png\" alt=\"\"></p>\n<p>👉 <a href=\"https://github.com/woowacourse-precourse/javascript-lotto-6/pull/1\">우아한테크코스 3주차 미션_로또</a></p>\n<p>코드 리뷰는 언제든 환영입니다! 🙂</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%A3%BC%EC%A0%9C\">🎯 주제</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EA%B3%A0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%88%98%EC%A0%95\">🎯 회고를 통한 수정</a></p>\n<ul>\n<li><a href=\"#-static%EC%9D%84-%EA%B8%B0%EB%8A%A5%EB%B3%84%EB%A1%9C-%EB%82%98%EB%88%A0%EB%B3%B4%EC%9E%90\">👍🏻 Static을 기능별로 나눠보자</a></li>\n<li><a href=\"#-%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%A4%80%EC%9D%84-%EC%A0%95%ED%95%B4%EB%B3%B4%EC%9E%90\">👍🏻 반복문 사용 기준을 정해보자</a></li>\n<li><a href=\"#-%EA%B8%B0%EB%8A%A5%EC%9D%98-%ED%9D%90%EB%A6%84%EB%8C%80%EB%A1%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">👍🏻 기능의 흐름대로 코드 작성하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\">🎯 문제 요구 사항</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\">🎯 기능 목록 작성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\">🎯 고난 그리고 배움</a></p>\n<ul>\n<li><a href=\"#-%EB%98%90-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%EC%97%90%EC%84%9C-%EC%98%A4%EB%A5%98\">❌ 또 예외 처리에서 오류…?</a></li>\n<li><a href=\"#-rank-%EC%98%A4%EB%A5%98\">❌ Rank 오류</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\">🎯 새로 배운 내용</a></p>\n<ul>\n<li><a href=\"#-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\">🔖 객체 지향적인 코드 작성</a></li>\n<li><a href=\"#-%EB%B9%84%EB%8F%99%EA%B8%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-input-%EB%B0%9B%EA%B8%B0\">🔖 비동기를 사용해 Input 받기</a></li>\n<li><a href=\"#-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%98%EA%B8%B0\">🔖 도메인 단위 테스트 하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\">🎯 리팩토링</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-props-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">✏️ props 사용하기</a></li>\n<li><a href=\"#%EF%B8%8F-if--switch-%EB%A7%90%EA%B3%A0-%EB%8B%A4%EB%A5%B8-%EB%B0%A9%EB%B2%95%EC%9D%80\">✏️ if / switch 말고 다른 방법은?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\">🎯 개선해야할 점</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🎯 마무리</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C\">🧑🏻‍💻 내가 작성한 코드</a></p>\n</li>\n</ul>\n</div>","excerpt":"이 글은 우아한테크코스 6기 프리코스 3주차 미션 종료 직후 작성된 회고 글입니다. 스스로 고민한 내용이 글에 많이 포함되어 있기 때문에 본인 코드에 대해 충분히 고민한 후 읽으시는 것을 추천합니다. 🎯 주제 이번 3주차 미션은  게임이었다. 확실히 이전 미션들보다 점점 요구사항도 많아지고 로직이 복잡해져서 어려움을 많이 느꼈던 것 같다. 특히 2주차 미션 후 코드리뷰를 통해 채찍을 많이 받았는데, 이를 바탕으로 3주차에는 더 성장한 모습을 느끼고 싶었다. 🎯 회고를 통한 수정 👍🏻 Static을 기능별로 나눠보자 사실 이 부분은 다른 분들의 코드를 살펴보다 발견한 점이었는데, 상당히 인상깊어서 한번 사용해봐야겠다는 생각을 했다. 기존에는  파일 안에 에러메세지, 매직 넘버, 출력 메세지를 다 넣고 사용했었다. 하지만 다른 객체에서 import할 때에도 코드가 길어지고 정확한 의미가 담기기에는 역부족이었다. 그래서 기능별로 파일을 만들어서 가독성을 높이는데 힘을 쏟았다. 이렇게 사용…","frontmatter":{"date":"November 09, 2023","title":"우아한테크코스 6기 프리코스 - 3주차 회고 (로또)","categories":"우아한테크코스","author":"재오","emoji":"🛸"},"fields":{"slug":"/Woowa3/"}},"next":{"id":"54fb3dd2-ebac-58fc-8ba7-2de38efe1953","html":"<p><em>이 글은 우아한테크코스 6기 프리코스 1주차 미션 종료 직후 작성된 회고 글입니다.</em></p>\n<p><em>스스로 고민한 내용이 글에 많이 포함되어 있기 때문에 본인 코드에 대해 충분히 고민한 후 읽으시는 것을 추천합니다.</em></p>\n<hr>\n<h2 id=\"-주제\" style=\"position:relative;\"><a href=\"#-%EC%A3%BC%EC%A0%9C\" aria-label=\" 주제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 주제</h2>\n<p>이번 2주차 미션의 주제는 <code class=\"language-text\">레이싱 게임</code> 이었다.</p>\n<p>1주차 <code class=\"language-text\">숫자 야구 게임</code> 보다는 확실히 고려해야할 사항이 많았지만 해결하지 못할 정도의 어려움이 있는 주제는 아니었던 것 같았다. 최대한 기능 구현을 빠르게하고 사용해보지 못한 기술을 접목시키거나 리팩토링에 많은 힘을 쏟고 싶었다.</p>\n<h2 id=\"-회고를-통한-수정\" style=\"position:relative;\"><a href=\"#-%ED%9A%8C%EA%B3%A0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%88%98%EC%A0%95\" aria-label=\" 회고를 통한 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 회고를 통한 수정</h2>\n<h3 id=\"-중복을-최소화-하자\" style=\"position:relative;\"><a href=\"#-%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94-%ED%95%98%EC%9E%90\" aria-label=\" 중복을 최소화 하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 중복을 최소화 하자!</h3>\n<p>시작하기에 앞서 1주차 미션에 대한 공통 피드백을 읽어보았다. 유익한 정보들이 많았으나 가장 눈에 띄었던 것은 <code class=\"language-text\">중복을 최소화 하자</code>였다.</p>\n<p>어쩌면 당연한 설명이었지만 변수명을 명확하게 작성하기 위해 구체적으로 적으려 하다보니 저런 오류가 발생했던 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">const</span> RandomNumberGenerator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">generateRandomNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> RandomNumberGenerator <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>1주차에서 작성했던 랜덤 숫자를 생성하는 메서드명을 의미가 중복되지 않게 <code class=\"language-text\">generate()</code>로 변경하였다. 훨씬 깔끔해진 느낌이 든다.</p>\n<h3 id=\"-기능을-분리하자\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EB%B6%84%EB%A6%AC%ED%95%98%EC%9E%90\" aria-label=\" 기능을 분리하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 기능을 분리하자!</h3>\n<p>사실 1주차 미션에서 애를 먹었던 부분이 바로 <code class=\"language-text\">상수화한 파일을 어디로 분리를 해야하는가</code>였다. 주변 친구들한테도 많이 물어보고 인터넷을 검색했을 때에는 상수화한 파일은 <code class=\"language-text\">domain</code> 에서 관리가 되어야 한다고 했고, 실제로도 <code class=\"language-text\">domain</code> 안에 작성하였다. 하지만 상수를 관리하는 파일이 <code class=\"language-text\">domain</code> 안에 있다보니 파일을 관리하기 힘들어서 이번 2주차에서는 <code class=\"language-text\">static</code>이라는 파일로 관리하였다.</p>\n<p>또한 <code class=\"language-text\">Input</code>의 유효성 검사를 <code class=\"language-text\">controller</code>에서 진행했지만 유효성 검사는 충분히 <code class=\"language-text\">View</code> 혹은 <code class=\"language-text\">domain</code>에서 가능할 것 같다고 판단했다. 너무 많은 기능을 <code class=\"language-text\">controller</code>에 위임하는 것 같아서 <code class=\"language-text\">InputView</code>에서 입력값을 받는 즉시 유효성 검사를 하도록 변경하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">async</span> <span class=\"token function\">readCarsName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">readLineAsync</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PRINT_MESSAGE</span><span class=\"token punctuation\">.</span>inputNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      InputValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateCarName</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"-if보다는-trycatch-사용하기\" style=\"position:relative;\"><a href=\"#-if%EB%B3%B4%EB%8B%A4%EB%8A%94-trycatch-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\" if보다는 trycatch 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👍🏻 if()보다는 try…catch 사용하기</h3>\n<p>위에 있는 코드를 보더라도 유효성 검사를 할 때 <code class=\"language-text\">try...catch</code>문을 사용했다. <code class=\"language-text\">try...catch</code>문은 예외 처리를 효과적으로 할 수 있고 예외를 적절히 처리할 수 있게 해준다. <code class=\"language-text\">if()</code>문을 사용하면 예외를 적절하게 처리하지 못하고 예외가 그대로 전파될 수 있으므로 예외 처리를 제대로 하지 않는 경우에는 예기치 않은 동작을 유발할 수 있다.</p>\n<p><code class=\"language-text\">try...catch</code>문을 비동기에서 사용한다면 <code class=\"language-text\">Promise</code> 내부에서 발생한 예외를 즉시 처리할 수 있기 때문에 더 좋다.</p>\n<h2 id=\"-문제-요구-사항\" style=\"position:relative;\"><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\" aria-label=\" 문제 요구 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 문제 요구 사항</h2>\n<p><img src=\"/462e0720644bffd7b67283d0992ad7d9/1.png\" alt=\"\"></p>\n<p>2주차 미션부터 <code class=\"language-text\">추가된 요구 사항</code>이 새로 생겼다. 무엇보다 가장 눈에 띄었던 부분은 <code class=\"language-text\">Jest</code>를 이용한 테스트 코드 작성이었다.</p>\n<p>최근들어서 <code class=\"language-text\">TDD</code>의 중요성이 강조되기 때문에, 이번 기회에 테스트 케이스를 직접 구현해보며 질적인 측면에서 내 코드를 개선해보고 싶었다. 코딩테스트 문제를 풀더라도 나는 항상 코드를 제출만 하는 입장이었지, 테스트하는 것은 나와 거리가 멀다고 생각했었기 때문에, 조금 능동적으로 코드를 작성할 수 있을 것 같았다.</p>\n<h2 id=\"-기능-목록-작성\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\" aria-label=\" 기능 목록 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 기능 목록 작성</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 기능 목록\n\n- [x] 자동차 이름 입력 기능\n- [x] 자동차 이름 입력값 유효성 검사 기능\n- [x] 시도할 횟수 입력 기능\n- [x] 시도할 횟수 입력값 유효성 검사 기능\n- [x] 랜덤값을 이용한 각 횟수마다 전진여부 출력 기능\n- [x] 최종 우승자 계산 기능</code></pre></div>\n<p>이번 기능 목록을 작성할 때에는 전보다 <code class=\"language-text\">데이터</code>를 어떻게 이용할 것인가에 대해 고민을 많이 했다. 아래에서 조금 더 자세히 설명하겠다.</p>\n<h2 id=\"-고난-그리고-배움\" style=\"position:relative;\"><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\" aria-label=\" 고난 그리고 배움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 고난 그리고 배움</h2>\n<h3 id=\"-기능-구현의-방향성-수정\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%EC%9D%98-%EB%B0%A9%ED%96%A5%EC%84%B1-%EC%88%98%EC%A0%95\" aria-label=\" 기능 구현의 방향성 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 기능 구현의 방향성 수정</h3>\n<p>기존에는 자동차 이름을 담은 배열 하나, 이름의 개수만큼 랜덤의 숫자가 생성되어 있는 배열 하나 이렇게 생성하려고 했다. 하지만 이렇게 큰 배열 두개를 모두 관리할 수 있는 방법에 대해 다시 고민하게 되었다. 못하지는 않을 것 같긴 한데 흠…로직이 너무 꼬일 것 같았다.</p>\n<p>➡️ 처음 입력값을 받는 <code class=\"language-text\">자동차 이름</code>을 하나의 인스턴스로 생성하고 반복문을 통해 직접 랜덤으로 생성된 숫자와 비교해가며 실시간으로 거리를 증가시키고 출력했다. 훨씬 로직이 전보다 간결해졌다.</p>\n<p>처음 기능 목록을 작성하고 로직을 작성하는 것의 중요성을 다시한번 느낄 수 있었다. 틀을 구체화하여 시간을 많이 투자하는 것이 전혀 아깝지 않은 부분이 바로 이 로직을 작성하는 부분 같다.</p>\n<h3 id=\"-왜-최종-우승자-이름이-안나오지\" style=\"position:relative;\"><a href=\"#-%EC%99%9C-%EC%B5%9C%EC%A2%85-%EC%9A%B0%EC%8A%B9%EC%9E%90-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%95%88%EB%82%98%EC%98%A4%EC%A7%80\" aria-label=\" 왜 최종 우승자 이름이 안나오지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 왜 최종 우승자 이름이 안나오지?</h3>\n<p><img src=\"/2c8f764147f46c18f85ebcaf4a7e3087/2.png\" alt=\"\"></p>\n<p>이번에는 <code class=\"language-text\">index.js</code>에서 디버깅을 할 수 있었다. 하지만 이상하게 최종 우승자 출력이 되지 않았다. 그 어떤 에러도 발생하지 않고 그냥 출력값이 없었다. 코드에서 <code class=\"language-text\">undefined</code>를 받는 것이 분명했다.</p>\n<p>천천히 <code class=\"language-text\">우승자를 출력하는</code>코드를 하나하나 분석해보니 아래에서 문제를 발견할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 최종 리팩토링을 하기 전 코드</span>\n\n<span class=\"token comment\">// before</span>\n<span class=\"token keyword\">let</span> finalDistance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfinalDistance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#cars<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  car<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentDistance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> maxDistance <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>finalDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token keyword\">let</span> finalDistance <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#cars<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  finalDistance<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentDistance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> maxDistance <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>finalDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사실 처음에 왜 저렇게 작성한 지 이해가 안간다…(졸면서 코드를 작성했나..?) 물론 최종 코드와 위 코드는 많이 다르지만 배열을 이미 선언해두고 <code class=\"language-text\">push</code>를 하는게 아닌 배열에 <code class=\"language-text\">forEach</code>로 순회한 값을 통째로 넣어버렸다. 많은 시간을 쓰며 고민한 부분은 아니었지만 아주 좋은 경험이었다.</p>\n<h3 id=\"-테스트-케이스에서의-오류-난-분명-예외-처리까지-했는데\" style=\"position:relative;\"><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%A4%EB%A5%98-%EB%82%9C-%EB%B6%84%EB%AA%85-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%EA%B9%8C%EC%A7%80-%ED%96%88%EB%8A%94%EB%8D%B0\" aria-label=\" 테스트 케이스에서의 오류 난 분명 예외 처리까지 했는데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 테스트 케이스에서의 오류… 난 분명 예외 처리까지 했는데..?</h3>\n<p><img src=\"/f89f8def876025e8549c67982043d19e/3.png\" alt=\"\"></p>\n<p><img src=\"/6c73010f7c378d858a33abf74e22c81e/4.png\" alt=\"\"></p>\n<p>기능 구현을 마치고 테스트를 한번 돌렸는데 에러가 발생했다. 지난주 에러때문에 고생했던 장면이 스쳐지나갔다. 분명 지난주에 완벽히 에러에 대해 파악했다고 생각했는데 무슨 에러인지 너무 궁금했다. 발생한 에러가 모두 <code class=\"language-text\">예외 처리</code>와 관련되어있음을 확인하고 <code class=\"language-text\">InputValidator</code> 코드를 살펴봤다. 무조건 이번에 처음 사용한 <code class=\"language-text\">try...catch</code>와 관련이 있을 것이라고 확신했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">readCarsName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">readLineAsync</span><span class=\"token punctuation\">(</span>PrintMessage<span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT_NAMES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      InputValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateCarName</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Console.print(error)</code> 를 주의깊게 봤다. 흠… 그냥 에러를 출력만 해주고 에러를 처리한다는 느낌이 들지 않았다. 그래서 에러가 발생하면 해당 에러를 던지는 <code class=\"language-text\">throw new Error(error)</code> 를 적어주었다.\n<img src=\"/3b63da078966e83618b2a15080a87df7/5.png\" alt=\"\"></p>\n<p>둘의 차이는 전자는 콘솔창에 찍어보기는 하지만 프로그램을 종료시키는 역할을 하는 것은 아니다. 하지만 후자는 에러가 발견된 즉시 바로 프로그램을 중단시킨다. 프로그램을 보다 안정적으로 종료하는데 사용이 된다고 한다…메모!</p>\n<h3 id=\"-jest에서는-그냥-toequal만-쓰면-안되나\" style=\"position:relative;\"><a href=\"#-jest%EC%97%90%EC%84%9C%EB%8A%94-%EA%B7%B8%EB%83%A5-toequal%EB%A7%8C-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%98%EB%82%98\" aria-label=\" jest에서는 그냥 toequal만 쓰면 안되나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ Jest에서는 그냥 toEqual만 쓰면 안되나..?</h3>\n<p>뒤에 <code class=\"language-text\">🎯 새로 배운 내용</code>에서 설명을 하겠지만 <code class=\"language-text\">Jest</code>를 공부하면서 계속 의문이 들었던 점은 ‘그 많은 <code class=\"language-text\">matcher</code>를 사용할 일이 있을까?‘였다.</p>\n<p><code class=\"language-text\">toEqul</code>, <code class=\"language-text\">toBe</code>만 쓴다면 기대하는 값과 결과값만 비교해서 테스트 코드를 작성할 수 있을 것 같았다. 하지만 여기서 위기가 발생했다.</p>\n<p><img src=\"/af7e6c483d1ce54ef7068cc009798720/6.png\" alt=\"\"></p>\n<p>혹시나 해서 Jest 공식문서와 블로그 글을 찾아봤다.</p>\n<blockquote>\n<p>“만약 **<code class=\"language-text\">toBe</code>**나 **<code class=\"language-text\">toEqual</code>**과 같은 일반적인 Jest 매처를 사용하면 스파이 함수의 호출 여부나 호출된 매개변수를 확인할 수 없습니다. 이러한 일반적인 매처는 주로 반환값이나 객체의 값에 대한 비교에 사용됩니다.”</p>\n</blockquote>\n<p>한마디로 함수를 호출하는 것이 아닌 일반적인 값을 비교할 때에만 <code class=\"language-text\">toBe</code> 와 <code class=\"language-text\">toEqual</code>을 사용할 수 있는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> logSpy <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">spyOn</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">,</span> <span class=\"token string\">'print'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'우승자 출력 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> winners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'pobi'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pobi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'june'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pobi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'june'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wang'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> expectedResults <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'최종 우승자 : pobi'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'최종 우승자 : pobi, june'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'최종 우승자 : pobi, june, wang'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  winners<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">winners<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    OutputView<span class=\"token punctuation\">.</span><span class=\"token function\">printWinnerMessage</span><span class=\"token punctuation\">(</span>winners<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>logSpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span>expectedResults<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 예시로 한번 살펴보면 <code class=\"language-text\">forEach()</code>함수로 출력함수를 호출한다. <code class=\"language-text\">logSpy</code>는 코드 내에서 <code class=\"language-text\">OutputView.printWinnerMessage(winners)</code>함수 내에서 print 에 사용되는 함수의 호출을 가로채는 스파이이다. <code class=\"language-text\">expect(logSpy).toHaveBeenCalledWith(expectedResults[index])</code>는 <code class=\"language-text\">logSpy</code> 가 <code class=\"language-text\">expectedResults</code> 배열에서 index에 해당하는 위치에 있는 예상 결과 메세지와 함께 호출되었는지 확인한다.</p>\n<p>위와 같이 정해진 값이 아닌 함수의 호출여부를 파악하기 위해서는 <code class=\"language-text\">toEqaul()</code>을 사용할 수 없는 것이다.</p>\n<p>여기서 또 하나의 의문이 들었다. 공식문서를 살펴보면 <code class=\"language-text\">toHaveBeenCalledWith()</code>는 예상 메시지의 결과가 호출되었는지를 확인한다고 쓰여져있다. 호출이 되는 것을 당연스럽게 ‘어떤 인자와 함께 호출이 된다’로 착각을 하고 예상 결과가 인자로 들어가야만 하는 줄 알았다. 여기서 호출은 결과값을 의미하기 때문에 <code class=\"language-text\">expectedResults</code>배열에 있는 값을 출력하느냐를 확인하는 것을 의미한다.</p>\n<h2 id=\"-새로-배운-내용\" style=\"position:relative;\"><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 새로 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 새로 배운 내용</h2>\n<h3 id=\"-jest\" style=\"position:relative;\"><a href=\"#-jest\" aria-label=\" jest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 Jest</h3>\n<p>우선 우아한테크코스에서 제공해준 ApplicationTest.js 파일을 분석하며 작동원리에 대해 알고싶었다. <code class=\"language-text\">mock</code>, <code class=\"language-text\">jest.fn()</code>, <code class=\"language-text\">spyOn()</code> 등 처음 보는 함수가 많았지만 <code class=\"language-text\">describe</code> , <code class=\"language-text\">test</code> , <code class=\"language-text\">expect</code>와 같은 키워드와 우아한테크코스 API를 비교하면서 기본적인 작동 원리에 대해서는 파악할 수 있었다.</p>\n<p>처음 보는 함수에 대해서는 Jest 공식 문서를 살펴보면서 기능에 대해 이해하였습니다. 공식 문서에는 상당히 많은 양의 내장함수들이 존재하였으나 주어진 함수에 대해서만 우선적으로 공부하고, 직접 Input값과 Output에 관한 테스트 케이스에 대해서는 필요한 함수를 공식 문서에서 찾아가면서 적용해보았습니다.</p>\n<p>이 블로그에 그 내용 모두 적을 수 없어서 자세한 내용은 직접 정리한 블로그 글을 참고하면 된다.</p>\n<p>👉 <a href=\"https://velog.io/@jaeochoiii/%EC%9A%B0%EC%95%84%ED%95%9C%ED%85%8C%ED%81%AC%EC%BD%94%EC%8A%A4-6%EA%B8%B0-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-Jest%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\">Jest를 활용하여 테스트코드 작성하기</a></p>\n<h2 id=\"-리팩토링\" style=\"position:relative;\"><a href=\"#-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\" aria-label=\" 리팩토링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 리팩토링</h2>\n<h3 id=\"️-airbnb-styling-적용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-airbnb-styling-%EC%A0%81%EC%9A%A9\" aria-label=\"️ airbnb styling 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ airbnb styling 적용</h3>\n<p>같이 프리코스를 준비하는 다른 분들의 회고나 블로그 글을 보면 <code class=\"language-text\">airbnb styling</code>을 많이 적용하셨다. 사실 airbnb style guide에 대해서는 프리코스가 시작되기 직전에 개설된 디스코드에서 처음 봤다.</p>\n<p>뭔가 흥미로운 정보가 많을 것 같아서 리팩토링을 하는 과정에서 참고했다. 많은 내용을 담고 있지만 가장 눈에 띄는 부분이 있었다.</p>\n<blockquote>\n<p>상수가 객체인 경우 내부 프로퍼티 까지 상수로 적용하는 것은 불필요하며, 이렇게 하는 것이 아무 의미 없기 때문에 소문자로 사용하는 것을 지향한다</p>\n</blockquote>\n<p>지금까지는 유지, 보수를 하기 위해서는 상수를 대문자로 눈에 띄게 표현하는 것이 좋다고 잘못 알았던 것이다. 생각해보니 이미 객체명을 대문자로 표현했으면 프로퍼티까지 대문자로 표현할 이유가 없었다. 고개를 끄덕거리며 모든 상수 파일 프로퍼티를 수정하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">const</span> StaticNumber <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">NAME_LENGTH_LIMIT</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">CAN_MOVE_CONDITION</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATIC_NUMBER</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">nameLengthLimit</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">canMoveCondition</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"️-자바스크립트-고차함수-적용\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9\" aria-label=\"️ 자바스크립트 고차함수 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 자바스크립트 고차함수 적용</h3>\n<p>지난번과 마찬가지로 최대한 <code class=\"language-text\">for()</code> 반복문 사용을 지양하고 <code class=\"language-text\">forEach()</code>를 사용하려고 노력했다. 특히 배열로 두개의 값을 받아올 때 보통 인덱스로 값을 받아왔는데, 인덱스 내용은 나만 알 수 있고, 처음 코드를 보는 사람은 예측이 힘들 것 같았다.</p>\n<p>이것을 해결할 수 있는 방법이 바로 <code class=\"language-text\">구조분해 할당</code> 이었고, 실제로 이를 적용해보니 가독성이 매우 좋아진 것을 확인할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bad</span>\n<span class=\"token function\">printMoveMarking</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">carMoveState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  carMoveState<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>car<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PRINT_MESSAGE</span><span class=\"token punctuation\">.</span>moveMarking<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token function\">printMoveMarking</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">carMoveState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  carMoveState<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>carName<span class=\"token punctuation\">,</span> currentPosition<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>carName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PRINT_MESSAGE</span><span class=\"token punctuation\">.</span>moveMarking<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>currentPosition<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"️-controller에게-너무-과분한-것을-맡기지-말자\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-controller%EC%97%90%EA%B2%8C-%EB%84%88%EB%AC%B4-%EA%B3%BC%EB%B6%84%ED%95%9C-%EA%B2%83%EC%9D%84-%EB%A7%A1%EA%B8%B0%EC%A7%80-%EB%A7%90%EC%9E%90\" aria-label=\"️ controller에게 너무 과분한 것을 맡기지 말자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ controller에게 너무 과분한 것을 맡기지 말자</h3>\n<p>이번 주차에서는 MVC 패턴, 특히 <code class=\"language-text\">Model</code> 작성에 큰 시간을 할애했다. 코드를 작성하는 동안 구현하고자 하는 기능이 <code class=\"language-text\">domain</code>에 들어가야 하는가? controller에 들어가야 하는가?에 대해 오랫동안 고민했다. 어떤 글을 보더라도 ‘Model은 데이터 관련 값을, View는 입력값과 출력값을, 그리고 Controller는그 둘을 연결해주는 역할’ 이라고만 명시되어 있을 뿐, 로직을 구현하는 것에 있어서 정답은 찾을 수 없었다.</p>\n<p>처음에는 데이터의 속성만 가져오는 작업을 domain에서 했지만 이렇게 하니, <code class=\"language-text\">controller</code>에서는 <code class=\"language-text\">domain</code>과 <code class=\"language-text\">view</code>를 연결하는 작업 외에도 데이터를 가공까지 하게되면서 클래스가 복잡해졌다. 정확한 정답은 없지만 <code class=\"language-text\">controller</code>의 부담을 최대한 덜어주고 데이터와 관련된 모든 작업을 <code class=\"language-text\">domain</code>에서 하고, 대신 <code class=\"language-text\">domain</code>을 최대한 세분화하였다.</p>\n<p>기존의 데이터의 속성을 가져오는 클래스를 그대로 두고, 추가적으로 그 속성을 가공하여 얻을 수 있는 데이터 값들의 집합인 클래스를 하나 더 생성하였다. 이미 <code class=\"language-text\">domain</code>과 <code class=\"language-text\">controller</code> 코드가 작성된 상태여서 기능을 분리하는 과정이 복잡하였지만 결과적으로는 훨씬 가독성도 좋고 <code class=\"language-text\">controller</code>의 코드도 간결해졌다.</p>\n<h3 id=\"️-데이터라고-다-도메인은-아니야\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9D%BC%EA%B3%A0-%EB%8B%A4-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%80-%EC%95%84%EB%8B%88%EC%95%BC\" aria-label=\"️ 데이터라고 다 도메인은 아니야 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 데이터라고 다 도메인은 아니야</h3>\n<p>이 부분은 거의 제출 마감날에 코드 리팩토링하는 과정에서 발견하였다.</p>\n<p><code class=\"language-text\">tries</code>라는 변수를 원래 도메인에서 관리하고자 하였지만 domain 명이 Cars인데 시도 횟수를 여기서 관리하는 것이 맞는가에 대한 의문이 들었다. 사실 반복문 한번에만 쓰일 변수이기 때문에 <code class=\"language-text\">domain</code>에서 쓰일 이유가 없는 것 같아 <code class=\"language-text\">controller</code> private 필드로 위치를 옮겼다.</p>\n<h2 id=\"-개선해야할-점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\" aria-label=\" 개선해야할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 개선해야할 점</h2>\n<p>우연히 이번 우아한테크코스를 통해서 알게된 분이 작성한 클래스 관련 글을 보았는데, domain이나 클래스 내부에서는 <code class=\"language-text\">getter()</code> <code class=\"language-text\">setter()</code> 사용을 최대한 지양해야 한다고 쓰여져 있었다. 다른 사람의 글을 읽어봐도 <code class=\"language-text\">getter()</code> <code class=\"language-text\">setter()</code>은 컨트롤러에 의해 타의적으로만 이용이 가능하며, 이는 협업을 추구하는 객체지향과 거리가 멀어 결국에는 캡슐화를 어긴다고 쓰여져 있었다. 지금까지 매번 <code class=\"language-text\">get()</code>과 <code class=\"language-text\">set()</code>으로 데이터를 받아왔기 때문에 이 점은 상당히 충격이었다. 아직은 낯선 방법이고, 지금 바로 완벽하게 이해해서 사용할 수는 없겠지만 앞으로 캡슐화와 객체 지향에 신경써서 코드를 작성해야할 것 같다.</p>\n<h2 id=\"-마무리\" style=\"position:relative;\"><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 마무리</h2>\n<p>이번 주차 한줄평을 다음과 같이 할 수 있을 것 같다.</p>\n<p><strong>의문을 갖고 공부를 하자</strong></p>\n<p>이번 주차에서는 스스로에게 물음표를 많이 던졌던 것 같다. ‘이건 왜 여기서 쓰는거지?’ ‘이게 왜 이 파일에 들어가야 하지?’ 스스로 생각을 많이 하다보니 궁금한게 많아지고 그것을 서칭하면서 코드를 작성하다보니 시간도 많이 소요됐다. 하지만 그만큼 배울 수 있는 것이 많아졌고, 무엇보다 안주하지 않으려는 모습을 볼 수 있어서 값졌다.</p>\n<p>프리코스의 절반이 지났다. 힘들어도 조금만 힘내서 한다면 지금보다 더 많이 성장할 수 있을 것이다.</p>\n<p>이번 3주차 미션도 많은 깨달음을 얻을 수 있는 한 주가 되기를 바란다.ㅎㅎ</p>\n<h2 id=\"-내가-작성한-코드\" style=\"position:relative;\"><a href=\"#-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\" 내가 작성한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧑🏻‍💻 내가 작성한 코드</h2>\n<p><img src=\"/29beaf67699d39776e1a270953e21deb/7.png\" alt=\"\"></p>\n<p>👉 <a href=\"https://github.com/woowacourse-precourse/javascript-racingcar-6/pull/2\">우아한테크코스 2주차 미션_자동차 경주</a></p>\n<p>코드 리뷰는 언제든 환영입니다! 🙂</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%A3%BC%EC%A0%9C\">🎯 주제</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EA%B3%A0%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%88%98%EC%A0%95\">🎯 회고를 통한 수정</a></p>\n<ul>\n<li><a href=\"#-%EC%A4%91%EB%B3%B5%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94-%ED%95%98%EC%9E%90\">👍🏻 중복을 최소화 하자!</a></li>\n<li><a href=\"#-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EB%B6%84%EB%A6%AC%ED%95%98%EC%9E%90\">👍🏻 기능을 분리하자!</a></li>\n<li><a href=\"#-if%EB%B3%B4%EB%8B%A4%EB%8A%94-trycatch-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">👍🏻 if()보다는 try…catch 사용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\">🎯 문제 요구 사항</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\">🎯 기능 목록 작성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\">🎯 고난 그리고 배움</a></p>\n<ul>\n<li><a href=\"#-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%EC%9D%98-%EB%B0%A9%ED%96%A5%EC%84%B1-%EC%88%98%EC%A0%95\">❌ 기능 구현의 방향성 수정</a></li>\n<li><a href=\"#-%EC%99%9C-%EC%B5%9C%EC%A2%85-%EC%9A%B0%EC%8A%B9%EC%9E%90-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%95%88%EB%82%98%EC%98%A4%EC%A7%80\">❌ 왜 최종 우승자 이름이 안나오지?</a></li>\n<li><a href=\"#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EC%98%A4%EB%A5%98-%EB%82%9C-%EB%B6%84%EB%AA%85-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%EA%B9%8C%EC%A7%80-%ED%96%88%EB%8A%94%EB%8D%B0\">❌ 테스트 케이스에서의 오류… 난 분명 예외 처리까지 했는데..?</a></li>\n<li><a href=\"#-jest%EC%97%90%EC%84%9C%EB%8A%94-%EA%B7%B8%EB%83%A5-toequal%EB%A7%8C-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%98%EB%82%98\">❌ Jest에서는 그냥 toEqual만 쓰면 안되나..?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\">🎯 새로 배운 내용</a></p>\n<ul>\n<li><a href=\"#-jest\">🔖 Jest</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81\">🎯 리팩토링</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-airbnb-styling-%EC%A0%81%EC%9A%A9\">✏️ airbnb styling 적용</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98-%EC%A0%81%EC%9A%A9\">✏️ 자바스크립트 고차함수 적용</a></li>\n<li><a href=\"#%EF%B8%8F-controller%EC%97%90%EA%B2%8C-%EB%84%88%EB%AC%B4-%EA%B3%BC%EB%B6%84%ED%95%9C-%EA%B2%83%EC%9D%84-%EB%A7%A1%EA%B8%B0%EC%A7%80-%EB%A7%90%EC%9E%90\">✏️ controller에게 너무 과분한 것을 맡기지 말자</a></li>\n<li><a href=\"#%EF%B8%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%9D%BC%EA%B3%A0-%EB%8B%A4-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%80-%EC%95%84%EB%8B%88%EC%95%BC\">✏️ 데이터라고 다 도메인은 아니야</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\">🎯 개선해야할 점</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🎯 마무리</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%82%B4%EA%B0%80-%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C\">🧑🏻‍💻 내가 작성한 코드</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 02, 2023","title":"우아한테크코스 6기 프리코스 - 2주차 회고 (자동차 경주)","categories":"우아한테크코스","author":"재오","emoji":"🛸"},"fields":{"slug":"/Woowa2/"}},"prev":{"id":"2b2fafd0-d7c8-52eb-ad0e-a8c9847b49ca","html":"<p><em>이 글은 우아한테크코스 6기 프리코스 4주차 미션 종료 직후 작성된 회고 글입니다.</em></p>\n<p><em>스스로 고민한 내용이 글에 많이 포함되어 있기 때문에 본인 코드에 대해 충분히 고민한 후 읽으시는 것을 추천합니다.</em></p>\n<hr>\n<h2 id=\"-시작-전\" style=\"position:relative;\"><a href=\"#-%EC%8B%9C%EC%9E%91-%EC%A0%84\" aria-label=\" 시작 전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 시작 전</h2>\n<p>본격적으로 미션을 시작하기 전에 3주차 공통 피드백을 읽어보았다. 정말로 피드백 하나 하나가 나를 겨냥해서 작성된게 아닐까 싶을 정도로 3주차 미션에 내가 작성했던 코드 방식에 단점이 있었다. 특히 프리코스를 하는 동안 꾸준히 나를 고민하게 했던 <code class=\"language-text\">객체 지향</code>과 <code class=\"language-text\">테스트 케이스</code>에 관해서 자세히 설명이 되어있었다. <code class=\"language-text\">Tecoble</code> 이라는 우아한테크코스 사람들이 작성된 고퀄리티의 블로그 글도 링크에 첨부되어있어서 내 고민을 조금 덜어줄 것 같았다.</p>\n<p>3주차에 객체 지향적인 코드를 어느정도 이해를 했다고 생각했지만 피드백을 읽어보니 아직 한참 멀었다는 것을 깨달았다. 한번 더 겸손해지는 시간이었던 것 같다. 4주차 미션을 서둘러서 시작하는 것보다는 하루가 걸리더라도 이 피드백에 대해 숙지하고 코드에 접목시키고 싶었다.</p>\n<p><code class=\"language-text\">Tecoble</code> 글과, <code class=\"language-text\">공통 피드백</code>을 읽으며 3주차에 작성한 코드와 비교해보고 수정을 해본 뒤에 본격적인 4주차 미션을 진행하였다. 이번 4주차 미션은 새로운 무언가를 시작하기 보다는 공통 피드백을 최대한 반영하여 잘못 알았던 지식을 깨우치고 개선하는 것에 초점을 맞췄다.</p>\n<h2 id=\"-주제\" style=\"position:relative;\"><a href=\"#-%EC%A3%BC%EC%A0%9C\" aria-label=\" 주제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 주제</h2>\n<p>프리코스 마지막 4주차 미션은 평소와는 다른 방식으로 진행되었다. 포크를 받지 않고, 내 레포를 비공개로 처리하여 우아한테크코스 계정을 collaborate하는 방식이었다.</p>\n<p>public으로 설정하면 안되는 부분, 화요일 이전까지 우테코 계정을 초대해야하는 등 요구조건이 꽤 까다로웠다.</p>\n<p>문제 길이 또한 매우 길었다. (수능 국어 비문학 지문을 읽는 듯한 느낌을 살짝 받았다…ㅎㅎ) 이번 문제의 주제는 <code class=\"language-text\">크리스마스 프로모션</code> 이었는데, 문제만 길었지 최대한 구체적으로 설명해주기 위해서 예시를 많이 들어준 것이어서 시작전 살짝 쫄았던 마음이 문제를 읽으면서 천천히 풀렸다.</p>\n<p>예외 처리나 요구 사항을 놓치는 부분 없이 꼼꼼히 체크해서 문제를 해결하고자 하였다.</p>\n<h2 id=\"-문제-요구-사항\" style=\"position:relative;\"><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\" aria-label=\" 문제 요구 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 문제 요구 사항</h2>\n<p><img src=\"/42d8b98825903d19faf0568d0935e91c/1.png\" alt=\"\"></p>\n<p><img src=\"/a4fe63e5d3a5f953bd663a786cfe4abe/2.png\" alt=\"\"></p>\n<p>확실히 4주차가 되니까 문제 요구 사항이 매우 길어졌다. 요구 사항이 누적되어 추가가 되다보니 이미 반영한 내용도 많고, 이제는 확실히 습관적으로 기존 요구 사항에 대해 지키게 된 것 같다.</p>\n<p>위 요구 사항에서 가장 눈에 띄었던 부분은 ERROR가 발생하면 해당 부분부터 입력을 다시 받는 곳이었다. 프로그램을 종료시키는 것이 아니라 다시 입력을 받게끔…? 고민이 많았던 부분이었다. 이 부분에 대해서는 아래에서 자세히 설명하겠다.</p>\n<p><del>사실 로또에서도 이 요구 사항이 있었다는 것을 회고 글을 쓰는 지금 시점에서 알게 되었다…이 바보…에러 통과가 되지 않았을 때 캐치를 했어야 했는데… 너무 바보같다.</del></p>\n<h2 id=\"-구현-전-로직-작성\" style=\"position:relative;\"><a href=\"#-%EA%B5%AC%ED%98%84-%EC%A0%84-%EB%A1%9C%EC%A7%81-%EC%9E%91%EC%84%B1\" aria-label=\" 구현 전 로직 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 구현 전 로직 작성</h2>\n<p>4주간 프리코스를 진행하는 동안 로직을 작성할 때 상당히 많은 시간을 투자하는 것이 중요하다는 점을 느꼈다. 처음 무턱대고 구현부터 시작했을 때는 이미 파일을 많이 분리한 상태에서 에러로 인해 코드를 변경하는게 쉽지 않았다. 하지만 시간이 오래 걸리더라도, 제대로된 로직을 작성한다면 구현할 때 오히려 시간이 많이 단축되었다.</p>\n<p>이번 4주차 미션은 필요한 데이터 값과 출력 값이 상당히 많아서 로직 작성이 더 중요했던 것 같았고, 꼬박 하루를 로직 작성에 시간을 투자했다. 날짜별로 적용되는 할인 대상과 할인 금액이 다르다는 점은 어떤 플로우로 프로그램이 작성되어야 하고, 세부적으로는 객체 지향적인 요소까지 고려해야 해서 복잡했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">BENEFIT_RESULT</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'크리스마스 디데이 할인:'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'주말 할인:'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'평일 할인:'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'특별 할인:'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'증정 이벤트:'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>오랜 고민 끝에 내가 찾아낸 최선의 방법은 가능한 이벤트의 개수만큼 배열을 0으로 초기화하여 날짜를 입력하고, 날짜와 관련된 이벤트에 값을 1씩 추가하여 결과적으로는 배열에 값이 1인 부분만 할인행사를 적용하여 반환하는 것이었다. 이 방법을 사용하니 각 로직은 본인의 역할만 수행하고 이후에 해당 결과만 출력할 수 있어서 컨트롤러의 역할 부담이 줄어들고 최종 출력 코드가 매우 깔끔해졌다.</p>\n<p>이번 미션만큼은 정확한 로직없이 느낌대로 코드를 작성했다면 정말 많은 위기를 맞이했을 것 같다. 결과적으로 구현하는 부분에서는 큰 오류없이 계획대로 진행되어 시간도 많이 절약되었고, 많은 시간을 리팩토링에 투자할 수 있었다.</p>\n<h2 id=\"-기능-목록-작성\" style=\"position:relative;\"><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\" aria-label=\" 기능 목록 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 기능 목록 작성</h2>\n<div class=\"gatsby-highlight\" data-language=\"md\"><pre class=\"language-md\"><code class=\"language-md\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> 기능 목록</span>\n\n<span class=\"token list punctuation\">-</span> [x] 날짜와 관련된 기능\n\n  <span class=\"token list punctuation\">-</span> [x] 날짜를 입력받는 기능\n  <span class=\"token list punctuation\">-</span> [x] 입력받은 날짜가 평일, 주말 중 어디에 해당하는지 확인하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 입력받은 날짜가 평일이라면 특별할인을 받을 수 있는 날짜인지 확인하는 기능\n\n<span class=\"token list punctuation\">-</span> [x] 메뉴와 관련된 기능\n\n  <span class=\"token list punctuation\">-</span> [x] 메뉴와 메뉴 개수를 입력받는 기능\n  <span class=\"token list punctuation\">-</span> [x] 메뉴와 메뉴 개수를 순차적으로 출력하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 주문한 메뉴와 메뉴 개수를 저장하고 있는 객체 생성하는 기능\n\n<span class=\"token list punctuation\">-</span> [x] 돈과 관련된 기능\n\n  <span class=\"token list punctuation\">-</span> [x] 총 주문 금액을 계산하는 기능\n    <span class=\"token list punctuation\">-</span> [x] 총 주문 금액이 10,000원을 넘기는지 여부를 확인하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 이벤트 값을 받아 총 혜택 금액을 계산하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 총 주문 금액과 비교하여 증정이벤트 금액을 출력하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 총 혜택 금액을 비교하여 혜택 내역을 출력하는 기능\n\n<span class=\"token list punctuation\">-</span> [x] 이벤트와 관련된 기능\n\n  <span class=\"token list punctuation\">-</span> [x] 주말 / 평일 여부로 주말혜택, 평일 혜택 계산하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 평일이라면 특별할인 여부 혜택 계산하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 크리스마스 디데이 이벤트 혜택 계산하는 기능\n  <span class=\"token list punctuation\">-</span> [x] 혜택 여부와 상관없이 해당 이벤트 메뉴를 주문 안하면 출력하지 않는 기능\n\n<span class=\"token list punctuation\">-</span> [x] 에러가 발생하면 에러 메시지를 출력하고 다시 입력받는 기능</code></pre></div>\n<p>기능 명세서를 작성하는 것에 정말 오랜 시간 공을 들였다. 원하는 조건도 많고 필요한 데이터 양도 상당히 많았기 때문에 도메인을 작성하는 것에 많은 힘을 쏟았다.</p>\n<p><img src=\"/76a1def5a5edd0f8ca6d72e5833bb05b/3.jpeg\" alt=\"\"></p>\n<h2 id=\"-고난-그리고-배움\" style=\"position:relative;\"><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\" aria-label=\" 고난 그리고 배움 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 고난 그리고 배움</h2>\n<h3 id=\"-에러-처리-방식이-사뭇-다르네\" style=\"position:relative;\"><a href=\"#-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EC%8B%9D%EC%9D%B4-%EC%82%AC%EB%AD%87-%EB%8B%A4%EB%A5%B4%EB%84%A4\" aria-label=\" 에러 처리 방식이 사뭇 다르네 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 에러 처리 방식이 사뭇 다르네…?</h3>\n<p>4주차 미션에서 새롭게 추가된 사항이 에러가 발생했을 때, 프로그램을 종료시키는 것이 아닌 새로운 입력을 받는 것이었다. 처음에는 ‘이게 가능한가?’ 싶었지만 3주차 미션에서 에러 메시지를 출력하고 프로그램을 종료시키는 법에 대해서 수많은 오류를 토대로 학습한 경험이 있어서 이것을 응용한다면 충분히 해결 가능할 것 같았다.</p>\n<p><del>하지만 3주차 미션도 프로그램을 종료시키는 것이 아닌 새로운 입력을 받게끔 해야했다. 정말 이런 실수를 하다니…문제 꼼꼼히 읽지 않은 과거의 내가 너무 원망스럽다… ㅜㅜ</del></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token function\">handleDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inputVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>3주차는 모든 에러가 발생하는 부분에서 메시지를 출력하면 되는 기능이라 App.js에서 <code class=\"language-text\">try…catch</code> 문으로 묶어줬지만 이번에는 입력을 새로 받아야하기 때문에 컨트롤러에서 기능이 이루어져야 했다. 처음에는 에러가 발생하면 재귀함수를 호출해 입력받는 함수로 돌아가게끔 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">async <span class=\"token function\">#inputVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> InputView<span class=\"token punctuation\">.</span><span class=\"token function\">readDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Console<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 리팩토링을 하는 과정에서 재귀함수를 호출한다면 메모리 낭비가 상당히 심해질 것 같아서 <code class=\"language-text\">while문</code> 과 <code class=\"language-text\">return</code>을 사용해 무한루프에 빠지지 않게끔 하여 문제를 해결했다.</p>\n<h3 id=\"-숫자-계산이-왜-이렇게-되지\" style=\"position:relative;\"><a href=\"#-%EC%88%AB%EC%9E%90-%EA%B3%84%EC%82%B0%EC%9D%B4-%EC%99%9C-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EB%90%98%EC%A7%80\" aria-label=\" 숫자 계산이 왜 이렇게 되지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❌ 숫자 계산이 왜 이렇게 되지?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">calculateDDayAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> benefitAmount <span class=\"token operator\">=</span>\n      <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>dDayDefaultDiscount <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>date <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>dDayPlusDiscount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> benefitAmount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token comment\">// 340900???</span></code></pre></div>\n<p>이벤트마다 혜택 금액을 계산하는 <code class=\"language-text\">BenefitAmount</code> 클래스의 일부이다. 그 중에서 크리스마스 디데이 할인 금액을 계산한 부분인데 배열 0번째 인덱스에 디데이 할인 이벤트가 적용된 값을 할당하는 역할을 한다. 내가 기대한 값은 3400이었는데 계속 340900이라는 값이 떴다. 계산 실수인가 싶어서 콘솔창에 수식값만 넣었는데 내가 작성한 수식은 정상적으로 동작했다.</p>\n<p>결국 배열에 값을 재할당하는 것에서 오류가 있다고 판단하고 기존 배열과 다르게 값만을 넣어주는 새로운 배열을 필드에 생성하여 기능을 구현하였다.</p>\n<p>하지만 리팩토링을 하는 과정에서 기능은 비슷한데 변수명만 달라서 코드만 길어지는 점이 보기에 너무 불편했다.</p>\n<p>다시 한번 코드를 살펴보니 위에 코드에서 <code class=\"language-text\">date</code>라는 변수에 배열 인덱스 값을 할당하고 오히려 <code class=\"language-text\">date</code>가 아닌 기존 배열 값에 새로운 값을 할당해버려서 <code class=\"language-text\">date</code>를 업데이트 하지 못하는 문제가 발생했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function\">#calculateDDayAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">[</span><span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>dDayIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>christmas\n      <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">[</span><span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>dDayIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n          <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>dDayDefaultDiscount <span class=\"token operator\">+</span>\n          <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">[</span><span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>dDayIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>dDayPlusDiscount<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#benefitList<span class=\"token punctuation\">[</span><span class=\"token constant\">NUMBER</span><span class=\"token punctuation\">.</span>dDayIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">benefitAmount</code> 라는 배열을 지우고 기존에 Event에서 받아온 <code class=\"language-text\">BenefitList</code> 배열에 변수를 따로 선언하지 않고 계산한 값을 새로 업데이트 하는 방법을 사용하여 코드의 길이를 줄여나갔다.</p>\n<h2 id=\"-새로-배운-내용\" style=\"position:relative;\"><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\" aria-label=\" 새로 배운 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 새로 배운 내용</h2>\n<h3 id=\"-객체-다움이란\" style=\"position:relative;\"><a href=\"#-%EA%B0%9D%EC%B2%B4-%EB%8B%A4%EC%9B%80%EC%9D%B4%EB%9E%80\" aria-label=\" 객체 다움이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 객체 다움이란</h3>\n<p>프리코스를 하는동안 꾸준히 했던 고민이 바로 <code class=\"language-text\">객체는 객체스럽게 사용하자</code> 였다. 3주차 미션에서는 파일들을 분리하여 능동적인 코드를 작성하고자 하였고, <code class=\"language-text\">private</code> 메서드를 활용하여 캡슐화에 신경을 많이 썼다. 하지만 공통 피드백을 읽어보니 <code class=\"language-text\">객체에서 데이터를 꺼내지 말고, 메시지를 던지도록 구조를 바꾸라</code>는 말이 있었다. 지금까지 내가 작성한 코드는 능동적인 코드처럼 보이게 예쁜 구조로 나눈 느낌이었다. 더 머리가 복잡해졌다. 본격적인 미션 시작 전에 <code class=\"language-text\">Tecoble</code> 블로그 글과 디스코드 커뮤니티에 올라온 의견을 읽으며 <code class=\"language-text\">객체 스럽다</code> 의 의미를 정리할 수 있었다.</p>\n<p>내가 스스로 내린 결론은 다음과 같다. <code class=\"language-text\">getter</code> 를 사용하지 않는 것만 객체다운 코드가 아니고, 그렇다고 <code class=\"language-text\">getter</code> 만 사용하는 것 역시 객체다운 코드가 아니다. 하나의 파일 안에서는 여러 객체가 협력할 수밖에 없다. 이 협력하는 과정에서 다른 객체에 의존하지 않고 본인의 역할은 본인 객체 안에서 해결하는 책임감 있고, 능동적인 코드를 작성하는 것이 객체다운 코드이다.</p>\n<p>3주차 미션에서 <code class=\"language-text\">private</code> 메서드를 사용한 것도 캡슐화에 신경쓰며 외부에 객체 정보가 유출되지 않는 좋은 방법 중 하나였던 것 같다. 하지만 파일을 나눴다면 그 파일 안에서 협력할 수 있는 객체는 메시지를 받아서 처리한 결과만 외부에 노출시킬 수 있게끔 하는 것이 더 객체 지향적이지 않을까 싶다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">VisitDate</span> <span class=\"token punctuation\">{</span>\n  #date<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#date <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">isDateWeekend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">isDateSpecial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">processVisitDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번 4주차 미션에서는 객체다운 코드를 작성하기 위해서 domain 생성에 많은 시간을 쏟았다. 필요한 데이터를 정리하고, 기능별로 분리하여 <code class=\"language-text\">VisitDate</code> , <code class=\"language-text\">Event</code> , <code class=\"language-text\">Order</code> , <code class=\"language-text\">TotalAmount</code> , <code class=\"language-text\">BenefitAmount</code> 총 5개의 domain을 생성하였다. 특히 VisitDate 도메인은 Event와 협력하여 해당 날짜가 어떤 이벤트에 해당이 되는지에 대한 메시지만 넘겨주고 Event가 그 값을 이용해 이벤트 정보를 업데이트할 수 있게 하였다. 나머지 객체는 메시지만 전달받으면 각 객체 안에서 계산하고 출력값만 반환하는 구조로 코드를 작성하여 조금 더 능동적인 객체가 되었다.</p>\n<h3 id=\"-진정한-의미의-테스트-코드-작성\" style=\"position:relative;\"><a href=\"#-%EC%A7%84%EC%A0%95%ED%95%9C-%EC%9D%98%EB%AF%B8%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\" 진정한 의미의 테스트 코드 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 진정한 의미의 테스트 코드 작성</h3>\n<p><code class=\"language-text\">테스트를 위한 코드는 구현 코드에서 분리되어야 한다</code> 라는 공통 피드백 내용을 보고 지금까지 제가 작성한 테스트 케이스 방식이 잘못되었다는 점을 깨달았다. 사실 테스트 케이스의 최종 목표는 내가 작성한 코드가 오류없이 잘 돌아가기 위함이다. 코드를 다 작성하고 그때가서 오류가 발생했을 때는 잘못하면 코드를 다 갈아 엎어야 할 수도 있기 때문이다. 하지만 지금까지 메서드를 직접 콘솔에 찍어보면서 단위 테스트를 하고, 최종 코드가 완성되면 테스트 코드를 작성해보며 Jest를 검토하는 용도로 사용했다.\n<img src=\"/d6980181a075beffaf5291d18e97bd98/4.png\" alt=\"\"></p>\n<p>물론 테스트를 위한 코드를 구현 코드에서 작성하지 않았지만, 테스트 케이스 코드 자체를 목적과 다르게 사용한다는 점은 스스로를 많이 반성하게 하였다. 이번 미션은 객체 단위로 메서드를 직접 Test 파일에서 실행시켜보며 오류를 확인했다. 이제서야 테스트 코드의 의도를 파악한 내 자신이 너무 부끄러웠지만 지금이라도 깨달아서 한편으로 다행이었다. 실제로 이러한 방법으로 하나의 단위마다 테스트 케이스를 작성하고 실행하다보니 컨트롤러에서 domain과 view를 병합했을 때 오류가 거의 발생하지 않았다.</p>\n<h3 id=\"-컨트롤러에-private-필드가-필요할까\" style=\"position:relative;\"><a href=\"#-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%97%90-private-%ED%95%84%EB%93%9C%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\" aria-label=\" 컨트롤러에 private 필드가 필요할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔖 컨트롤러에 private 필드가 필요할까?</h3>\n<p>필드의 수를 줄이기 위해 노력한다 이 피드백을 보고 지난 로또 미션에서 작성한 제 컨트롤러 코드를 살펴봤다. 무려 필드의 수가 6개나 되었다. 피드백에 필드 개수가 많으면 객체의 복잡도를 높인다고 쓰여져있었는데 처음 내 생각은 해당 메서드 안에서만 사용하는 변수들을 필드에 선언하면 외부에서 접근을 못해서 객체는 복잡해지지만 은닉화, 캡슐화에는 더 적합할 것 같다고 생각했다. 그래서 내가 작성한 domain 객체와 비교를 해봤는데 정작 domain에서 필드의 수는 최대 2개이거나 1개였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// field를 하나도 사용하지 않았다.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PromotionController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">playPromotion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    OutputView<span class=\"token punctuation\">.</span><span class=\"token function\">printIntro</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">const</span> order <span class=\"token operator\">=</span> <span class=\"token operator\">...</span>\n    OutputView<span class=\"token punctuation\">.</span><span class=\"token function\">printPreview</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#displayOrderedMenus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">,</span> totalAmount <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다양한 블로그의 글을 읽어보고 이를 바탕으로 생각해본 내 결론은 ‘굳이 컨트롤러에서는 필드에 변수를 선언할 필요가 없다’였다. domain 객체는 다른 객체 혹은 컨트롤러에서 사용할 수 있는 객체이고, 접근이 가능하기 때문에 보호가 필요했다. 하지만 컨트롤러는 App.js에서만 사용되고, 여러 곳에서 쓰이지 않는 객체이다. 때문에 굳이 필드에 변수를 선언하지 않고 직접 함수에서 선언하고 해당 변수를 인자로 넘겨주는 방식으로 사용하는 것이 옳다고 판단했다.</p>\n<h2 id=\"-개선해야할-점\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\" aria-label=\" 개선해야할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 개선해야할 점</h2>\n<h3 id=\"️-꼼꼼함을-기르자\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EA%BC%BC%EA%BC%BC%ED%95%A8%EC%9D%84-%EA%B8%B0%EB%A5%B4%EC%9E%90\" aria-label=\"️ 꼼꼼함을 기르자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 꼼꼼함을 기르자…</h3>\n<p>3주차에 이미 기능 요구 사항으로 나갔던 부분을 4주차 끝나고 나서 알았다는 점은 너무 부끄러운 사실이다. 꼼꼼하게 읽겠다고 다짐했지만 중요한 예외 처리에서 실수를 한 부분이 정말 안타까웠다.</p>\n<p><img src=\"/3ea834041b2fc7a0d15e6b0d27072deb/5.png\" alt=\"\"></p>\n<p>이 부분도 정말 어이가 없었다. 기능 구현을 모두 마치고 테스트 케이스를 돌렸는데 이상한 에러가 발생했다. 딱히 데이터를 다루는 함수도 아니어서 에러가 발생할 곳이 아니었다. 30분 정도 애를 먹다가 메시지 파일을 봤는데 ‘다시 입력해 주세요.‘가 아닌 ‘다시 입력해주세요’ 이렇게 붙여서 적었던 것이었다.</p>\n<p>매번 에러 처리를 할 때, 어려운 부분도 아니고 실수가 발생하는 부분이어서 이 부분에 대해서는 꼼꼼하게 대처할 필요가 있는 것 같다.</p>\n<h3 id=\"️-주말-혜택인데-메인-메뉴를-입력하지-않는다면\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A3%BC%EB%A7%90-%ED%98%9C%ED%83%9D%EC%9D%B8%EB%8D%B0-%EB%A9%94%EC%9D%B8-%EB%A9%94%EB%89%B4%EB%A5%BC-%EC%9E%85%EB%A0%A5%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4%EB%A9%B4\" aria-label=\"️ 주말 혜택인데 메인 메뉴를 입력하지 않는다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✏️ 주말 혜택인데 메인 메뉴를 입력하지 않는다면..?</h3>\n<p>해당 케이스에 대한 예외 처리에 대해 고민을 했었다. 만약 주말 혜택이 적용되는 경우인데 메인 메뉴가 아닌 애피타이저나 디저트로 1만원이 넘는 금액을 시켰을 때, 아예 주말 혜택 내용이 출력되면 안되는지, 아니면 주말 혜택 내용이 출력이 되고 -0원도 출력이 되어야 하는지가 정말 의문이었다.</p>\n<p>프리코스 문제에 대한 설명에서도 이 부분을 찾아보기 힘들었기 때문에 어떤 출력값을 내야할 지 고민이었다. 프리코스를 마무리하는 순간까지 정확한 답을 찾기는 힘들었지만 - 0원이 출력된다는 것은 어짜피 해당 혜택을 받지 못한다는 의미인데 굳이 출력을 해야할까?(너는 자격 요건은 되는데 혜택 못받지롱~~ 약올리는 느낌이었다.) 싶어서 출력을 하지 않았다.</p>\n<p>이에 대한 설명이 있었으면 좋았을거라는 아쉬움이 남는다.</p>\n<h2 id=\"-프리코스-마무리\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\" 프리코스 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 프리코스 마무리</h2>\n<p>프리코스를 통해 그동안 어렵게만 느껴졌던 객체 지향 설계와 클래스에 대해 고민하고 코드에 적용해 볼 수 있었고, 한번도 고민해보지 못했던 클린 코드 원칙에 대해 알 수 있어서 유익했다. 평소에는 코드가 동작만 된다면 쳐다도 보지 않았었지만, 하나의 프로그램을 일주일 동안 뜯어보고 수정하며 살아있는 코드를 만들 수 있음에 성취감과 행복감을 동시에 느낄 수 있었다. 한 달이라는 짧은 기간동안의 몰입이었지만 코딩이 이렇게 재밌는 것임을 새삼 느끼며 개발자라는 꿈을 선택한 것에 후회하지 않게 되었다. 이러한 환경을 제공해준 우아한테크코스에 진심으로 감사하다.</p>\n<h2 id=\"-프리코스-이후에는\" style=\"position:relative;\"><a href=\"#-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%EC%9D%B4%ED%9B%84%EC%97%90%EB%8A%94\" aria-label=\" 프리코스 이후에는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 프리코스 이후에는?</h2>\n<p>한달 간의 프리코스 여정이 끝났다. 분명 여기서 끝이 아니다. 내 성격을 생각한다면 또 하나의 목표를 잡고 열심히 도전할 것 같다.</p>\n<p>회고록을 작성하는 시점에서는 아직 구체적으로 계획한 것은 없지만 겨울 방학 전까지는 프리코스에서 작성한 코드를 그동안 받았던 피드백을 반영하여 수정해보고 다듬어보는 과정을 밟을 것 같다. 프리코스를 하면서 배웠던 개념인 <code class=\"language-text\">비동기</code>, <code class=\"language-text\">객체 지향</code>을 프리코스 때 배운 어설픈 개념으로 어렴풋이 <code class=\"language-text\">아~ 내가 내린 결론은 이런 것 같아~</code>가 아니라 시간을 들여서라도 깊게 파보고 싶다.</p>\n<p><code class=\"language-text\">Tecoble</code> 글을 심심할 때 읽는 것도 하나의 낙이 될 것 같다. 사실 몇 개를 읽어봤는데 다들 글을 너무 가독성 좋게 잘 쓰셔서 놀랐다. 처음 배우는 사람도 이해하기 쉽게 잘 정리해주셔서 지식을 풀어내는 능력이 부럽기도 했다. 시간 관계상 많이 읽지는 못했지만 그동안 궁금했던 개념들에 대해 써놓으신 글이 몇개 눈에 들어와서 자주 이용할 것 같다.</p>\n<p>그리고 나는 리액트에 대해 많이 배워보지 못했다. 지금 생각해보면 자신감이 많이 떨어졌던 것 같다. 이번 프리코스를 통해 자바스크립트에 대해 많이 공부할 수 있고, 개발에 흥미를 느꼈던 것처럼 리액트도 중요한 여러 개념을 접목시키며 프리코스와 같은 미션 형태로 스터디를 하면 실력 향상이 많이 될 것 같다는 생각이 들었다. 정말 진지하게 고민중이다..ㅎㅎ</p>\n<p><strong>4주간의 프리코스 회고 끗!</strong></p>\n<p><img src=\"/fb1f5e937de5029dc79bc056951e5a7b/6.png\" alt=\"\"></p>\n<p>👉 <a href=\"https://github.com/jaeochoii/javascript-christmas-6-jaeochoii\">우아한테크코스 4주차 미션_크리스마스 프로모션</a></p>\n<p>코드 리뷰는 언제든 환영입니다! 🙂</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EC%8B%9C%EC%9E%91-%EC%A0%84\">🎯 시작 전</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EC%A0%9C\">🎯 주제</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%AC%B8%EC%A0%9C-%EC%9A%94%EA%B5%AC-%EC%82%AC%ED%95%AD\">🎯 문제 요구 사항</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B5%AC%ED%98%84-%EC%A0%84-%EB%A1%9C%EC%A7%81-%EC%9E%91%EC%84%B1\">🎯 구현 전 로직 작성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B8%B0%EB%8A%A5-%EB%AA%A9%EB%A1%9D-%EC%9E%91%EC%84%B1\">🎯 기능 목록 작성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B3%A0%EB%82%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%B0%B0%EC%9B%80\">🎯 고난 그리고 배움</a></p>\n<ul>\n<li><a href=\"#-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EC%8B%9D%EC%9D%B4-%EC%82%AC%EB%AD%87-%EB%8B%A4%EB%A5%B4%EB%84%A4\">❌ 에러 처리 방식이 사뭇 다르네…?</a></li>\n<li><a href=\"#-%EC%88%AB%EC%9E%90-%EA%B3%84%EC%82%B0%EC%9D%B4-%EC%99%9C-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EB%90%98%EC%A7%80\">❌ 숫자 계산이 왜 이렇게 되지?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%83%88%EB%A1%9C-%EB%B0%B0%EC%9A%B4-%EB%82%B4%EC%9A%A9\">🎯 새로 배운 내용</a></p>\n<ul>\n<li><a href=\"#-%EA%B0%9D%EC%B2%B4-%EB%8B%A4%EC%9B%80%EC%9D%B4%EB%9E%80\">🔖 객체 다움이란</a></li>\n<li><a href=\"#-%EC%A7%84%EC%A0%95%ED%95%9C-%EC%9D%98%EB%AF%B8%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\">🔖 진정한 의미의 테스트 코드 작성</a></li>\n<li><a href=\"#-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%97%90-private-%ED%95%84%EB%93%9C%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0%EA%B9%8C\">🔖 컨트롤러에 private 필드가 필요할까?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9C%EC%84%A0%ED%95%B4%EC%95%BC%ED%95%A0-%EC%A0%90\">🎯 개선해야할 점</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-%EA%BC%BC%EA%BC%BC%ED%95%A8%EC%9D%84-%EA%B8%B0%EB%A5%B4%EC%9E%90\">✏️ 꼼꼼함을 기르자…</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%A3%BC%EB%A7%90-%ED%98%9C%ED%83%9D%EC%9D%B8%EB%8D%B0-%EB%A9%94%EC%9D%B8-%EB%A9%94%EB%89%B4%EB%A5%BC-%EC%9E%85%EB%A0%A5%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4%EB%A9%B4\">✏️ 주말 혜택인데 메인 메뉴를 입력하지 않는다면..?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%EB%A7%88%EB%AC%B4%EB%A6%AC\">🎯 프리코스 마무리</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A6%AC%EC%BD%94%EC%8A%A4-%EC%9D%B4%ED%9B%84%EC%97%90%EB%8A%94\">🎯 프리코스 이후에는?</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"November 16, 2023","title":"우아한테크코스 6기 프리코스 - 4주차 회고 (크리스마스 프로모션)","categories":"우아한테크코스","author":"재오","emoji":"🛸"},"fields":{"slug":"/Woowa4/"}},"site":{"siteMetadata":{"siteUrl":"https://www.jaeochoiii.com","comments":{"utterances":{"repo":"jaeochoii/jaeochoii.github.io"}}}}},"pageContext":{"slug":"/Woowa3/","nextSlug":"/Woowa2/","prevSlug":"/Woowa4/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}