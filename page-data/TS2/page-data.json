{"componentChunkName":"component---src-templates-blog-template-js","path":"/TS2/","result":{"data":{"cur":{"id":"aa5ca993-92ca-5fb5-9cd4-e91bf8dee082","html":"<p>자바 언어를 사용하는 친구들이랑 개발 이야기를 하다보면 정말 자주 등장하는 주제가 <code class=\"language-text\">enum</code>이었다. 자바스크립트에 <code class=\"language-text\">enum</code>이 없다는 것을 친구들은 믿지 않았다. 그게 없으면 대체 변하지 않는 값은 어떻게 저장을 하냐고…저렇게 편한 것이 없으면 개발을 어떻게 하냐고… 진짜 더욱 궁금했다. 대충 어떤 용도로 Enum을 사용하는구나 정도로만 이해하고 넘어갔다. 어짜피 자바스크립트에는 없으니까…</p>\n<p>하지만 타입스크립트에서는 <code class=\"language-text\">enum</code>을 사용한다는 것을 듣고 이 흥분된 기분을 감출 수 없어 바로 블로깅하러 왔다. 나도 드디어 <code class=\"language-text\">enum</code>을 쓸 수 있겠구나…! 이번 기회에 Enum에 대해 한번 정리하고 넘어가고자 한다.</p>\n<h2 id=\"-enum\" style=\"position:relative;\"><a href=\"#-enum\" aria-label=\" enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 Enum</h2>\n<p><code class=\"language-text\">enum</code>은 여러 값들에 미리 이름을 정의하여 열거해두고 사용하는 타입이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Weather <span class=\"token punctuation\">{</span>\n  sun <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span>\n  cloud <span class=\"token operator\">=</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span>\n  rain <span class=\"token operator\">=</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 아무것도 지정하지 않은 경우에는 0부터 숫자를 매긴다</span>\n<span class=\"token keyword\">enum</span> OsType <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">IOS</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 0</span>\n  <span class=\"token constant\">ANDROID</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>객체와 비슷하게 원하는 값을 고정시키고 사용할 때 주로 사용한다. 하지만 의문이다. 굳이 왜 <code class=\"language-text\">enum</code>을 사용하는 것일까?</p>\n<p>자바스크립트의 객체는 key와 value 값이 변경될 수 있다는 점이 큰 단점이다. 하지만 <strong>enum은 불변한 상수의 열거를 위해 enum 안에서 선언한 값을 외부에서 변경할 수 없도록 한다.</strong></p>\n<h2 id=\"-enum의-필요성\" style=\"position:relative;\"><a href=\"#-enum%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\" enum의 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 Enum의 필요성</h2>\n<h3 id=\"-분야별로-정의하여-가독성과-명확성-증가\" style=\"position:relative;\"><a href=\"#-%EB%B6%84%EC%95%BC%EB%B3%84%EB%A1%9C-%EC%A0%95%EC%9D%98%ED%95%98%EC%97%AC-%EA%B0%80%EB%8F%85%EC%84%B1%EA%B3%BC-%EB%AA%85%ED%99%95%EC%84%B1-%EC%A6%9D%EA%B0%80\" aria-label=\" 분야별로 정의하여 가독성과 명확성 증가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 분야별로 정의하여 가독성과 명확성 증가</h3>\n<p>예를 들어 OS별로 IOS는 0, ANDROID는 1로 설정하여 관리를 하는 경우, 개발자는 IOS = 0이라는 것을 기억해두고 코드를 만들어야 한다. 하지만 이런 값들을 모두 기억하고 정의하여 사용하는 것은 쉽지 않다. 관리해야 하는 값들이 1000개 그 이상이 되면 실수하기 마련이다.</p>\n<p>하지만 이것을 <code class=\"language-text\">enum</code>으로 정의해두면 OS분야만 따로 모아 열겨해둬 의미를 정확하게 파악할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> OsType <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">IOS</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 0</span>\n  <span class=\"token constant\">ANDROID</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1</span>\n  <span class=\"token constant\">NOKIA</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TypeNum <span class=\"token operator\">===</span> OsType<span class=\"token punctuation\">.</span><span class=\"token constant\">IOS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OS는 IOS입니다!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"-하드코딩의-실수-방지\" style=\"position:relative;\"><a href=\"#-%ED%95%98%EB%93%9C%EC%BD%94%EB%94%A9%EC%9D%98-%EC%8B%A4%EC%88%98-%EB%B0%A9%EC%A7%80\" aria-label=\" 하드코딩의 실수 방지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 하드코딩의 실수 방지</h3>\n<p>만약 입력받게 되는 값을 하드코딩으로 입력한다면 한 글자라도 바뀌게 되면 출력값이 아예 달라지게 되는 혼동이 발생한다. 함수의 길이 자체도 무의미하게 길어지기 때문에 이런 혼동을 줄이기 위해서 아래와 같이 코드를 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">enum</span> Weather <span class=\"token punctuation\">{</span>\n  sun <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span>\n  cloud <span class=\"token operator\">=</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span>\n  rain <span class=\"token operator\">=</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">weatherCondition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weatherType<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>weatherType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Weather<span class=\"token punctuation\">.</span>sun<span class=\"token operator\">:</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'오늘의 날씨는 sunny 입니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Weather<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">:</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'오늘의 날씨는 cloudy 입니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> Weather<span class=\"token punctuation\">.</span>rain<span class=\"token operator\">:</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'오늘의 날씨는 rainy 입니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'weatherType을 잘못 입력하셨습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>enum에 있는 값과 다른 값을 입력하게 된다면 ‘weatherType을 잘못 입력하셨습니다.‘을 출력하기 때문에 더 유의미한 코드를 작성할 수 있게 된다.</p>\n<h2 id=\"-enum의-단점feat-tree-shaking\" style=\"position:relative;\"><a href=\"#-enum%EC%9D%98-%EB%8B%A8%EC%A0%90feat-tree-shaking\" aria-label=\" enum의 단점feat tree shaking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 Enum의 단점(feat: Tree-shaking)</h2>\n<p>enum의 문제점은 바로 <code class=\"language-text\">Tree-shaking</code>이다. 여기서 <code class=\"language-text\">Tree-shaking</code>이란 export했지만 아무데서도 import하지 않은 모듈이나 사용하지 않는 코드를 삭제하여 번들의 크기를 줄여 렌더링 시간을 줄일 수 있게 되는 것을 의미한다.</p>\n<p>하지만 <strong>타입스크립트에서 Enum을 사용하면 Tree-shaking이 되지 않는다.</strong></p>\n<p>우리가 타입스크립트 자체적으로 구현했기 때문에 발생하는 문제가 있다. 브라우저는 타입스크립트가 아닌 자바스크립트를 읽을 수 있으므로 타입스크립트를 자바스크립트로 변환해야 한다. 이 과정에서 타입스크립트 컴파일러는 IIFE를 포함한 코드를 생성한다. 하지만 이 IIFE를 <em>사용하지 않는 코드</em> 로 판단할 수 없어서 Tree-shaking이 되지 않는다. 결국 모든 코드를 import하고 실제로 사용하지 않더라도 최종 번들에 포함되는 것이다.</p>\n<h2 id=\"-결론\" style=\"position:relative;\"><a href=\"#-%EA%B2%B0%EB%A1%A0\" aria-label=\" 결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 결론</h2>\n<p>위 문제를 해결하기 위한 방법으로 <code class=\"language-text\">const enum</code> 혹은 <code class=\"language-text\">Union Type</code>을 사용하지만 이것 역시 문제가 많다. 일시적인 문제만 해결될 뿐 근본적인 문제가 해결되지는 않는다.</p>\n<p>실제로 우아한 형제들 프론트엔드 개발 팀도 enum, const enum, union type 사용을 지양한다고 한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-enum\">🎯 Enum</a></p>\n</li>\n<li>\n<p><a href=\"#-enum%EC%9D%98-%ED%95%84%EC%9A%94%EC%84%B1\">🎯 Enum의 필요성</a></p>\n<ul>\n<li><a href=\"#-%EB%B6%84%EC%95%BC%EB%B3%84%EB%A1%9C-%EC%A0%95%EC%9D%98%ED%95%98%EC%97%AC-%EA%B0%80%EB%8F%85%EC%84%B1%EA%B3%BC-%EB%AA%85%ED%99%95%EC%84%B1-%EC%A6%9D%EA%B0%80\">💎 분야별로 정의하여 가독성과 명확성 증가</a></li>\n<li><a href=\"#-%ED%95%98%EB%93%9C%EC%BD%94%EB%94%A9%EC%9D%98-%EC%8B%A4%EC%88%98-%EB%B0%A9%EC%A7%80\">💎 하드코딩의 실수 방지</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-enum%EC%9D%98-%EB%8B%A8%EC%A0%90feat-tree-shaking\">🎯 Enum의 단점(feat: Tree-shaking)</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B2%B0%EB%A1%A0\">🎯 결론</a></p>\n</li>\n</ul>\n</div>","excerpt":"자바 언어를 사용하는 친구들이랑 개발 이야기를 하다보면 정말 자주 등장하는 주제가 이었다. 자바스크립트에 이 없다는 것을 친구들은 믿지 않았다. 그게 없으면 대체 변하지 않는 값은 어떻게 저장을 하냐고…저렇게 편한 것이 없으면 개발을 어떻게 하냐고… 진짜 더욱 궁금했다. 대충 어떤 용도로 Enum을 사용하는구나 정도로만 이해하고 넘어갔다. 어짜피 자바스크립트에는 없으니까… 하지만 타입스크립트에서는 을 사용한다는 것을 듣고 이 흥분된 기분을 감출 수 없어 바로 블로깅하러 왔다. 나도 드디어 을 쓸 수 있겠구나…! 이번 기회에 Enum에 대해 한번 정리하고 넘어가고자 한다. 🎯 Enum 은 여러 값들에 미리 이름을 정의하여 열거해두고 사용하는 타입이다. 객체와 비슷하게 원하는 값을 고정시키고 사용할 때 주로 사용한다. 하지만 의문이다. 굳이 왜 을 사용하는 것일까? 자바스크립트의 객체는 key와 value 값이 변경될 수 있다는 점이 큰 단점이다. 하지만 enum은 불변한 상수의 열거…","frontmatter":{"date":"December 21, 2023","title":"Enum 한 번 써보자","categories":"타입스크립트","author":"재오","emoji":"📘"},"fields":{"slug":"/TS2/"}},"next":{"id":"0bcbd73f-3ba9-5098-a5d0-43357534bec3","html":"<h2 id=\"-ts는-타입-애너테이션-방식\" style=\"position:relative;\"><a href=\"#-ts%EB%8A%94-%ED%83%80%EC%9E%85-%EC%95%A0%EB%84%88%ED%85%8C%EC%9D%B4%EC%85%98-%EB%B0%A9%EC%8B%9D\" aria-label=\" ts는 타입 애너테이션 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 TS는 타입 애너테이션 방식</h2>\n<p>타입스크립트는 <code class=\"language-text\">타입 애너테이션</code> 방식을 사용하는데 이는 변수나 상수 혹은 함수의 인자와 반환 값에 타입을 명시적으로 선언하여 어떤 타입 값이 저장될 것인지를 컴파일러에 직접 알려주는 문법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> decimal<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사실 위의 예시에서 <code class=\"language-text\">: type</code> 선언부를 제거해도 코드는 정상적으로 동작한다. 하지만 타입을 제거하면 타입스크립트 타입 시스템이 타입 추론을 하는 과정에서 어려움을 겪을 것이다.</p>\n<h2 id=\"-ts는-구조적-타이핑이다\" style=\"position:relative;\"><a href=\"#-ts%EB%8A%94-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%B4%EB%8B%A4\" aria-label=\" ts는 구조적 타이핑이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 TS는 구조적 타이핑이다</h2>\n<p>다른 언어와는 다르게 타입스크립트에서 타입을 구분하는 방식은 조금 다르다. 타입스크립트는 구조로 타입을 구분하는데 이것을 <code class=\"language-text\">구조적 타이핑</code>이라고 한다. 이를 예시와 함께 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Kitty'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>pet<span class=\"token operator\">:</span> Pet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello, '</span> <span class=\"token operator\">+</span> pet<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span></code></pre></div>\n<p>몹시 당황스러운 코드이다. 분명 greet이라는 함수의 매개변수로 들어갈 수 있는 값은 Pet 타입으로 제한되어 있다. 그러나 타입을 따로 명시하지 않은 cat 객체를 greet 함수의 인자로 전달해도 코드는 정상적으로 실행된다.</p>\n<p>이유는 <strong>cat 객체는 Pet 인터페이스가 가지고 있는 name 속성을 가지고 있어 pet.name의 방식으로 name 속성에 접근할 수 있기 때문이다.</strong></p>\n<p>위와 같은 타이핑 방식이 구조적 타이핑이다. 타입의 상속 역시 구조적 타이핑을 기반으로 하고 있다.</p>\n<h2 id=\"-구조적-타이핑의-단점\" style=\"position:relative;\"><a href=\"#-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\" 구조적 타이핑의 단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 구조적 타이핑의 단점</h2>\n<p>타입스크립트 구조적 타이핑의 특징 때문에 예기치 못한 결과가 나올 때도 있다. 그 예시가 바로 아래 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Cube</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  depth<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addLines</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> Cube<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> axis <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ❌ ❌ ❌</span>\n    <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>axis<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    total <span class=\"token operator\">+=</span> length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>addLines() 함수의 매개변수인 c는 Cube 타입으로 선언되었고, Cube 인터페이스의 모든 필드는 number 타입을 가지기 때문에 c[axis]는 당연히 number 타입일 것이라고 예측할 수 있다. 그러나 c에 들어올 객체는 Cube가 기존에 가진 속성 외에도 이외에 속성을 가진 객체가 들어올 수도 있기 때문에 에러가 발생한다. 즉 아래와 같은 상황이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">namedCube</span> <span class=\"token punctuation\">{</span>\n  width<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n  height<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  depth<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Sweet'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string 타입의 추가 속성이 정의되었다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addLines</span><span class=\"token punctuation\">(</span>namedCube<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span></code></pre></div>\n<h2 id=\"-ts의-점진적-타입-확인\" style=\"position:relative;\"><a href=\"#-ts%EC%9D%98-%EC%A0%90%EC%A7%84%EC%A0%81-%ED%83%80%EC%9E%85-%ED%99%95%EC%9D%B8\" aria-label=\" ts의 점진적 타입 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 TS의 점진적 타입 확인</h2>\n<p>타입스크립트는 점진적으로 타입을 확인하는 언어다. 점진적 타입 검사란 컴파일 타임에 타입을 검사하면서 필요에 따라 타입 선언 생략을 허용하는 방식이다. 타입 선언을 생략하면 암시적 타입 변환이 일어난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 이러한 특징 때문에 타입스크립트의 타입 시스템은 정적 타입의 정확성을 100% 보장해주지 않는다. 모든 변수와 표현식의 타입을 컴파일타임에 검사하지 않아도 되기 때문에 타입이 올바르게 정해지지 않으면 런타임에서 에러가 발생하기도 한다.</p>\n<h3 id=\"-any-타입\" style=\"position:relative;\"><a href=\"#-any-%ED%83%80%EC%9E%85\" aria-label=\" any 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 any 타입</h3>\n<p>타입스크립트에서 <code class=\"language-text\">any</code> 타입은 타입스크립트 내 모든 타입의 종류를 포함하는 가장 상위 타입으로 어떤 타입 값이든 할당할 수 있다.</p>\n<h2 id=\"-값과-타입을-혼용하지-말자\" style=\"position:relative;\"><a href=\"#-%EA%B0%92%EA%B3%BC-%ED%83%80%EC%9E%85%EC%9D%84-%ED%98%BC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90\" aria-label=\" 값과 타입을 혼용하지 말자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 값과 타입을 혼용하지 말자</h2>\n<p>타입은 우리가 흔히 아는 number, boolean, string 타입 외에도 <code class=\"language-text\">type</code>이나 <code class=\"language-text\">interface</code> 키워드로 커스텀 타입을 정의할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>값 공간과 타입 공간의 이름은 서로 충돌하지 않기 때문에 타입과 변수를 같은 이름으로 정의할 수 있는데 타입스크립트가 자바스크립트의 슈퍼셋인 것과 관련이 있다. 타입스크립트 문법인 type으로 선언한 내용은 자바스크립트 런타임에서 제거되기 때문에 값 공간과 타입 공간은 서로 충돌하지 않는다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Developer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isWorking<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Developer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> isTyping<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 타입스크립트에서 값과 타입의 구분은 맥락에 따라 달라지기 때문에 값 공간과 타입 공간을 혼동할 때도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">email</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> subject<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> body<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> subject<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ....</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>의도는 이해가 가지만 위와 같이 작성하면 오류가 발생한다. 특히 두번째 코드에 등장하는 <strong>구조분해 할당은 타입스크립트에서 오류가 발생한다.</strong> 하나의 key와 value로 인식해버리기 때문이다.</p>\n<p>위와 같은 문제를 해결하기 위해서는 값과 타입을 구분해서 작성해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> num<span class=\"token punctuation\">,</span> subject<span class=\"token punctuation\">,</span> body <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> subject<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> body<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"-ts에서-클래스는-타입으로도-사용된다\" style=\"position:relative;\"><a href=\"#-ts%EC%97%90%EC%84%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C%EB%8F%84-%EC%82%AC%EC%9A%A9%EB%90%9C%EB%8B%A4\" aria-label=\" ts에서 클래스는 타입으로도 사용된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 TS에서 클래스는 타입으로도 사용된다</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Developer</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> domain<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>domain <span class=\"token operator\">=</span> domain<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> me<span class=\"token operator\">:</span> Developer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Developer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zig'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'frontend'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>변수명 me 뒤에 등장하는 Developer에서 Developer는 타입에 해당하지만 new 키워드 뒤의 Developer는 클래스 생성자 함수인 값으로 동작한다.</p>\n<p><strong>타입스크립트에서 클래스는 타입 애너테이션으로 사용할 수 있지만 런타임에서 객체로 변환되어 자바스크립트의 값으로 사용되는 특징이 있다.</strong></p>\n<h2 id=\"-타입을-확인하는-방법\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\" 타입을 확인하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 타입을 확인하는 방법</h2>\n<p>타입스크립트에서는 값 공간과 타입 공간이 별도로 존재한다. 타입스크립트에서 <code class=\"language-text\">typeof</code> 연산자도 값에서 쓰일 때와 타입에서 쓰일 때의 역할이 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Developer</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  sleepingTime<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> sleepingTime<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sleepingTime <span class=\"token operator\">=</span> sleepingTime<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> Developer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'function'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> Developer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// typeof Developer</span></code></pre></div>\n<p>자바스크립트의 클래스는 결국 함수이기 때문에 값 공간에서는 function이 된다. 타입 공간에서의 반환 값은 그 자체인 typeof Developer가 된다.</p>\n<h3 id=\"-타입-단언-as\" style=\"position:relative;\"><a href=\"#-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8-as\" aria-label=\" 타입 단언 as permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 타입 단언: as</h3>\n<p>타입스크립트에서는 <code class=\"language-text\">타입 단언</code> 이라 부르는 문법을 사용해서 타입을 강제할 수도 있는데 이는 <code class=\"language-text\">as</code>키워드를 사용하면 된다. 타입 단언은 개발자가 해당 값의 타입을 더 잘 파악할 수 있을 때 사용되며 강제 형 변환과 유사한 기능을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> loaded_text<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unknown 타입 값을 전달 받았다는 가정</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">validateInputText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'최소 10글자 이상 입력해주세요'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'정상 입력된 값입니다.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">validateInputText</span><span class=\"token punctuation\">(</span>loaded_text <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드에서는 <code class=\"language-text\">as</code> 키워드를 사용해서 string 타입으로 강제하지 않으면 타입스크립트 컴파일러 단계에서 에러가 발생한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-ts%EB%8A%94-%ED%83%80%EC%9E%85-%EC%95%A0%EB%84%88%ED%85%8C%EC%9D%B4%EC%85%98-%EB%B0%A9%EC%8B%9D\">🎯 TS는 타입 애너테이션 방식</a></p>\n</li>\n<li>\n<p><a href=\"#-ts%EB%8A%94-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%B4%EB%8B%A4\">🎯 TS는 구조적 타이핑이다</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%9D%98-%EB%8B%A8%EC%A0%90\">🎯 구조적 타이핑의 단점</a></p>\n</li>\n<li>\n<p><a href=\"#-ts%EC%9D%98-%EC%A0%90%EC%A7%84%EC%A0%81-%ED%83%80%EC%9E%85-%ED%99%95%EC%9D%B8\">🎯 TS의 점진적 타입 확인</a></p>\n<ul>\n<li><a href=\"#-any-%ED%83%80%EC%9E%85\">💎 any 타입</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%92%EA%B3%BC-%ED%83%80%EC%9E%85%EC%9D%84-%ED%98%BC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90\">🎯 값과 타입을 혼용하지 말자</a></p>\n<ul>\n<li><a href=\"#-ts%EC%97%90%EC%84%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C%EB%8F%84-%EC%82%AC%EC%9A%A9%EB%90%9C%EB%8B%A4\">💎 TS에서 클래스는 타입으로도 사용된다</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%83%80%EC%9E%85%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">🎯 타입을 확인하는 방법</a></p>\n<ul>\n<li><a href=\"#-%ED%83%80%EC%9E%85-%EB%8B%A8%EC%96%B8-as\">💎 타입 단언: as</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 20, 2023","title":"타입스크립트의 타입 시스템","categories":"타입스크립트","author":"재오","emoji":"📘"},"fields":{"slug":"/TS1/"}},"prev":{"id":"53b0dd88-2015-5f8d-8553-b5377120dcf2","html":"<h2 id=\"-우선순위-큐\" style=\"position:relative;\"><a href=\"#-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90\" aria-label=\" 우선순위 큐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 우선순위 큐</h2>\n<p>우선순위 큐는 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조의 일부이며 데이터를 우선순위에 따라 처리하고 싶을 때 사용한다.</p>\n<h2 id=\"-우선순위-큐의-구현-방법\" style=\"position:relative;\"><a href=\"#-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90%EC%9D%98-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95\" aria-label=\" 우선순위 큐의 구현 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 우선순위 큐의 구현 방법</h2>\n<p>크게 2가지로 분류할 수 있다. <code class=\"language-text\">배열</code>로 구현하는 방법과 <code class=\"language-text\">힙</code>으로 구현하는 방법. 우선 <strong>배열로 구현</strong>하는 것은 구현 자체가 간단하다는 장점이 있지만 데이터를 삭제하거나 삽입해야하는 경우 모든 인덱스를 탐색해야 하는 과정이 있기 때문에 시간복잡도가 **O(N)**이 되므로 상대적으로 부족한 성능을 보여준다.</p>\n<p>하지만 힙으로 구현하는 것은 구현 자체에서 난이도가 높지만 시간복잡도가 **O(logN)**이기 때문에 좋은 성능을 보여준다.</p>\n<h2 id=\"-힙의-특징\" style=\"position:relative;\"><a href=\"#-%ED%9E%99%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\" 힙의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 힙의 특징</h2>\n<p>그렇다면 힙의 특징은 무엇일까?</p>\n<p><img src=\"/b3c3b55c0dc149dadf723a72ca67b8b4/priority.png\" alt=\"\"></p>\n<ul>\n<li>힙은 <strong>완전 이진 트리</strong> 자료구조이다.</li>\n</ul>\n<p>완전 이진 트리란 마지막 레벨을 제외하고 모든 레벨이 모두 채워져있으며, 마지막 레벨의 모든 노드는 가능한 왼쪽에 위치한다. 즉, 루트 노드로부터 시작하여 왼쪽에서 오른쪽 자식 노드 순서대로 데이터가 순차적으로 삽입되는 트리를 의미한다.</p>\n<ul>\n<li>최소 힙</li>\n</ul>\n<p>루트 노드가 가장 작은 값을 가지며 값이 작은 데이터가 우선적으로 제거된다. 최소 힙은 부모 노드가 항상 자식 노드보다 값이 작다.</p>\n<ul>\n<li>최대 힙</li>\n</ul>\n<p>루트 노드가 가장 큰 값을 가지며 값이 큰 데이터가 우선적으로 제거된다. 최대 힙은 부모 노드가 항상 자식 노드보다 값이 크다.</p>\n<ul>\n<li>힙의 인덱스 관계</li>\n</ul>\n<p>좌측 자식 노드의 인덱스: 부모 노드의 인덱스 _ 2\n우측 자식 노드의 인덱스: 부모 노드의 인덱스 _ 2 + 1\n부모 노드의 인덱스: Math.floor(자식 노드의 인덱스 / 2)</p>\n<h2 id=\"최대-힙의-코드-구현-js\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EB%8C%80-%ED%9E%99%EC%9D%98-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84-js\" aria-label=\"최대 힙의 코드 구현 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최대 힙의 코드 구현 (JS)</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MaxHeap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이해하기 쉽게 0번째 Index는 null</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">heapPush</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> currentIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> parentIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>currentIndex <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>parentIndex <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>parentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n      currentIndex <span class=\"token operator\">=</span> parentIndex<span class=\"token punctuation\">;</span>\n      parentIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>currentIndex <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">heapPop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 루트 노드밖에 없는 경우</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> returnValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> currentIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> leftIndex <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> rightIndex <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>rightIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        currentIndex <span class=\"token operator\">=</span> rightIndex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>currentIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">[</span>leftIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        currentIndex <span class=\"token operator\">=</span> leftIndex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      leftIndex <span class=\"token operator\">=</span> currentIndex <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      rightIndex <span class=\"token operator\">=</span> leftIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> returnValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">heapReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heap<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90\">🎯 우선순위 큐</a></li>\n<li><a href=\"#-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%ED%81%90%EC%9D%98-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95\">🎯 우선순위 큐의 구현 방법</a></li>\n<li><a href=\"#-%ED%9E%99%EC%9D%98-%ED%8A%B9%EC%A7%95\">🎯 힙의 특징</a></li>\n<li><a href=\"#%EC%B5%9C%EB%8C%80-%ED%9E%99%EC%9D%98-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84-js\">최대 힙의 코드 구현 (JS)</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2023","title":"알고리즘 준비하기 - 우선순위 큐","categories":"알고리즘","author":"재오","emoji":"📚"},"fields":{"slug":"/PriorityQueue/"}},"site":{"siteMetadata":{"siteUrl":"https://www.jaeochoiii.com","comments":{"utterances":{"repo":"jaeochoii/jaeochoii.github.io"}}}}},"pageContext":{"slug":"/TS2/","nextSlug":"/TS1/","prevSlug":"/PriorityQueue/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}