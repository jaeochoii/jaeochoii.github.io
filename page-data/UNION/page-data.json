{"componentChunkName":"component---src-templates-blog-template-js","path":"/UNION/","result":{"data":{"cur":{"id":"c2cf6915-0957-592e-a1f3-f75572ff9fd1","html":"<h2 id=\"-union과-union-all\" style=\"position:relative;\"><a href=\"#-union%EA%B3%BC-union-all\" aria-label=\" union과 union all permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 UNION과 UNION ALL</h2>\n<p><code class=\"language-text\">UNION</code>과 <code class=\"language-text\">UNION ALL</code>은 두 개의 결과를 결합하는 연산자이다. 결과를 합치는 방식과 중복 처리 방식에서 차이를 보인다.</p>\n<p>먼저 <code class=\"language-text\">UNION</code>은 중복된 행을 제거하여 결과에는 유니크한 행들만 포함한다. 결과는 정렬되어 반환되며, 중복된 행이 제거된 상태이다.</p>\n<p>다음으로 <code class=\"language-text\">UNION ALL</code>은 중복된 행을 제거하지 않고 모든 행을 포함한다. 결과는 정렬되지 않으며, 그대로 반환되는 것이 특징이다.</p>\n<p>여기서 <strong>중복을 제거한다</strong>는 것에 이해를 잘할 필요가 있다. <strong>중복 제거는 SELECT 구문의 모든 항목이 동일할 때에만 이루어진다.</strong> 즉 하나라도 값이 다르면 중복으로 처리되지 않는다.</p>\n<h2 id=\"-group-by-사용하여-중복된-name-제거하기\" style=\"position:relative;\"><a href=\"#-group-by-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A4%91%EB%B3%B5%EB%90%9C-name-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\" aria-label=\" group by 사용하여 중복된 name 제거하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 GROUP BY 사용하여 중복된 name 제거하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> grade\n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> grade <span class=\"token keyword\">FROM</span> students1\n    <span class=\"token keyword\">UNION</span>\n    <span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> grade <span class=\"token keyword\">FROM</span> students2\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> a\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> name\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> grade <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"-예제-확인하기-프로그래머스\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%A0%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4\" aria-label=\" 예제 확인하기 프로그래머스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 예제 확인하기 (프로그래머스)</h2>\n<p>👉 문제 확인하기 : <a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/131537\">오프라인/온라인 판매 데이터 통합하기\n</a></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> DATE_FORMAT<span class=\"token punctuation\">(</span>SALES_DATE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> SALES_DATE<span class=\"token punctuation\">,</span> PRODUCT_ID<span class=\"token punctuation\">,</span> USER_ID<span class=\"token punctuation\">,</span> SALES_AMOUNT\n<span class=\"token keyword\">FROM</span> ONLINE_SALE <span class=\"token keyword\">AS</span> N\n<span class=\"token keyword\">WHERE</span> SALES_DATE <span class=\"token operator\">LIKE</span> <span class=\"token string\">'2022-03%'</span>\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> DATE_FORMAT<span class=\"token punctuation\">(</span>SALES_DATE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> SALES_DATE<span class=\"token punctuation\">,</span> PRODUCT_ID<span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AS</span> USER_ID<span class=\"token punctuation\">,</span> SALES_AMOUNT\n<span class=\"token keyword\">FROM</span> OFFLINE_SALE <span class=\"token keyword\">AS</span> F\n<span class=\"token keyword\">WHERE</span> SALES_DATE <span class=\"token operator\">LIKE</span> <span class=\"token string\">'2022-03%'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> SALES_DATE<span class=\"token punctuation\">,</span> PRODUCT_ID<span class=\"token punctuation\">,</span> USER_ID</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-union%EA%B3%BC-union-all\">🎯 UNION과 UNION ALL</a></li>\n<li><a href=\"#-group-by-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A4%91%EB%B3%B5%EB%90%9C-name-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\">🎯 GROUP BY 사용하여 중복된 name 제거하기</a></li>\n<li><a href=\"#-%EC%98%88%EC%A0%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4\">🎯 예제 확인하기 (프로그래머스)</a></li>\n</ul>\n</div>","excerpt":"🎯 UNION과 UNION ALL 과 은 두 개의 결과를 결합하는 연산자이다. 결과를 합치는 방식과 중복 처리 방식에서 차이를 보인다. 먼저 은 중복된 행을 제거하여 결과에는 유니크한 행들만 포함한다. 결과는 정렬되어 반환되며, 중복된 행이 제거된 상태이다. 다음으로 은 중복된 행을 제거하지 않고 모든 행을 포함한다. 결과는 정렬되지 않으며, 그대로 반환되는 것이 특징이다. 여기서 중복을 제거한다는 것에 이해를 잘할 필요가 있다. 중복 제거는 SELECT 구문의 모든 항목이 동일할 때에만 이루어진다. 즉 하나라도 값이 다르면 중복으로 처리되지 않는다. 🎯 GROUP BY 사용하여 중복된 name 제거하기 🎯 예제 확인하기 (프로그래머스) 👉 문제 확인하기 : 오프라인/온라인 판매 데이터 통합하기\n 🎯 UNION과 UNION ALL 🎯 GROUP BY 사용하여 중복된 name 제거하기 🎯 예제 확인하기 (프로그래머스)","frontmatter":{"date":"February 14, 2024","title":"MySQL 준비하기 - UNION","categories":"MySQL","author":"재오","emoji":"🗃️"},"fields":{"slug":"/UNION/"}},"next":{"id":"8510dc68-b97e-5b38-b66f-a75e2807a799","html":"<h2 id=\"-벨만-포드\" style=\"position:relative;\"><a href=\"#-%EB%B2%A8%EB%A7%8C-%ED%8F%AC%EB%93%9C\" aria-label=\" 벨만 포드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 벨만 포드</h2>\n<p><code class=\"language-text\">벨만 포드</code> 알고리즘은 유향 그래프에서 최단 경로를 계산할 때 이용되는 알고리즘이다. 하지만 의문이 든다. 이전 포스트에서 유향 그래프 최단 경로를 계산할 때 <code class=\"language-text\">다익스트라</code> 알고리즘을 사용한다고 했었기 때문이다. 하지만 벨만 포드 알고리즘이 다익스트라 알고리즘과 가장 큰 차이를 보이는 곳은 <code class=\"language-text\">가중치의 음수 여부</code> 이다.</p>\n<p>다익스트라 알고리즘은 벨만 포드 알고리즘과 동일한 작업을 수행하지만 실행속도는 더 빠르다.</p>\n<p>그렇다면 똑같이 최단 경로를 구하는 알고리즘인데 왜 가중치가 음수일 때 벨만 포드 알고리즘을 사용해야 할까? 이 질문에 답으로 아래와 같은 그래프를 한번 살펴보자.</p>\n<p><img src=\"/4694328718388078b6470a214dc83dba/image.png\" alt=\"\"></p>\n<p>만약 위 그래프에서 시작 노드가 2인 경우를 생각해보자. 만약 4에서 2로 가는 가중치가 양수이고, 다익스트라 알고리즘을 사용했을 경우 2 - 3 - 4를 순회하고 절대 2로 다시 돌아가지 않는다. 왜냐하면 가중치 합의 최소값이 2 - 3 - 4 이후에는 갱신될 수 없기 때문에 큐에는 노드 4가 남는다.</p>\n<p>하지만 4에서 2로 가는 가중치가 음수인 경우에는 합을 계산하면 계산할 수록 최소값이 되기 때문에 음의 무한대가 되는 현상이 발생한다. 따라서 이 때에는 벨만 포드 알고리즘을 사용하여 음의 사이클을 없애는 방향으로 진행되어야 한다.</p>\n<h2 id=\"-음의-사이클-감지\" style=\"position:relative;\"><a href=\"#-%EC%9D%8C%EC%9D%98-%EC%82%AC%EC%9D%B4%ED%81%B4-%EA%B0%90%EC%A7%80\" aria-label=\" 음의 사이클 감지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 음의 사이클 감지</h2>\n<p>간단하게 설명하지면 벨만 포드 알고리즘에서는 음의 사이클이 처음으로 감지된다면 최단 거리를 찾을 수 없는 반환값을 return하게 된다.</p>\n<ol>\n<li>모든 노드까지의 거리를 Infinity로 초기화하고, 출발 노드의 거리는 0으로 초기화한다.</li>\n<li>모든 간선을 탐색하여 최단 거리를 갱신한다.</li>\n<li>2번의 과정을 노드의 개수 -1번 반복한다.</li>\n<li>3번까지의 과정에서 이미 최단 거릭 갱신이 완료되어야 한다. 그렇기 때문에 만약 2번의 과정을 한번 더 수행했을 때 최단 거리가 갱신된다면 음의 사이클이 존재한다고 판단한다. 음의 사이클이 존재한다면 최단 거리를 구하는 것이 불가능함을 알려야 한다.</li>\n</ol>\n<h2 id=\"-코드-구현-과정-js\" style=\"position:relative;\"><a href=\"#-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84-%EA%B3%BC%EC%A0%95-js\" aria-label=\" 코드 구현 과정 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 코드 구현 과정 (JS)</h2>\n<p>👉 관련 문제 풀어보기 : <a href=\"https://www.acmicpc.net/problem/11657\">BOJ - 타임머신</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 시작점과 종점, 가중치가 담겨 있는 배열 생성</span>\n<span class=\"token keyword\">let</span> paths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  paths<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 거리의 값을 갱신할 수 있는 배열 생성</span>\n<span class=\"token keyword\">let</span> distance <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">BellmanFord</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  distance<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> updated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// N-1번 최단거리를 계산하는 작업이 진행된다</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    updates <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> paths<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">&lt;</span> distance<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        distance<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distance<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight<span class=\"token punctuation\">;</span>\n        updated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 최단 거리는 이미 계산이 된 상태이다. 한 번 더 비교를 하면서 최단거리가 변경되면 -1을 리턴한다</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>updated<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>updated <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">N</span> <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">BellmanFord</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>answer <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> answer<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%B2%A8%EB%A7%8C-%ED%8F%AC%EB%93%9C\">🎯 벨만 포드</a></li>\n<li><a href=\"#-%EC%9D%8C%EC%9D%98-%EC%82%AC%EC%9D%B4%ED%81%B4-%EA%B0%90%EC%A7%80\">🎯 음의 사이클 감지</a></li>\n<li><a href=\"#-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84-%EA%B3%BC%EC%A0%95-js\">🎯 코드 구현 과정 (JS)</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 14, 2024","title":"알고리즘 준비하기 - 벨만 포드","categories":"알고리즘","author":"재오","emoji":"📚"},"fields":{"slug":"/BellmanFord/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.jaeochoiii.com","comments":{"utterances":{"repo":"jaeochoii/jaeochoii.github.io"}}}}},"pageContext":{"slug":"/UNION/","nextSlug":"/BellmanFord/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}