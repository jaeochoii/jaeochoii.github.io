{"componentChunkName":"component---src-templates-blog-template-js","path":"/Fibonacci/","result":{"data":{"cur":{"id":"72783472-18ac-5767-add2-d69b7d99933c","html":"<h2 id=\"-분할-정복을-통한-피보나치-수열의-이해\" style=\"position:relative;\"><a href=\"#-%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5%EC%9D%84-%ED%86%B5%ED%95%9C-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4%EC%9D%98-%EC%9D%B4%ED%95%B4\" aria-label=\" 분할 정복을 통한 피보나치 수열의 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 분할 정복을 통한 피보나치 수열의 이해</h2>\n<p>👉 문제 확인하기 : <a href=\"https://www.acmicpc.net/problem/11444\">BOJ - 피보나티 수 6</a></p>\n<p>문제를 확인해보면 n은 1,000,000,000,000,000,000보다 작거나 같은 자연수이다. 우리가 흔히 아는 F(N+2) = F(N+1) + F(N) 공식을 적용한다면 n이 너무 크기 때문에 시간초과가 발생한다.</p>\n<p>저 공식 말고는 마땅히 생각나는 공식이 없었다. 구글의 도움을 받으려고 하니 행렬을 이용한다면 피보나치 수열 문제를 빠르게 해결할 수 있었다.</p>\n<p><img src=\"/de0df6ad0993227bb9832298534c43be/image.png\" alt=\"\"></p>\n<p>만약 2의 N제곱의 값이 2의 A제곱 + 2의 B제곱이라고 한다면 N = A+B로 나타낼 수 있다. 이와 같은 원리를 위 그림에 적용해보자.</p>\n<p>[[F(N+1), F(N)], [F(N), F(N-1)]]과 같은 행렬은 [[F(A+1), F(A)], [F(A), F(A-1)]] + [[F(B+1), F(B)], [F(B), F(B-1)]]로 만들 수 있다.</p>\n<p>그리고 이제부터 구하고자 하는 값이 홀수일 때와 짝수일 때로 나뉠 수 있는데</p>\n<p>먼저 홀수일 때에는 위에서 보이는 F(N-1)을 행렬의 곱셈공식을 통해 나타내면\nF(N-1) = F(A) x F(B) + F(A-1) x F(B-1)이다. 하지만 A와 B는 같다고 놓아도 상관없기 때문에 모든 것을 A로 통일시키면\nF(2A-1) = F(A)^2 + F(A-1)^2으로 표현이 가능하다.</p>\n<p>마찬가지로 짝수일 때를 적용하기 위해서는 F(N)을 행렬의 곱셈공식으로 표현할 필요가 있다.\nF(N) = F(A+1) x F(B) + F(A) x F(B-1)이다. 위와 같이 적용시키면\nF(2A) = (2F(A+1) - F(A)) x F(A)로 표현이 가능하다.</p>\n<p>위와 같이 점화식을 세워두면 작은 값을 통해서라도 큰 결과를 얻어낼 수 있다는 장점이 있다.</p>\n<h2 id=\"-피보나치-수열의-핵심-점화식\" style=\"position:relative;\"><a href=\"#-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4%EC%9D%98-%ED%95%B5%EC%8B%AC-%EC%A0%90%ED%99%94%EC%8B%9D\" aria-label=\" 피보나치 수열의 핵심 점화식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 피보나치 수열의 핵심 점화식</h2>\n<ul>\n<li>\n<p>N이 홀수일 때\nN = 2A - 1\nA = N+1 / 2\n<strong>F(A)^2 + F(A-1)^2</strong></p>\n</li>\n<li>\n<p>N이 짝수일 때\nN = 2A\nA = N / 2\n<strong>(2 x F(A-1) + F(B)) * F(B)</strong></p>\n</li>\n</ul>\n<h2 id=\"-코드-구현-js\" style=\"position:relative;\"><a href=\"#-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84-js\" aria-label=\" 코드 구현 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 코드 구현 (JS)</h2>\n<p>애초에 수가 어마무시하게 크기 때문에 반드시 <code class=\"language-text\">BigInt</code>를 사용해줘야만 한다.\nBigInt를 사용시에는 숫자 뒤에 <code class=\"language-text\">n</code>을 붙여줘야 오류가 발생하지 않는다. 또한 출력값은 String형태여야 n이 같이 출력되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000007n</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// BigInt 리터럴은 끝에 'n'을 붙입니다.</span>\n\n<span class=\"token comment\">// 피보나치 값 기본 세팅</span>\n<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// BigInt 리터럴은 끝에 'n'을 붙입니다.</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">3n</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 피보나치 계산 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 인덱스가 짝수인 경우</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">2n</span> <span class=\"token operator\">===</span> <span class=\"token number\">0n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> nIndex <span class=\"token operator\">=</span> index <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> fibonacciA <span class=\"token operator\">=</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span>nIndex <span class=\"token operator\">-</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> fibonacciB <span class=\"token operator\">=</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span>nIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2n</span> <span class=\"token operator\">*</span> fibonacciA <span class=\"token operator\">+</span> fibonacciB<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> fibonacciB<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> value <span class=\"token operator\">%</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span>\n\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 인덱스가 홀수인 경우</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">%</span> <span class=\"token number\">2n</span> <span class=\"token operator\">===</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> nIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> fibonacciA <span class=\"token operator\">=</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span>nIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> fibonacciB <span class=\"token operator\">=</span> <span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span>nIndex <span class=\"token operator\">-</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> fibonacciA <span class=\"token operator\">**</span> <span class=\"token number\">2n</span> <span class=\"token operator\">+</span> fibonacciB <span class=\"token operator\">**</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> value <span class=\"token operator\">%</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span>\n\n    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5%EC%9D%84-%ED%86%B5%ED%95%9C-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4%EC%9D%98-%EC%9D%B4%ED%95%B4\">🎯 분할 정복을 통한 피보나치 수열의 이해</a></li>\n<li><a href=\"#-%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4%EC%9D%98-%ED%95%B5%EC%8B%AC-%EC%A0%90%ED%99%94%EC%8B%9D\">🎯 피보나치 수열의 핵심 점화식</a></li>\n<li><a href=\"#-%EC%BD%94%EB%93%9C-%EA%B5%AC%ED%98%84-js\">🎯 코드 구현 (JS)</a></li>\n</ul>\n</div>","excerpt":"🎯 분할 정복을 통한 피보나치 수열의 이해 👉 문제 확인하기 : BOJ - 피보나티 수 6 문제를 확인해보면 n은 1,000,000,000,000,000,000보다 작거나 같은 자연수이다. 우리가 흔히 아는 F(N+2) = F(N+1) + F(N) 공식을 적용한다면 n이 너무 크기 때문에 시간초과가 발생한다. 저 공식 말고는 마땅히 생각나는 공식이 없었다. 구글의 도움을 받으려고 하니 행렬을 이용한다면 피보나치 수열 문제를 빠르게 해결할 수 있었다.  만약 2의 N제곱의 값이 2의 A제곱 + 2의 B제곱이라고 한다면 N = A+B로 나타낼 수 있다. 이와 같은 원리를 위 그림에 적용해보자. [[F(N+1), F(N)], [F(N), F(N-1)]]과 같은 행렬은 [[F(A+1), F(A)], [F(A), F(A-1)]] + [[F(B+1), F(B)], [F(B), F(B-1)]]로 만들 수 있다. 그리고 이제부터 구하고자 하는 값이 홀수일 때와 짝수일 때로 나뉠 수 있는데 먼저 …","frontmatter":{"date":"February 15, 2024","title":"알고리즘 연습하기 - 피보나치 수열","categories":"알고리즘","author":"재오","emoji":"✏️"},"fields":{"slug":"/Fibonacci/"}},"next":{"id":"c2cf6915-0957-592e-a1f3-f75572ff9fd1","html":"<h2 id=\"-union과-union-all\" style=\"position:relative;\"><a href=\"#-union%EA%B3%BC-union-all\" aria-label=\" union과 union all permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 UNION과 UNION ALL</h2>\n<p><code class=\"language-text\">UNION</code>과 <code class=\"language-text\">UNION ALL</code>은 두 개의 결과를 결합하는 연산자이다. 결과를 합치는 방식과 중복 처리 방식에서 차이를 보인다.</p>\n<p>먼저 <code class=\"language-text\">UNION</code>은 중복된 행을 제거하여 결과에는 유니크한 행들만 포함한다. 결과는 정렬되어 반환되며, 중복된 행이 제거된 상태이다.</p>\n<p>다음으로 <code class=\"language-text\">UNION ALL</code>은 중복된 행을 제거하지 않고 모든 행을 포함한다. 결과는 정렬되지 않으며, 그대로 반환되는 것이 특징이다.</p>\n<p>여기서 <strong>중복을 제거한다</strong>는 것에 이해를 잘할 필요가 있다. <strong>중복 제거는 SELECT 구문의 모든 항목이 동일할 때에만 이루어진다.</strong> 즉 하나라도 값이 다르면 중복으로 처리되지 않는다.</p>\n<h2 id=\"-group-by-사용하여-중복된-name-제거하기\" style=\"position:relative;\"><a href=\"#-group-by-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A4%91%EB%B3%B5%EB%90%9C-name-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\" aria-label=\" group by 사용하여 중복된 name 제거하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 GROUP BY 사용하여 중복된 name 제거하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> grade\n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> grade <span class=\"token keyword\">FROM</span> students1\n    <span class=\"token keyword\">UNION</span>\n    <span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> grade <span class=\"token keyword\">FROM</span> students2\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> a\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> name\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> grade <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"-예제-확인하기-프로그래머스\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%A0%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4\" aria-label=\" 예제 확인하기 프로그래머스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 예제 확인하기 (프로그래머스)</h2>\n<p>👉 문제 확인하기 : <a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/131537\">오프라인/온라인 판매 데이터 통합하기\n</a></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> DATE_FORMAT<span class=\"token punctuation\">(</span>SALES_DATE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> SALES_DATE<span class=\"token punctuation\">,</span> PRODUCT_ID<span class=\"token punctuation\">,</span> USER_ID<span class=\"token punctuation\">,</span> SALES_AMOUNT\n<span class=\"token keyword\">FROM</span> ONLINE_SALE <span class=\"token keyword\">AS</span> N\n<span class=\"token keyword\">WHERE</span> SALES_DATE <span class=\"token operator\">LIKE</span> <span class=\"token string\">'2022-03%'</span>\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> DATE_FORMAT<span class=\"token punctuation\">(</span>SALES_DATE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> SALES_DATE<span class=\"token punctuation\">,</span> PRODUCT_ID<span class=\"token punctuation\">,</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AS</span> USER_ID<span class=\"token punctuation\">,</span> SALES_AMOUNT\n<span class=\"token keyword\">FROM</span> OFFLINE_SALE <span class=\"token keyword\">AS</span> F\n<span class=\"token keyword\">WHERE</span> SALES_DATE <span class=\"token operator\">LIKE</span> <span class=\"token string\">'2022-03%'</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> SALES_DATE<span class=\"token punctuation\">,</span> PRODUCT_ID<span class=\"token punctuation\">,</span> USER_ID</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-union%EA%B3%BC-union-all\">🎯 UNION과 UNION ALL</a></li>\n<li><a href=\"#-group-by-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A4%91%EB%B3%B5%EB%90%9C-name-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\">🎯 GROUP BY 사용하여 중복된 name 제거하기</a></li>\n<li><a href=\"#-%EC%98%88%EC%A0%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4\">🎯 예제 확인하기 (프로그래머스)</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 14, 2024","title":"MySQL 준비하기 - UNION","categories":"MySQL","author":"재오","emoji":"🗃️"},"fields":{"slug":"/UNION/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.jaeochoiii.com","comments":{"utterances":{"repo":"jaeochoii/jaeochoii.github.io"}}}}},"pageContext":{"slug":"/Fibonacci/","nextSlug":"/UNION/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}