{"componentChunkName":"component---src-templates-blog-template-js","path":"/GROUP_BY/","result":{"data":{"cur":{"id":"57cdaf28-715b-590b-961e-1050f3daea68","html":"<h2 id=\"-그룹화하여-데이터-조회하기\" style=\"position:relative;\"><a href=\"#-%EA%B7%B8%EB%A3%B9%ED%99%94%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0\" aria-label=\" 그룹화하여 데이터 조회하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 그룹화하여 데이터 조회하기</h2>\n<p>MySQL에서 <code class=\"language-text\">COUNT</code>함수를 이용하면 테이블 전체의 데이터 갯수만 가져온다. 하지만 유형별로 갯수를 알고 싶을 때에는 컬럼에 데이터를 그룹화 할 수 있는 <code class=\"language-text\">GROUP BY</code>를 사용하는 것이 일반적이다.</p>\n<p><code class=\"language-text\">GROUP BY</code>를 사용할 때는 아래 두가지를 반드시 기억해야 한다.</p>\n<ul>\n<li>특정 컬럼을 그룹화하는 <code class=\"language-text\">GROUP BY</code></li>\n<li>특정 컬럼을 그룹화한 결과에 조건을 거는 <code class=\"language-text\">HAVING</code></li>\n</ul>\n<p>여기서 <code class=\"language-text\">WHERE</code>도 조건을 걸 때 많이 쓰이기 때문에 혼란이 발생할 수 있으나 <code class=\"language-text\">WHERE</code>은 그룹화를 하기 전이고, <code class=\"language-text\">HAVING</code>은 그룹화 후에 조건을 거는 것이다.</p>\n<h2 id=\"-group-by-사용하기\" style=\"position:relative;\"><a href=\"#-group-by-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\" group by 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 GROUP BY 사용하기</h2>\n<h3 id=\"-컬럼-그룹화\" style=\"position:relative;\"><a href=\"#-%EC%BB%AC%EB%9F%BC-%EA%B7%B8%EB%A3%B9%ED%99%94\" aria-label=\" 컬럼 그룹화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 컬럼 그룹화</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 컬럼명 <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 그룹화할 컬럼<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"-조건-처리-후에-컬럼-그룹화\" style=\"position:relative;\"><a href=\"#-%EC%A1%B0%EA%B1%B4-%EC%B2%98%EB%A6%AC-%ED%9B%84%EC%97%90-%EC%BB%AC%EB%9F%BC-%EA%B7%B8%EB%A3%B9%ED%99%94\" aria-label=\" 조건 처리 후에 컬럼 그룹화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 조건 처리 후에 컬럼 그룹화</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 컬럼명 <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">WHERE</span> 조건식 <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 그룹화할 컬럼<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"-컬럼-그룹화-후에-조건-처리\" style=\"position:relative;\"><a href=\"#-%EC%BB%AC%EB%9F%BC-%EA%B7%B8%EB%A3%B9%ED%99%94-%ED%9B%84%EC%97%90-%EC%A1%B0%EA%B1%B4-%EC%B2%98%EB%A6%AC\" aria-label=\" 컬럼 그룹화 후에 조건 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 컬럼 그룹화 후에 조건 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 컬럼명 <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 그룹화할 컬럼 <span class=\"token keyword\">HAVING</span> 조건식<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"-조건-처리-후에-컬럼-그룹화-후에-조건-처리\" style=\"position:relative;\"><a href=\"#-%EC%A1%B0%EA%B1%B4-%EC%B2%98%EB%A6%AC-%ED%9B%84%EC%97%90-%EC%BB%AC%EB%9F%BC-%EA%B7%B8%EB%A3%B9%ED%99%94-%ED%9B%84%EC%97%90-%EC%A1%B0%EA%B1%B4-%EC%B2%98%EB%A6%AC\" aria-label=\" 조건 처리 후에 컬럼 그룹화 후에 조건 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 조건 처리 후에 컬럼 그룹화 후에 조건 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 컬럼명 <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">WHERE</span> 조건식 <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 그룹화할 컬럼 <span class=\"token keyword\">HAVING</span> 조건식<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"-order-by가-존재하는-경우\" style=\"position:relative;\"><a href=\"#-order-by%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\" order by가 존재하는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 ORDER BY가 존재하는 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> 컬럼명 <span class=\"token keyword\">FROM</span> 테이블명 <span class=\"token keyword\">WHERE</span> 조건식\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> 그룹화할 컬럼 <span class=\"token keyword\">HAVING</span> 조건식\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> 컬럼<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 컬럼<span class=\"token number\">2</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"-예제로-확인하기\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%A0%9C%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\" 예제로 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 예제로 확인하기</h2>\n<p>👉 문제 확인하기 : <a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/131536\">프로그래머스 - 재구매가 일어난 상품과 회원 리스트 구하기</a></p>\n<p>ONLINE_SALE 테이블에서 동일한 회원이 동일한 상품을 재구매한 데이터를 구하여, 재구매한 회원 ID와 재구매한 상품 ID를 출력하는 SQL문을 작성해주세요. 결과는 회원 ID를 기준으로 오름차순 정렬해주시고 회원 ID가 같다면 상품 ID를 기준으로 내림차순 정렬해주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> USER_ID<span class=\"token punctuation\">,</span> PRODUCT_ID\n<span class=\"token keyword\">FROM</span> ONLINE_SALE\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> USER_ID<span class=\"token punctuation\">,</span> PRODUCT_ID\n<span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> USER_ID<span class=\"token punctuation\">,</span> PRODUCT_ID <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B7%B8%EB%A3%B9%ED%99%94%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0\">🎯 그룹화하여 데이터 조회하기</a></p>\n</li>\n<li>\n<p><a href=\"#-group-by-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">🎯 GROUP BY 사용하기</a></p>\n<ul>\n<li><a href=\"#-%EC%BB%AC%EB%9F%BC-%EA%B7%B8%EB%A3%B9%ED%99%94\">💎 컬럼 그룹화</a></li>\n<li><a href=\"#-%EC%A1%B0%EA%B1%B4-%EC%B2%98%EB%A6%AC-%ED%9B%84%EC%97%90-%EC%BB%AC%EB%9F%BC-%EA%B7%B8%EB%A3%B9%ED%99%94\">💎 조건 처리 후에 컬럼 그룹화</a></li>\n<li><a href=\"#-%EC%BB%AC%EB%9F%BC-%EA%B7%B8%EB%A3%B9%ED%99%94-%ED%9B%84%EC%97%90-%EC%A1%B0%EA%B1%B4-%EC%B2%98%EB%A6%AC\">💎 컬럼 그룹화 후에 조건 처리</a></li>\n<li><a href=\"#-%EC%A1%B0%EA%B1%B4-%EC%B2%98%EB%A6%AC-%ED%9B%84%EC%97%90-%EC%BB%AC%EB%9F%BC-%EA%B7%B8%EB%A3%B9%ED%99%94-%ED%9B%84%EC%97%90-%EC%A1%B0%EA%B1%B4-%EC%B2%98%EB%A6%AC\">💎 조건 처리 후에 컬럼 그룹화 후에 조건 처리</a></li>\n<li><a href=\"#-order-by%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">💎 ORDER BY가 존재하는 경우</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%98%88%EC%A0%9C%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\">🎯 예제로 확인하기</a></p>\n</li>\n</ul>\n</div>","excerpt":"🎯 그룹화하여 데이터 조회하기 MySQL에서 함수를 이용하면 테이블 전체의 데이터 갯수만 가져온다. 하지만 유형별로 갯수를 알고 싶을 때에는 컬럼에 데이터를 그룹화 할 수 있는 를 사용하는 것이 일반적이다. 를 사용할 때는 아래 두가지를 반드시 기억해야 한다. 특정 컬럼을 그룹화하는  특정 컬럼을 그룹화한 결과에 조건을 거는  여기서 도 조건을 걸 때 많이 쓰이기 때문에 혼란이 발생할 수 있으나 은 그룹화를 하기 전이고, 은 그룹화 후에 조건을 거는 것이다. 🎯 GROUP BY 사용하기 💎 컬럼 그룹화 💎 조건 처리 후에 컬럼 그룹화 💎 컬럼 그룹화 후에 조건 처리 💎 조건 처리 후에 컬럼 그룹화 후에 조건 처리 💎 ORDER BY가 존재하는 경우 🎯 예제로 확인하기 👉 문제 확인하기 : 프로그래머스 - 재구매가 일어난 상품과 회원 리스트 구하기 ONLINE_SALE 테이블에서 동일한 회원이 동일한 상품을 재구매한 데이터를 구하여, 재구매한 회원 ID와 재구매한 상품 ID를 출력하…","frontmatter":{"date":"February 07, 2024","title":"MySQL 준비하기 - GROUP BY","categories":"MySQL","author":"재오","emoji":"🗃️"},"fields":{"slug":"/GROUP_BY/"}},"next":{"id":"90a4f21e-90ba-515c-861b-22f05eb64a8a","html":"<h2 id=\"-트리\" style=\"position:relative;\"><a href=\"#-%ED%8A%B8%EB%A6%AC\" aria-label=\" 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 트리</h2>\n<p>트리는 계층적인 자료를 표현하는 데 사용되는 자료구조이다.</p>\n<p><img src=\"/423d4774029585fc62d5e6bae630f106/i1.png\" alt=\"\"></p>\n<p><strong>Node</strong>\ntree의 각 요소를 노드라고 한다. B를 A의 자식 노드, A를 B의 부모 노드라고 한다. 각 Node는 자신의 데이터를 가지고 있으며, 자식 노드의 주소를 가지고 있을 수도 있다.</p>\n<p><strong>Root Node</strong>\nA와 같이 부모 노드가 없고 최상단에 위치한 Node를 루트 노드라고 한다.</p>\n<p><strong>Leaf Node</strong>\nH, I, E, J, G처럼 자식 노드가 없는 노드를 Leaf Node라고 한다.</p>\n<p><strong>Size</strong>\n모든 Node의 갯수를 크기라고 한다.</p>\n<p><strong>Depth</strong>\nRoot Node로부터의 거리를 깊이라고 한다.</p>\n<h2 id=\"-이진-트리\" style=\"position:relative;\"><a href=\"#-%EC%9D%B4%EC%A7%84-%ED%8A%B8%EB%A6%AC\" aria-label=\" 이진 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 이진 트리</h2>\n<p>자식 노드의 갯수가 최대 2개로 한정된 tree를 말한다.</p>\n<p><img src=\"/56f75ce7e49944e3d89402fbc519ca34/i2.png\" alt=\"\"></p>\n<p>최대 자식 노드 갯수가 2개인 것 뿐이므로 위 그림에서 G노드가 없어도 이진 트리이다.</p>\n<h2 id=\"-이진-탐색-트리\" style=\"position:relative;\"><a href=\"#-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC\" aria-label=\" 이진 탐색 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 이진 탐색 트리</h2>\n<p>이진 탐색이 동작할 수 있도록 고안된 자료구조의 일종이다. 왼쪽 자식 노드가 부모 노드보다 작고 오른쪽 자식 노드가 부모 노드보다 큰 이진 트리를 말한다.</p>\n<p><code class=\"language-text\">왼쪽 자식 &lt; 부모 노드 &lt; 오른쪽 자식</code></p>\n<p><img src=\"/614d89e7710f108b16e42e3c51d96b82/i3.png\" alt=\"\"></p>\n<p>위와 같은 조건이 성립하면 원하는 값을 찾고싶을 때 해당 값을 Root Node값과 비교하여 왼쪽 혹은 오른쪽으로 탐색해 나갈 수 있다.</p>\n<h2 id=\"-트리-순회\" style=\"position:relative;\"><a href=\"#-%ED%8A%B8%EB%A6%AC-%EC%88%9C%ED%9A%8C\" aria-label=\" 트리 순회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 트리 순회</h2>\n<p>트리 자료구조에 포함된 노드를 특정한 방법으로 한번 씩 방문하는 방법을 의미한다. 보통 자신을 출력하는 방법과 같이 방문한 노드를 시각적으로 확인이 가능하다.</p>\n<p>대표적으로 트리 순회 방법은 3가지가 있다.</p>\n<p><img src=\"/0e1f4798d2d3dd76f436ee583797ec0d/i4.png\" alt=\"\"></p>\n<h3 id=\"-in-order-중위-순회\" style=\"position:relative;\"><a href=\"#-in-order-%EC%A4%91%EC%9C%84-%EC%88%9C%ED%9A%8C\" aria-label=\" in order 중위 순회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 In Order (중위 순회)</h3>\n<ul>\n<li>왼쪽 노드부터 출력한다.</li>\n<li>이후 루트 노드를 출력한다.</li>\n<li>이후 오른쪽 노드를 출력한다.</li>\n</ul>\n<p>위의 트리를 중위 순회하면 D-B-E-A-F-C-G 이다.</p>\n<h3 id=\"-pre-order-전위-순회\" style=\"position:relative;\"><a href=\"#-pre-order-%EC%A0%84%EC%9C%84-%EC%88%9C%ED%9A%8C\" aria-label=\" pre order 전위 순회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 Pre Order (전위 순회)</h3>\n<ul>\n<li>루트 노드부터 출력한다.</li>\n<li>이후 왼쪽 노드를 출력한다.</li>\n<li>이후 오른쪽 노드를 출력한다.</li>\n</ul>\n<p>위의 트리를 중위 순회하면 A-B-D-E-C-F-G 이다.</p>\n<h3 id=\"-post-order-후위-순회\" style=\"position:relative;\"><a href=\"#-post-order-%ED%9B%84%EC%9C%84-%EC%88%9C%ED%9A%8C\" aria-label=\" post order 후위 순회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 Post Order (후위 순회)</h3>\n<ul>\n<li>왼쪽 노드부터 출력한다.</li>\n<li>이후 오른쪽 노드를 출력한다.</li>\n<li>이후 루트 노드를 출력한다.</li>\n</ul>\n<p>위의 트리를 중위 순회하면 D-E-B-F-G-C-A 이다.</p>\n<h2 id=\"-이진-트리-및-이진-순회-구현하기-js\" style=\"position:relative;\"><a href=\"#-%EC%9D%B4%EC%A7%84-%ED%8A%B8%EB%A6%AC-%EB%B0%8F-%EC%9D%B4%EC%A7%84-%EC%88%9C%ED%9A%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-js\" aria-label=\" 이진 트리 및 이진 순회 구현하기 js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 이진 트리 및 이진 순회 구현하기 (JS)</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTree</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySearchTree</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySearchTree</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token function\">BinarySearchTree</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nnewNode<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"-예제-확인하기\" style=\"position:relative;\"><a href=\"#-%EC%98%88%EC%A0%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\" 예제 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 예제 확인하기</h2>\n<p>👉 문제 확인하기 : <a href=\"https://www.acmicpc.net/problem/1991\">BOJ - 트리 순회</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">N</span> <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> tree <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">LC</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">RC</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">LC</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">RC</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">LC</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">RC</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">+=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">inOrder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%ED%8A%B8%EB%A6%AC\">🎯 트리</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%9D%B4%EC%A7%84-%ED%8A%B8%EB%A6%AC\">🎯 이진 트리</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC\">🎯 이진 탐색 트리</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%8A%B8%EB%A6%AC-%EC%88%9C%ED%9A%8C\">🎯 트리 순회</a></p>\n<ul>\n<li><a href=\"#-in-order-%EC%A4%91%EC%9C%84-%EC%88%9C%ED%9A%8C\">💎 In Order (중위 순회)</a></li>\n<li><a href=\"#-pre-order-%EC%A0%84%EC%9C%84-%EC%88%9C%ED%9A%8C\">💎 Pre Order (전위 순회)</a></li>\n<li><a href=\"#-post-order-%ED%9B%84%EC%9C%84-%EC%88%9C%ED%9A%8C\">💎 Post Order (후위 순회)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9D%B4%EC%A7%84-%ED%8A%B8%EB%A6%AC-%EB%B0%8F-%EC%9D%B4%EC%A7%84-%EC%88%9C%ED%9A%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-js\">🎯 이진 트리 및 이진 순회 구현하기 (JS)</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%98%88%EC%A0%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\">🎯 예제 확인하기</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 06, 2024","title":"알고리즘 준비하기 - 이진 트리와 이진 순회","categories":"알고리즘","author":"재오","emoji":"📚"},"fields":{"slug":"/BinaryTree/"}},"prev":{"id":"720d7d16-ca37-59c4-be5a-f9076a99e7fa","html":"<p>알고리즘 문제를 풀다보면 트리 관련해서 이진 트리 혹은 이진 트리 순회 문제도 많이 확인할 수 있지만 그래프의 지름을 구하는 문제도 종종 확인할 수 있다.</p>\n<p>👉 문제 확인하기 : <a href=\"https://www.acmicpc.net/problem/1167\">BOJ - 트리의 지름</a></p>\n<h2 id=\"-트리의-지름\" style=\"position:relative;\"><a href=\"#-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%A7%80%EB%A6%84\" aria-label=\" 트리의 지름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 트리의 지름</h2>\n<p>트리의 지름 문제는 간략하게 설명하자면 하나의 노드부터 가장 멀리 떨어져있는 노드의 거리를 계산하는 문제이다. 하지만 가장 멀리 떨어져있다고 해서 트리의 leaf를 의미하는 것은 아니다. 보통 간선의 가중치를 알려주기 때문에 하나의 노드에서부터 연결된 모든 노드의 가중치의 합이 가장 큰 값이 해당 트리의 지름인 셈이다.</p>\n<p>결과적으로 트리도 그래프와 같이 <code class=\"language-text\">DFS</code>를 활용하여 최대한 갈 수 있을만큼 가며 가중치를 계산하는 방식으로 구하면 된다. 단, BFS는 최단 거리를 구할 때 많이 사용되기 때문에 이 문제에서는 DFS를 이용해야 한다.</p>\n<p>모든 노드를 반복문을 이용하여 순회하는 것은 시간초과가 발생할 확률이 높다. 아니 거의 100% 시간초과가 발생한다. 여기서 1번 노드부터 가장 가중치가 큰 노드까지를 우선적으로 계산하고, 해당 노드에서부터 DFS를 진행하게 된다면 가장 긴 트리의 지름을 구할 수 있게된다.</p>\n<p>따라서 단순히 가중치만 계산하는 것이 아니라 노드의 번호까지 입력을 해줘야 코드가 정상적으로 작동이 된다.</p>\n<h2 id=\"-해결-코드\" style=\"position:relative;\"><a href=\"#-%ED%95%B4%EA%B2%B0-%EC%BD%94%EB%93%9C\" aria-label=\" 해결 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎯 해결 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> visited <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dist</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span> dist</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  visited<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span>dist <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">)</span> max <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> dist <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>nextDist<span class=\"token punctuation\">,</span> nextNode<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>nextNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">,</span> dist <span class=\"token operator\">+</span> nextDist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvisited<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">DFS</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span>dist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%ED%8A%B8%EB%A6%AC%EC%9D%98-%EC%A7%80%EB%A6%84\">🎯 트리의 지름</a></li>\n<li><a href=\"#-%ED%95%B4%EA%B2%B0-%EC%BD%94%EB%93%9C\">🎯 해결 코드</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 08, 2024","title":"알고리즘 연습하기 - DFS를 활용한 트리","categories":"알고리즘","author":"재오","emoji":"✏️"},"fields":{"slug":"/TreeDiameter/"}},"site":{"siteMetadata":{"siteUrl":"https://www.jaeochoiii.com","comments":{"utterances":{"repo":"jaeochoii/jaeochoii.github.io"}}}}},"pageContext":{"slug":"/GROUP_BY/","nextSlug":"/BinaryTree/","prevSlug":"/TreeDiameter/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}